{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * @hidden\r\n */\nvar StringUtils = /** @class */function () {\n  function StringUtils() {}\n  /**\r\n   * decode a JWT\r\n   *\r\n   * @param authToken\r\n   */\n  StringUtils.decodeAuthToken = function (authToken) {\n    if (StringUtils.isEmpty(authToken)) {\n      throw ClientAuthError$1.createTokenNullOrEmptyError(authToken);\n    }\n    var tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\n    var matches = tokenPartsRegex.exec(authToken);\n    if (!matches || matches.length < 4) {\n      throw ClientAuthError$1.createTokenParsingError(\"Given token is malformed: \" + JSON.stringify(authToken));\n    }\n    var crackedToken = {\n      header: matches[1],\n      JWSPayload: matches[2],\n      JWSSig: matches[3]\n    };\n    return crackedToken;\n  };\n  /**\r\n   * Check if a string is empty.\r\n   *\r\n   * @param str\r\n   */\n  StringUtils.isEmpty = function (str) {\n    return typeof str === \"undefined\" || !str || 0 === str.length;\n  };\n  /**\r\n   * Check if stringified object is empty\r\n   * @param strObj\r\n   */\n  StringUtils.isEmptyObj = function (strObj) {\n    if (strObj && !StringUtils.isEmpty(strObj)) {\n      try {\n        var obj = JSON.parse(strObj);\n        return Object.keys(obj).length === 0;\n      } catch (e) {}\n    }\n    return true;\n  };\n  StringUtils.startsWith = function (str, search) {\n    return str.indexOf(search) === 0;\n  };\n  StringUtils.endsWith = function (str, search) {\n    return str.length >= search.length && str.lastIndexOf(search) === str.length - search.length;\n  };\n  /**\r\n   * Parses string into an object.\r\n   *\r\n   * @param query\r\n   */\n  StringUtils.queryStringToObject = function (query) {\n    var match; // Regex for replacing addition symbol with a space\n    var pl = /\\+/g;\n    var search = /([^&=]+)=([^&]*)/g;\n    var decode = function (s) {\n      return decodeURIComponent(decodeURIComponent(s.replace(pl, \" \")));\n    };\n    var obj = {};\n    match = search.exec(query);\n    while (match) {\n      obj[decode(match[1])] = decode(match[2]);\n      match = search.exec(query);\n    }\n    return obj;\n  };\n  /**\r\n   * Trims entries in an array.\r\n   *\r\n   * @param arr\r\n   */\n  StringUtils.trimArrayEntries = function (arr) {\n    return arr.map(function (entry) {\n      return entry.trim();\n    });\n  };\n  /**\r\n   * Removes empty strings from array\r\n   * @param arr\r\n   */\n  StringUtils.removeEmptyStringsFromArray = function (arr) {\n    return arr.filter(function (entry) {\n      return !StringUtils.isEmpty(entry);\n    });\n  };\n  /**\r\n   * Attempts to parse a string into JSON\r\n   * @param str\r\n   */\n  StringUtils.jsonParseHelper = function (str) {\n    try {\n      return JSON.parse(str);\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\r\n   * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n   * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n   * @param input String to match against\r\n   */\n  StringUtils.matchPattern = function (pattern, input) {\n    /**\r\n     * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n     * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n     */\n    var regex = new RegExp(pattern.replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\"));\n    return regex.test(input);\n  };\n  return StringUtils;\n}();\nexport { StringUtils };","map":{"version":3,"mappings":"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","names":["StringUtils","authToken","isEmpty","ClientAuthError","createTokenNullOrEmptyError","tokenPartsRegex","matches","exec","length","createTokenParsingError","JSON","stringify","crackedToken","header","JWSPayload","JWSSig","str","strObj","obj","parse","Object","keys","e","search","indexOf","lastIndexOf","query","match","pl","decode","s","decodeURIComponent","replace","arr","map","trim","filter","entry","pattern","input","regex","RegExp","test"],"sources":["../../src/utils/StringUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { DecodedAuthToken } from \"../account/DecodedAuthToken\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class StringUtils {\r\n\r\n    /**\r\n     * decode a JWT\r\n     *\r\n     * @param authToken\r\n     */\r\n    static decodeAuthToken(authToken: string): DecodedAuthToken {\r\n        if (StringUtils.isEmpty(authToken)) {\r\n            throw ClientAuthError.createTokenNullOrEmptyError(authToken);\r\n        }\r\n        const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n        const matches = tokenPartsRegex.exec(authToken);\r\n        if (!matches || matches.length < 4) {\r\n            throw ClientAuthError.createTokenParsingError(`Given token is malformed: ${JSON.stringify(authToken)}`);\r\n        }\r\n        const crackedToken: DecodedAuthToken = {\r\n            header: matches[1],\r\n            JWSPayload: matches[2],\r\n            JWSSig: matches[3]\r\n        };\r\n        return crackedToken;\r\n    }\r\n\r\n    /**\r\n     * Check if a string is empty.\r\n     *\r\n     * @param str\r\n     */\r\n    static isEmpty(str?: string): boolean {\r\n        return (typeof str === \"undefined\" || !str || 0 === str.length);\r\n    }\r\n\r\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj \r\n     */\r\n    static isEmptyObj(strObj?: string): boolean {\r\n        if (strObj && !StringUtils.isEmpty(strObj)) {\r\n            try {\r\n                const obj = JSON.parse(strObj);\r\n                return Object.keys(obj).length === 0;\r\n            } catch (e) {}\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static startsWith(str: string, search: string): boolean {\r\n        return str.indexOf(search) === 0;\r\n    }\r\n\r\n    static endsWith(str: string, search: string): boolean {\r\n        return (str.length >= search.length) && (str.lastIndexOf(search) === (str.length - search.length));\r\n    }\r\n\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    static queryStringToObject<T>(query: string): T {\r\n        let match: Array<string> | null; // Regex for replacing addition symbol with a space\r\n        const pl = /\\+/g;\r\n        const search = /([^&=]+)=([^&]*)/g;\r\n        const decode = (s: string): string => decodeURIComponent(decodeURIComponent(s.replace(pl, \" \")));\r\n        const obj: {} = {};\r\n        match = search.exec(query);\r\n        while (match) {\r\n            obj[decode(match[1])] = decode(match[2]);\r\n            match = search.exec(query);\r\n        }\r\n        return obj as T;\r\n    }\r\n\r\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */\r\n    static trimArrayEntries(arr: Array<string>): Array<string> {\r\n        return arr.map(entry => entry.trim());\r\n    }\r\n\r\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */\r\n    static removeEmptyStringsFromArray(arr: Array<string>): Array<string> {\r\n        return arr.filter(entry => {\r\n            return !StringUtils.isEmpty(entry);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */\r\n    static jsonParseHelper<T>(str: string): T | null {\r\n        try {\r\n            return JSON.parse(str) as T;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */\r\n    static matchPattern(pattern: string, input: string): boolean {\r\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */\r\n        const regex: RegExp = new RegExp(pattern.replace(/\\*/g, \"[^ ]*\").replace(/\\?/g, \"\\\\\\?\"));\r\n\r\n        return regex.test(input);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}