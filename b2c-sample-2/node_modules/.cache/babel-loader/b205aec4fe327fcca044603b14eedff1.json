{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { CredentialType, CacheType, Constants as Constants$1, Separators } from '../../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../../error/ClientAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      oboAssertion: access token passed in as part of OBO request\r\n * }\r\n */\nvar CredentialEntity = /** @class */function () {\n  function CredentialEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n  CredentialEntity.prototype.generateAccountId = function () {\n    return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\n  };\n  /**\r\n   * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n   */\n  CredentialEntity.prototype.generateCredentialId = function () {\n    return CredentialEntity.generateCredentialIdForCacheKey(this.credentialType, this.clientId, this.realm, this.familyId);\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n  CredentialEntity.prototype.generateTarget = function () {\n    return CredentialEntity.generateTargetForCacheKey(this.target);\n  };\n  /**\r\n   * generates credential key\r\n   */\n  CredentialEntity.prototype.generateCredentialKey = function () {\n    return CredentialEntity.generateCredentialCacheKey(this.homeAccountId, this.environment, this.credentialType, this.clientId, this.realm, this.target, this.familyId);\n  };\n  /**\r\n   * returns the type of the cache (in this case credential)\r\n   */\n  CredentialEntity.prototype.generateType = function () {\n    switch (this.credentialType) {\n      case CredentialType.ID_TOKEN:\n        return CacheType.ID_TOKEN;\n      case CredentialType.ACCESS_TOKEN:\n        return CacheType.ACCESS_TOKEN;\n      case CredentialType.REFRESH_TOKEN:\n        return CacheType.REFRESH_TOKEN;\n      default:\n        {\n          throw ClientAuthError$1.createUnexpectedCredentialTypeError();\n        }\n    }\n  };\n  /**\r\n   * helper function to return `CredentialType`\r\n   * @param key\r\n   */\n  CredentialEntity.getCredentialType = function (key) {\n    // First keyword search will match all \"AccessToken\" and \"AccessToken_With_AuthScheme\" credentials\n    if (key.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {\n      // Perform second search to differentiate between \"AccessToken\" and \"AccessToken_With_AuthScheme\" credential types\n      if (key.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) !== -1) {\n        return CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n      }\n      return CredentialType.ACCESS_TOKEN;\n    } else if (key.indexOf(CredentialType.ID_TOKEN.toLowerCase()) !== -1) {\n      return CredentialType.ID_TOKEN;\n    } else if (key.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) {\n      return CredentialType.REFRESH_TOKEN;\n    }\n    return Constants$1.NOT_DEFINED;\n  };\n  /**\r\n   * generates credential key\r\n   */\n  CredentialEntity.generateCredentialCacheKey = function (homeAccountId, environment, credentialType, clientId, realm, target, familyId) {\n    var credentialKey = [this.generateAccountIdForCacheKey(homeAccountId, environment), this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId), this.generateTargetForCacheKey(target)];\n    return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * generates Account Id for keys\r\n   * @param homeAccountId\r\n   * @param environment\r\n   */\n  CredentialEntity.generateAccountIdForCacheKey = function (homeAccountId, environment) {\n    var accountId = [homeAccountId, environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generates Credential Id for keys\r\n   * @param credentialType\r\n   * @param realm\r\n   * @param clientId\r\n   * @param familyId\r\n   */\n  CredentialEntity.generateCredentialIdForCacheKey = function (credentialType, clientId, realm, familyId) {\n    var clientOrFamilyId = credentialType === CredentialType.REFRESH_TOKEN ? familyId || clientId : clientId;\n    var credentialId = [credentialType, clientOrFamilyId, realm || \"\"];\n    return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate target key component as per schema: <target>\r\n   */\n  CredentialEntity.generateTargetForCacheKey = function (scopes) {\n    return (scopes || \"\").toLowerCase();\n  };\n  return CredentialEntity;\n}();\nexport { CredentialEntity };","map":{"version":3,"mappings":"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","names":["CredentialEntity","generateAccountIdForCacheKey","homeAccountId","environment","generateCredentialIdForCacheKey","credentialType","clientId","realm","familyId","generateTargetForCacheKey","target","generateCredentialCacheKey","CredentialType","ID_TOKEN","CacheType","ACCESS_TOKEN","REFRESH_TOKEN","ClientAuthError","createUnexpectedCredentialTypeError","key","indexOf","toLowerCase","ACCESS_TOKEN_WITH_AUTH_SCHEME","Constants","NOT_DEFINED","credentialKey","join","Separators","CACHE_KEY_SEPARATOR","accountId","clientOrFamilyId","credentialId","scopes"],"sources":["../../../src/cache/entities/CredentialEntity.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Separators, CredentialType, CacheType, Constants } from \"../../utils/Constants\";\r\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\r\n\r\n/**\r\n * Base type for credentials to be stored in the cache: eg: ACCESS_TOKEN, ID_TOKEN etc\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key: <home_account_id*>-<environment>-<credential_type>-<client_id>-<realm*>-<target*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      familyId: Family ID identifier, usually only used for refresh tokens\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      target: Permissions that are included in the token, or for refresh tokens, the resource identifier.\r\n *      oboAssertion: access token passed in as part of OBO request\r\n * }\r\n */\r\nexport class CredentialEntity {\r\n    homeAccountId: string;\r\n    environment: string;\r\n    credentialType: CredentialType;\r\n    clientId: string;\r\n    secret: string;\r\n    familyId?: string;\r\n    realm?: string;\r\n    target?: string;\r\n    oboAssertion?: string;\r\n\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    generateAccountId(): string {\r\n        return CredentialEntity.generateAccountIdForCacheKey(this.homeAccountId, this.environment);\r\n    }\r\n\r\n    /**\r\n     * Generate Credential Id key component as per the schema: <credential_type>-<client_id>-<realm>\r\n     */\r\n    generateCredentialId(): string {\r\n        return CredentialEntity.generateCredentialIdForCacheKey(\r\n            this.credentialType,\r\n            this.clientId,\r\n            this.realm,\r\n            this.familyId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    generateTarget(): string {\r\n        return CredentialEntity.generateTargetForCacheKey(this.target);\r\n    }\r\n\r\n    /**\r\n     * generates credential key\r\n     */\r\n    generateCredentialKey(): string {\r\n        return CredentialEntity.generateCredentialCacheKey(\r\n            this.homeAccountId,\r\n            this.environment,\r\n            this.credentialType,\r\n            this.clientId,\r\n            this.realm,\r\n            this.target,\r\n            this.familyId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * returns the type of the cache (in this case credential)\r\n     */\r\n    generateType(): number {\r\n        switch (this.credentialType) {\r\n            case CredentialType.ID_TOKEN:\r\n                return CacheType.ID_TOKEN;\r\n            case CredentialType.ACCESS_TOKEN:\r\n                return CacheType.ACCESS_TOKEN;\r\n            case CredentialType.REFRESH_TOKEN:\r\n                return CacheType.REFRESH_TOKEN;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedCredentialTypeError();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * helper function to return `CredentialType`\r\n     * @param key\r\n     */\r\n    static getCredentialType(key: string): string {\r\n        // First keyword search will match all \"AccessToken\" and \"AccessToken_With_AuthScheme\" credentials\r\n        if (key.indexOf(CredentialType.ACCESS_TOKEN.toLowerCase()) !== -1) {\r\n            // Perform second search to differentiate between \"AccessToken\" and \"AccessToken_With_AuthScheme\" credential types\r\n            if (key.indexOf(CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase()) !== -1) {\r\n                return CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n            }\r\n            return CredentialType.ACCESS_TOKEN;\r\n        } else if (key.indexOf(CredentialType.ID_TOKEN.toLowerCase()) !== -1) {\r\n            return CredentialType.ID_TOKEN;\r\n        } else if (key.indexOf(CredentialType.REFRESH_TOKEN.toLowerCase()) !== -1) {\r\n            return CredentialType.REFRESH_TOKEN;\r\n        }\r\n\r\n        return Constants.NOT_DEFINED;\r\n    }\r\n\r\n    /**\r\n     * generates credential key\r\n     */\r\n    static generateCredentialCacheKey(\r\n        homeAccountId: string,\r\n        environment: string,\r\n        credentialType: CredentialType,\r\n        clientId: string,\r\n        realm?: string,\r\n        target?: string,\r\n        familyId?: string\r\n    ): string {\r\n        const credentialKey = [\r\n            this.generateAccountIdForCacheKey(homeAccountId, environment),\r\n            this.generateCredentialIdForCacheKey(credentialType, clientId, realm, familyId),\r\n            this.generateTargetForCacheKey(target),\r\n        ];\r\n\r\n        return credentialKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * generates Account Id for keys\r\n     * @param homeAccountId\r\n     * @param environment\r\n     */\r\n    private static generateAccountIdForCacheKey(\r\n        homeAccountId: string,\r\n        environment: string\r\n    ): string {\r\n        const accountId: Array<string> = [homeAccountId, environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generates Credential Id for keys\r\n     * @param credentialType\r\n     * @param realm\r\n     * @param clientId\r\n     * @param familyId\r\n     */\r\n    private static generateCredentialIdForCacheKey(\r\n        credentialType: CredentialType,\r\n        clientId: string,\r\n        realm?: string,\r\n        familyId?: string\r\n    ): string {\r\n        const clientOrFamilyId =\r\n            credentialType === CredentialType.REFRESH_TOKEN\r\n                ? familyId || clientId\r\n                : clientId;\r\n        const credentialId: Array<string> = [\r\n            credentialType,\r\n            clientOrFamilyId,\r\n            realm || \"\",\r\n        ];\r\n\r\n        return credentialId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate target key component as per schema: <target>\r\n     */\r\n    private static generateTargetForCacheKey(scopes?: string): string {\r\n        return (scopes || \"\").toLowerCase();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}