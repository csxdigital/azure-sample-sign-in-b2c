{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __spread } from '../_virtual/_tslib.js';\nimport { DEFAULT_CRYPTO_IMPLEMENTATION, AccountEntity, CacheManager, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, ServerTelemetryEntity, AuthorityMetadataEntity, PersistentCacheKeys, ThrottlingEntity, Constants, StringUtils, ProtocolUtils, CcsCredentialType } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { BrowserCacheLocation, TemporaryCacheKeys } from '../utils/BrowserConstants.js';\nimport { BrowserStorage } from './BrowserStorage.js';\nimport { MemoryStorage } from './MemoryStorage.js';\nimport { BrowserProtocolUtils } from '../utils/BrowserProtocolUtils.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage.\r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\r\n * parameters such as state and nonce, generally.\r\n */\nvar BrowserCacheManager = /** @class */function (_super) {\n  __extends(BrowserCacheManager, _super);\n  function BrowserCacheManager(clientId, cacheConfig, cryptoImpl, logger) {\n    var _this = _super.call(this, clientId, cryptoImpl) || this;\n    // Cookie life calculation (hours * minutes * seconds * ms)\n    _this.COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\n    _this.cacheConfig = cacheConfig;\n    _this.logger = logger;\n    _this.internalStorage = new MemoryStorage();\n    _this.browserStorage = _this.setupBrowserStorage(_this.cacheConfig.cacheLocation);\n    _this.temporaryCacheStorage = _this.setupTemporaryCacheStorage(_this.cacheConfig.cacheLocation);\n    // Migrate any cache entries from older versions of MSAL.\n    _this.migrateCacheEntries();\n    return _this;\n  }\n  /**\r\n   * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\r\n   * @param cacheLocation\r\n   */\n  BrowserCacheManager.prototype.setupBrowserStorage = function (cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n          return new BrowserStorage(cacheLocation);\n        } catch (e) {\n          this.logger.verbose(e);\n          break;\n        }\n    }\n    this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\n    return new MemoryStorage();\n  };\n  /**\r\n   *\r\n   * @param cacheLocation\r\n   */\n  BrowserCacheManager.prototype.setupTemporaryCacheStorage = function (cacheLocation) {\n    switch (cacheLocation) {\n      case BrowserCacheLocation.LocalStorage:\n      case BrowserCacheLocation.SessionStorage:\n        try {\n          // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\n          return new BrowserStorage(BrowserCacheLocation.SessionStorage);\n        } catch (e) {\n          this.logger.verbose(e);\n          return this.internalStorage;\n        }\n      case BrowserCacheLocation.MemoryStorage:\n      default:\n        return this.internalStorage;\n    }\n  };\n  /**\r\n   * Migrate all old cache entries to new schema. No rollback supported.\r\n   * @param storeAuthStateInCookie\r\n   */\n  BrowserCacheManager.prototype.migrateCacheEntries = function () {\n    var _this = this;\n    var idTokenKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ID_TOKEN;\n    var clientInfoKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.CLIENT_INFO;\n    var errorKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ERROR;\n    var errorDescKey = Constants.CACHE_PREFIX + \".\" + PersistentCacheKeys.ERROR_DESC;\n    var idTokenValue = this.browserStorage.getItem(idTokenKey);\n    var clientInfoValue = this.browserStorage.getItem(clientInfoKey);\n    var errorValue = this.browserStorage.getItem(errorKey);\n    var errorDescValue = this.browserStorage.getItem(errorDescKey);\n    var values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\n    var keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\n    keysToMigrate.forEach(function (cacheKey, index) {\n      return _this.migrateCacheEntry(cacheKey, values[index]);\n    });\n  };\n  /**\r\n   * Utility function to help with migration.\r\n   * @param newKey\r\n   * @param value\r\n   * @param storeAuthStateInCookie\r\n   */\n  BrowserCacheManager.prototype.migrateCacheEntry = function (newKey, value) {\n    if (value) {\n      this.setTemporaryCache(newKey, value, true);\n    }\n  };\n  /**\r\n   * Parses passed value as JSON object, JSON.parse() will throw an error.\r\n   * @param input\r\n   */\n  BrowserCacheManager.prototype.validateAndParseJson = function (jsonValue) {\n    try {\n      var parsedJson = JSON.parse(jsonValue);\n      /**\r\n       * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\r\n       * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\r\n       * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\r\n       *\r\n       */\n      return parsedJson && typeof parsedJson === \"object\" ? parsedJson : null;\n    } catch (error) {\n      return null;\n    }\n  };\n  /**\r\n   * fetches the entry from the browser storage based off the key\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.getItem = function (key) {\n    return this.browserStorage.getItem(key);\n  };\n  /**\r\n   * sets the entry in the browser storage\r\n   * @param key\r\n   * @param value\r\n   */\n  BrowserCacheManager.prototype.setItem = function (key, value) {\n    this.browserStorage.setItem(key, value);\n  };\n  /**\r\n   * fetch the account entity from the platform cache\r\n   * @param accountKey\r\n   */\n  BrowserCacheManager.prototype.getAccount = function (accountKey) {\n    var account = this.getItem(accountKey);\n    if (!account) {\n      return null;\n    }\n    var parsedAccount = this.validateAndParseJson(account);\n    if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\n      return null;\n    }\n    return CacheManager.toObject(new AccountEntity(), parsedAccount);\n  };\n  /**\r\n   * set account entity in the platform cache\r\n   * @param key\r\n   * @param value\r\n   */\n  BrowserCacheManager.prototype.setAccount = function (account) {\n    this.logger.trace(\"BrowserCacheManager.setAccount called\");\n    var key = account.generateAccountKey();\n    this.setItem(key, JSON.stringify(account));\n  };\n  /**\r\n   * generates idToken entity from a string\r\n   * @param idTokenKey\r\n   */\n  BrowserCacheManager.prototype.getIdTokenCredential = function (idTokenKey) {\n    var value = this.getItem(idTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      return null;\n    }\n    var parsedIdToken = this.validateAndParseJson(value);\n    if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {\n      this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\n    return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);\n  };\n  /**\r\n   * set IdToken credential to the platform cache\r\n   * @param idToken\r\n   */\n  BrowserCacheManager.prototype.setIdTokenCredential = function (idToken) {\n    this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\n    var idTokenKey = idToken.generateCredentialKey();\n    this.setItem(idTokenKey, JSON.stringify(idToken));\n  };\n  /**\r\n   * generates accessToken entity from a string\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.getAccessTokenCredential = function (accessTokenKey) {\n    var value = this.getItem(accessTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      return null;\n    }\n    var parsedAccessToken = this.validateAndParseJson(value);\n    if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {\n      this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\n    return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);\n  };\n  /**\r\n   * set accessToken credential to the platform cache\r\n   * @param accessToken\r\n   */\n  BrowserCacheManager.prototype.setAccessTokenCredential = function (accessToken) {\n    this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\n    var accessTokenKey = accessToken.generateCredentialKey();\n    this.setItem(accessTokenKey, JSON.stringify(accessToken));\n  };\n  /**\r\n   * generates refreshToken entity from a string\r\n   * @param refreshTokenKey\r\n   */\n  BrowserCacheManager.prototype.getRefreshTokenCredential = function (refreshTokenKey) {\n    var value = this.getItem(refreshTokenKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      return null;\n    }\n    var parsedRefreshToken = this.validateAndParseJson(value);\n    if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {\n      this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\n    return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);\n  };\n  /**\r\n   * set refreshToken credential to the platform cache\r\n   * @param refreshToken\r\n   */\n  BrowserCacheManager.prototype.setRefreshTokenCredential = function (refreshToken) {\n    this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\n    var refreshTokenKey = refreshToken.generateCredentialKey();\n    this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\n  };\n  /**\r\n   * fetch appMetadata entity from the platform cache\r\n   * @param appMetadataKey\r\n   */\n  BrowserCacheManager.prototype.getAppMetadata = function (appMetadataKey) {\n    var value = this.getItem(appMetadataKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n    var parsedMetadata = this.validateAndParseJson(value);\n    if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\n    return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);\n  };\n  /**\r\n   * set appMetadata entity to the platform cache\r\n   * @param appMetadata\r\n   */\n  BrowserCacheManager.prototype.setAppMetadata = function (appMetadata) {\n    this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\n    var appMetadataKey = appMetadata.generateAppMetadataKey();\n    this.setItem(appMetadataKey, JSON.stringify(appMetadata));\n  };\n  /**\r\n   * fetch server telemetry entity from the platform cache\r\n   * @param serverTelemetryKey\r\n   */\n  BrowserCacheManager.prototype.getServerTelemetry = function (serverTelemetryKey) {\n    var value = this.getItem(serverTelemetryKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n    var parsedMetadata = this.validateAndParseJson(value);\n    if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\n    return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);\n  };\n  /**\r\n   * set server telemetry entity to the platform cache\r\n   * @param serverTelemetryKey\r\n   * @param serverTelemetry\r\n   */\n  BrowserCacheManager.prototype.setServerTelemetry = function (serverTelemetryKey, serverTelemetry) {\n    this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\n    this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\n  };\n  /**\r\n   *\r\n   */\n  BrowserCacheManager.prototype.getAuthorityMetadata = function (key) {\n    var value = this.internalStorage.getItem(key);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\n      return null;\n    }\n    var parsedMetadata = this.validateAndParseJson(value);\n    if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {\n      this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\n      return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);\n    }\n    return null;\n  };\n  /**\r\n   *\r\n   */\n  BrowserCacheManager.prototype.getAuthorityMetadataKeys = function () {\n    var _this = this;\n    var allKeys = this.internalStorage.getKeys();\n    return allKeys.filter(function (key) {\n      return _this.isAuthorityMetadata(key);\n    });\n  };\n  /**\r\n   *\r\n   * @param entity\r\n   */\n  BrowserCacheManager.prototype.setAuthorityMetadata = function (key, entity) {\n    this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\n    this.internalStorage.setItem(key, JSON.stringify(entity));\n  };\n  /**\r\n   * Gets the active account\r\n   */\n  BrowserCacheManager.prototype.getActiveAccount = function () {\n    var activeAccountIdKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n    var activeAccountId = this.browserStorage.getItem(activeAccountIdKey);\n    if (!activeAccountId) {\n      return null;\n    }\n    return this.getAccountInfoByFilter({\n      localAccountId: activeAccountId\n    })[0] || null;\n  };\n  /**\r\n   * Sets the active account's localAccountId in cache\r\n   * @param account\r\n   */\n  BrowserCacheManager.prototype.setActiveAccount = function (account) {\n    var activeAccountIdKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\n    if (account) {\n      this.logger.verbose(\"setActiveAccount: Active account set\");\n      this.browserStorage.setItem(activeAccountIdKey, account.localAccountId);\n    } else {\n      this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\n      this.browserStorage.removeItem(activeAccountIdKey);\n    }\n  };\n  /**\r\n   * Gets a list of accounts that match all of the filters provided\r\n   * @param account\r\n   */\n  BrowserCacheManager.prototype.getAccountInfoByFilter = function (accountFilter) {\n    var allAccounts = this.getAllAccounts();\n    return allAccounts.filter(function (accountObj) {\n      if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n        return false;\n      }\n      if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {\n        return false;\n      }\n      if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {\n        return false;\n      }\n      if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {\n        return false;\n      }\n      if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {\n        return false;\n      }\n      return true;\n    });\n  };\n  /**\r\n   * fetch throttling entity from the platform cache\r\n   * @param throttlingCacheKey\r\n   */\n  BrowserCacheManager.prototype.getThrottlingCache = function (throttlingCacheKey) {\n    var value = this.getItem(throttlingCacheKey);\n    if (!value) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n    var parsedThrottlingCache = this.validateAndParseJson(value);\n    if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\n      this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\n    return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);\n  };\n  /**\r\n   * set throttling entity to the platform cache\r\n   * @param throttlingCacheKey\r\n   * @param throttlingCache\r\n   */\n  BrowserCacheManager.prototype.setThrottlingCache = function (throttlingCacheKey, throttlingCache) {\n    this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\n    this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\n  };\n  /**\r\n   * Gets cache item with given key.\r\n   * Will retrieve from cookies if storeAuthStateInCookie is set to true.\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.getTemporaryCache = function (cacheKey, generateKey) {\n    var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      var itemCookie = this.getItemCookie(key);\n      if (itemCookie) {\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\n        return itemCookie;\n      }\n    }\n    var value = this.temporaryCacheStorage.getItem(key);\n    if (!value) {\n      // If temp cache item not found in session/memory, check local storage for items set by old versions\n      if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\n        var item = this.browserStorage.getItem(key);\n        if (item) {\n          this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\n          return item;\n        }\n      }\n      this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\n      return null;\n    }\n    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\n    return value;\n  };\n  /**\r\n   * Sets the cache item with the key and value given.\r\n   * Stores in cookie if storeAuthStateInCookie is set to true.\r\n   * This can cause cookie overflow if used incorrectly.\r\n   * @param key\r\n   * @param value\r\n   */\n  BrowserCacheManager.prototype.setTemporaryCache = function (cacheKey, value, generateKey) {\n    var key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\n    this.temporaryCacheStorage.setItem(key, value);\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\n      this.setItemCookie(key, value);\n    }\n  };\n  /**\r\n   * Removes the cache item with the given key.\r\n   * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.removeItem = function (key) {\n    this.browserStorage.removeItem(key);\n    this.temporaryCacheStorage.removeItem(key);\n    if (this.cacheConfig.storeAuthStateInCookie) {\n      this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\n      this.clearItemCookie(key);\n    }\n    return true;\n  };\n  /**\r\n   * Checks whether key is in cache.\r\n   * @param key\r\n   */\n  BrowserCacheManager.prototype.containsKey = function (key) {\n    return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\n  };\n  /**\r\n   * Gets all keys in window.\r\n   */\n  BrowserCacheManager.prototype.getKeys = function () {\n    return __spread(this.browserStorage.getKeys(), this.temporaryCacheStorage.getKeys());\n  };\n  /**\r\n   * Clears all cache entries created by MSAL (except tokens).\r\n   */\n  BrowserCacheManager.prototype.clear = function () {\n    var _this = this;\n    this.removeAllAccounts();\n    this.removeAppMetadata();\n    this.getKeys().forEach(function (cacheKey) {\n      // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\n      if ((_this.browserStorage.containsKey(cacheKey) || _this.temporaryCacheStorage.containsKey(cacheKey)) && (cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1 || cacheKey.indexOf(_this.clientId) !== -1)) {\n        _this.removeItem(cacheKey);\n      }\n    });\n    this.internalStorage.clear();\n  };\n  /**\r\n   * Add value to cookies\r\n   * @param cookieName\r\n   * @param cookieValue\r\n   * @param expires\r\n   */\n  BrowserCacheManager.prototype.setItemCookie = function (cookieName, cookieValue, expires) {\n    var cookieStr = encodeURIComponent(cookieName) + \"=\" + encodeURIComponent(cookieValue) + \";path=/;\";\n    if (expires) {\n      var expireTime = this.getCookieExpirationTime(expires);\n      cookieStr += \"expires=\" + expireTime + \";\";\n    }\n    if (this.cacheConfig.secureCookies) {\n      cookieStr += \"Secure;\";\n    }\n    document.cookie = cookieStr;\n  };\n  /**\r\n   * Get one item by key from cookies\r\n   * @param cookieName\r\n   */\n  BrowserCacheManager.prototype.getItemCookie = function (cookieName) {\n    var name = encodeURIComponent(cookieName) + \"=\";\n    var cookieList = document.cookie.split(\";\");\n    for (var i = 0; i < cookieList.length; i++) {\n      var cookie = cookieList[i];\n      while (cookie.charAt(0) === \" \") {\n        cookie = cookie.substring(1);\n      }\n      if (cookie.indexOf(name) === 0) {\n        return decodeURIComponent(cookie.substring(name.length, cookie.length));\n      }\n    }\n    return \"\";\n  };\n  /**\r\n   * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\r\n   */\n  BrowserCacheManager.prototype.clearMsalCookies = function () {\n    var _this = this;\n    var cookiePrefix = Constants.CACHE_PREFIX + \".\" + this.clientId;\n    var cookieList = document.cookie.split(\";\");\n    cookieList.forEach(function (cookie) {\n      while (cookie.charAt(0) === \" \") {\n        // eslint-disable-next-line no-param-reassign\n        cookie = cookie.substring(1);\n      }\n      if (cookie.indexOf(cookiePrefix) === 0) {\n        var cookieKey = cookie.split(\"=\")[0];\n        _this.clearItemCookie(cookieKey);\n      }\n    });\n  };\n  /**\r\n   * Clear an item in the cookies by key\r\n   * @param cookieName\r\n   */\n  BrowserCacheManager.prototype.clearItemCookie = function (cookieName) {\n    this.setItemCookie(cookieName, \"\", -1);\n  };\n  /**\r\n   * Get cookie expiration time\r\n   * @param cookieLifeDays\r\n   */\n  BrowserCacheManager.prototype.getCookieExpirationTime = function (cookieLifeDays) {\n    var today = new Date();\n    var expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\n    return expr.toUTCString();\n  };\n  /**\r\n   * Gets the cache object referenced by the browser\r\n   */\n  BrowserCacheManager.prototype.getCache = function () {\n    return this.browserStorage;\n  };\n  /**\r\n   * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\r\n   */\n  BrowserCacheManager.prototype.setCache = function () {\n    // sets nothing\n  };\n  /**\r\n   * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n   * @param key\r\n   * @param addInstanceId\r\n   */\n  BrowserCacheManager.prototype.generateCacheKey = function (key) {\n    var generatedKey = this.validateAndParseJson(key);\n    if (!generatedKey) {\n      if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\n        return key;\n      }\n      return Constants.CACHE_PREFIX + \".\" + this.clientId + \".\" + key;\n    }\n    return JSON.stringify(key);\n  };\n  /**\r\n   * Create authorityKey to cache authority\r\n   * @param state\r\n   */\n  BrowserCacheManager.prototype.generateAuthorityKey = function (stateString) {\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.AUTHORITY + \".\" + stateId);\n  };\n  /**\r\n   * Create Nonce key to cache nonce\r\n   * @param state\r\n   */\n  BrowserCacheManager.prototype.generateNonceKey = function (stateString) {\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.NONCE_IDTOKEN + \".\" + stateId);\n  };\n  /**\r\n   * Creates full cache key for the request state\r\n   * @param stateString State string for the request\r\n   */\n  BrowserCacheManager.prototype.generateStateKey = function (stateString) {\n    // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\n    var stateId = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString).libraryState.id;\n    return this.generateCacheKey(TemporaryCacheKeys.REQUEST_STATE + \".\" + stateId);\n  };\n  /**\r\n   * Gets the cached authority based on the cached state. Returns empty if no cached state found.\r\n   */\n  BrowserCacheManager.prototype.getCachedAuthority = function (cachedState) {\n    var stateCacheKey = this.generateStateKey(cachedState);\n    var state = this.getTemporaryCache(stateCacheKey);\n    if (!state) {\n      return null;\n    }\n    var authorityCacheKey = this.generateAuthorityKey(state);\n    return this.getTemporaryCache(authorityCacheKey);\n  };\n  /**\r\n   * Updates account, authority, and state in cache\r\n   * @param serverAuthenticationRequest\r\n   * @param account\r\n   */\n  BrowserCacheManager.prototype.updateCacheEntries = function (state, nonce, authorityInstance, loginHint, account) {\n    this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\n    // Cache the request state\n    var stateCacheKey = this.generateStateKey(state);\n    this.setTemporaryCache(stateCacheKey, state, false);\n    // Cache the nonce\n    var nonceCacheKey = this.generateNonceKey(state);\n    this.setTemporaryCache(nonceCacheKey, nonce, false);\n    // Cache authorityKey\n    var authorityCacheKey = this.generateAuthorityKey(state);\n    this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\n    if (account) {\n      var ccsCredential = {\n        credential: account.homeAccountId,\n        type: CcsCredentialType.HOME_ACCOUNT_ID\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    } else if (!StringUtils.isEmpty(loginHint)) {\n      var ccsCredential = {\n        credential: loginHint,\n        type: CcsCredentialType.UPN\n      };\n      this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\n    }\n  };\n  /**\r\n   * Reset all temporary cache items\r\n   * @param state\r\n   */\n  BrowserCacheManager.prototype.resetRequestCache = function (state) {\n    var _this = this;\n    this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\n    // check state and remove associated cache items\n    if (!StringUtils.isEmpty(state)) {\n      this.getKeys().forEach(function (key) {\n        if (key.indexOf(state) !== -1) {\n          _this.removeItem(key);\n        }\n      });\n    }\n    // delete generic interactive request parameters\n    if (state) {\n      this.removeItem(this.generateStateKey(state));\n      this.removeItem(this.generateNonceKey(state));\n      this.removeItem(this.generateAuthorityKey(state));\n    }\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\n  };\n  /**\r\n   * Removes temporary cache for the provided state\r\n   * @param stateString\r\n   */\n  BrowserCacheManager.prototype.cleanRequestByState = function (stateString) {\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\n    // Interaction is completed - remove interaction status.\n    if (stateString) {\n      var stateKey = this.generateStateKey(stateString);\n      var cachedState = this.temporaryCacheStorage.getItem(stateKey);\n      this.logger.infoPii(\"BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: \" + cachedState);\n      this.resetRequestCache(cachedState || \"\");\n    }\n    this.clearMsalCookies();\n  };\n  /**\r\n   * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\r\n   * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\r\n   * @param interactionType\r\n   */\n  BrowserCacheManager.prototype.cleanRequestByInteractionType = function (interactionType) {\n    var _this = this;\n    this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\n    // Loop through all keys to find state key\n    this.getKeys().forEach(function (key) {\n      // If this key is not the state key, move on\n      if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\n        return;\n      }\n      // Retrieve state value, return if not a valid value\n      var stateValue = _this.temporaryCacheStorage.getItem(key);\n      if (!stateValue) {\n        return;\n      }\n      // Extract state and ensure it matches given InteractionType, then clean request cache\n      var parsedState = BrowserProtocolUtils.extractBrowserRequestState(_this.cryptoImpl, stateValue);\n      if (parsedState && parsedState.interactionType === interactionType) {\n        _this.logger.infoPii(\"BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: \" + stateValue);\n        _this.resetRequestCache(stateValue);\n      }\n    });\n    this.clearMsalCookies();\n  };\n  BrowserCacheManager.prototype.cacheCodeRequest = function (authCodeRequest, browserCrypto) {\n    this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\n    var encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));\n    this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\n  };\n  /**\r\n   * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n   */\n  BrowserCacheManager.prototype.getCachedRequest = function (state, browserCrypto) {\n    this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\n    // Get token request from cache and parse as TokenExchangeParameters.\n    var encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\n    if (!encodedTokenRequest) {\n      throw BrowserAuthError.createNoTokenRequestCacheError();\n    }\n    var parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest));\n    if (!parsedRequest) {\n      throw BrowserAuthError.createUnableToParseTokenRequestCacheError();\n    }\n    this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\n    // Get cached authority and use if no authority is cached with request.\n    if (StringUtils.isEmpty(parsedRequest.authority)) {\n      var authorityCacheKey = this.generateAuthorityKey(state);\n      var cachedAuthority = this.getTemporaryCache(authorityCacheKey);\n      if (!cachedAuthority) {\n        throw BrowserAuthError.createNoCachedAuthorityError();\n      }\n      parsedRequest.authority = cachedAuthority;\n    }\n    return parsedRequest;\n  };\n  return BrowserCacheManager;\n}(CacheManager);\nvar DEFAULT_BROWSER_CACHE_MANAGER = function (clientId, logger) {\n  var cacheOptions = {\n    cacheLocation: BrowserCacheLocation.MemoryStorage,\n    storeAuthStateInCookie: false,\n    secureCookies: false\n  };\n  return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\n};\nexport { BrowserCacheManager, DEFAULT_BROWSER_CACHE_MANAGER };","map":{"version":3,"mappings":"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","names":["__extends","clientId","cacheConfig","cryptoImpl","logger","_super","_this","internalStorage","MemoryStorage","browserStorage","setupBrowserStorage","cacheLocation","temporaryCacheStorage","setupTemporaryCacheStorage","migrateCacheEntries","BrowserCacheManager","BrowserCacheLocation","LocalStorage","SessionStorage","BrowserStorage","e","verbose","idTokenKey","Constants","CACHE_PREFIX","PersistentCacheKeys","ID_TOKEN","clientInfoKey","CLIENT_INFO","errorKey","ERROR","errorDescKey","ERROR_DESC","idTokenValue","getItem","clientInfoValue","errorValue","errorDescValue","values","keysToMigrate","forEach","cacheKey","index","migrateCacheEntry","newKey","value","setTemporaryCache","jsonValue","parsedJson","JSON","parse","error","key","setItem","accountKey","account","parsedAccount","validateAndParseJson","AccountEntity","isAccountEntity","CacheManager","toObject","trace","generateAccountKey","stringify","parsedIdToken","IdTokenEntity","isIdTokenEntity","idToken","generateCredentialKey","accessTokenKey","parsedAccessToken","AccessTokenEntity","isAccessTokenEntity","accessToken","refreshTokenKey","parsedRefreshToken","RefreshTokenEntity","isRefreshTokenEntity","refreshToken","appMetadataKey","parsedMetadata","AppMetadataEntity","isAppMetadataEntity","appMetadata","generateAppMetadataKey","serverTelemetryKey","ServerTelemetryEntity","isServerTelemetryEntity","serverTelemetry","AuthorityMetadataEntity","isAuthorityMetadataEntity","allKeys","getKeys","filter","isAuthorityMetadata","entity","activeAccountIdKey","generateCacheKey","ACTIVE_ACCOUNT","activeAccountId","getAccountInfoByFilter","localAccountId","removeItem","accountFilter","allAccounts","getAllAccounts","accountObj","username","toLowerCase","homeAccountId","tenantId","environment","throttlingCacheKey","parsedThrottlingCache","ThrottlingEntity","isThrottlingEntity","throttlingCache","generateKey","storeAuthStateInCookie","itemCookie","getItemCookie","item","setItemCookie","clearItemCookie","containsKey","removeAllAccounts","removeAppMetadata","indexOf","clear","cookieName","cookieValue","expires","cookieStr","encodeURIComponent","expireTime","getCookieExpirationTime","secureCookies","document","cookie","name","cookieList","split","i","length","charAt","substring","decodeURIComponent","cookiePrefix","cookieKey","cookieLifeDays","today","Date","expr","getTime","COOKIE_LIFE_MULTIPLIER","toUTCString","generatedKey","StringUtils","startsWith","ADAL_ID_TOKEN","stateString","TemporaryCacheKeys","AUTHORITY","stateId","NONCE_IDTOKEN","REQUEST_STATE","cachedState","stateCacheKey","generateStateKey","state","getTemporaryCache","authorityCacheKey","generateAuthorityKey","nonce","authorityInstance","loginHint","nonceCacheKey","generateNonceKey","ccsCredential","credential","type","CcsCredentialType","HOME_ACCOUNT_ID","CCS_CREDENTIAL","isEmpty","UPN","REQUEST_PARAMS","ORIGIN_URI","URL_HASH","INTERACTION_STATUS_KEY","stateKey","infoPii","resetRequestCache","clearMsalCookies","interactionType","stateValue","parsedState","BrowserProtocolUtils","extractBrowserRequestState","authCodeRequest","browserCrypto","encodedValue","base64Encode","encodedTokenRequest","BrowserAuthError","createNoTokenRequestCacheError","parsedRequest","base64Decode","createUnableToParseTokenRequestCacheError","authority","cachedAuthority","createNoCachedAuthorityError","DEFAULT_BROWSER_CACHE_MANAGER","cacheOptions","DEFAULT_CRYPTO_IMPLEMENTATION"],"sources":["../../src/cache/BrowserCacheManager.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Constants, PersistentCacheKeys, StringUtils, CommonAuthorizationCodeRequest, ICrypto, AccountEntity, IdTokenEntity, AccessTokenEntity, RefreshTokenEntity, AppMetadataEntity, CacheManager, ServerTelemetryEntity, ThrottlingEntity, ProtocolUtils, Logger, AuthorityMetadataEntity, DEFAULT_CRYPTO_IMPLEMENTATION, AccountInfo, CcsCredential, CcsCredentialType } from \"@azure/msal-common\";\r\nimport { CacheOptions } from \"../config/Configuration\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { BrowserCacheLocation, InteractionType, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\nimport { BrowserStorage } from \"./BrowserStorage\";\r\nimport { MemoryStorage } from \"./MemoryStorage\";\r\nimport { IWindowStorage } from \"./IWindowStorage\";\r\nimport { BrowserProtocolUtils } from \"../utils/BrowserProtocolUtils\";\r\n\r\n/**\r\n * This class implements the cache storage interface for MSAL through browser local or session storage.\r\n * Cookies are only used if storeAuthStateInCookie is true, and are only used for\r\n * parameters such as state and nonce, generally.\r\n */\r\nexport class BrowserCacheManager extends CacheManager {\r\n\r\n    // Cache configuration, either set by user or default values.\r\n    private cacheConfig: Required<CacheOptions>;\r\n    // Window storage object (either local or sessionStorage)\r\n    private browserStorage: IWindowStorage;\r\n    // Internal in-memory storage object used for data used by msal that does not need to persist across page loads\r\n    private internalStorage: MemoryStorage;\r\n    // Temporary cache\r\n    private temporaryCacheStorage: IWindowStorage;\r\n    // Client id of application. Used in cache keys to partition cache correctly in the case of multiple instances of MSAL.\r\n    private logger: Logger;\r\n\r\n    // Cookie life calculation (hours * minutes * seconds * ms)\r\n    private readonly COOKIE_LIFE_MULTIPLIER = 24 * 60 * 60 * 1000;\r\n\r\n    constructor(clientId: string, cacheConfig: Required<CacheOptions>, cryptoImpl: ICrypto, logger: Logger) {\r\n        super(clientId, cryptoImpl);\r\n\r\n        this.cacheConfig = cacheConfig;\r\n        this.logger = logger;\r\n\r\n        this.internalStorage = new MemoryStorage();\r\n        this.browserStorage = this.setupBrowserStorage(this.cacheConfig.cacheLocation);\r\n        this.temporaryCacheStorage = this.setupTemporaryCacheStorage(this.cacheConfig.cacheLocation);\r\n\r\n        // Migrate any cache entries from older versions of MSAL.\r\n        this.migrateCacheEntries();\r\n    }\r\n\r\n    /**\r\n     * Returns a window storage class implementing the IWindowStorage interface that corresponds to the configured cacheLocation.\r\n     * @param cacheLocation\r\n     */\r\n    private setupBrowserStorage(cacheLocation: BrowserCacheLocation | string): IWindowStorage {\r\n        switch (cacheLocation) {\r\n            case BrowserCacheLocation.LocalStorage:\r\n            case BrowserCacheLocation.SessionStorage:\r\n                try {\r\n                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\r\n                    return new BrowserStorage(cacheLocation);\r\n                } catch (e) {\r\n                    this.logger.verbose(e);\r\n                    break;\r\n                }\r\n            case BrowserCacheLocation.MemoryStorage:\r\n            default:\r\n                break;\r\n        }\r\n        this.cacheConfig.cacheLocation = BrowserCacheLocation.MemoryStorage;\r\n        return new MemoryStorage();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param cacheLocation\r\n     */\r\n    private setupTemporaryCacheStorage(cacheLocation: BrowserCacheLocation | string): IWindowStorage {\r\n        switch (cacheLocation) {\r\n            case BrowserCacheLocation.LocalStorage:\r\n            case BrowserCacheLocation.SessionStorage:\r\n                try {\r\n                    // Temporary cache items will always be stored in session storage to mitigate problems caused by multiple tabs\r\n                    return new BrowserStorage(BrowserCacheLocation.SessionStorage);\r\n                } catch (e) {\r\n                    this.logger.verbose(e);\r\n                    return this.internalStorage;\r\n                }\r\n            case BrowserCacheLocation.MemoryStorage:\r\n            default:\r\n                return this.internalStorage;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate all old cache entries to new schema. No rollback supported.\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    private migrateCacheEntries(): void {\r\n        const idTokenKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ID_TOKEN}`;\r\n        const clientInfoKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.CLIENT_INFO}`;\r\n        const errorKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR}`;\r\n        const errorDescKey = `${Constants.CACHE_PREFIX}.${PersistentCacheKeys.ERROR_DESC}`;\r\n\r\n        const idTokenValue = this.browserStorage.getItem(idTokenKey);\r\n        const clientInfoValue = this.browserStorage.getItem(clientInfoKey);\r\n        const errorValue = this.browserStorage.getItem(errorKey);\r\n        const errorDescValue = this.browserStorage.getItem(errorDescKey);\r\n\r\n        const values = [idTokenValue, clientInfoValue, errorValue, errorDescValue];\r\n        const keysToMigrate = [PersistentCacheKeys.ID_TOKEN, PersistentCacheKeys.CLIENT_INFO, PersistentCacheKeys.ERROR, PersistentCacheKeys.ERROR_DESC];\r\n\r\n        keysToMigrate.forEach((cacheKey:string, index: number) => this.migrateCacheEntry(cacheKey, values[index]));\r\n    }\r\n\r\n    /**\r\n     * Utility function to help with migration.\r\n     * @param newKey\r\n     * @param value\r\n     * @param storeAuthStateInCookie\r\n     */\r\n    private migrateCacheEntry(newKey: string, value: string|null): void {\r\n        if (value) {\r\n            this.setTemporaryCache(newKey, value, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses passed value as JSON object, JSON.parse() will throw an error.\r\n     * @param input\r\n     */\r\n    private validateAndParseJson(jsonValue: string): object | null {\r\n        try {\r\n            const parsedJson = JSON.parse(jsonValue);\r\n            /**\r\n             * There are edge cases in which JSON.parse will successfully parse a non-valid JSON object\r\n             * (e.g. JSON.parse will parse an escaped string into an unescaped string), so adding a type check\r\n             * of the parsed value is necessary in order to be certain that the string represents a valid JSON object.\r\n             *\r\n             */\r\n            return (parsedJson && typeof parsedJson === \"object\") ? parsedJson : null;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * fetches the entry from the browser storage based off the key\r\n     * @param key\r\n     */\r\n    getItem(key: string): string | null {\r\n        return this.browserStorage.getItem(key);\r\n    }\r\n\r\n    /**\r\n     * sets the entry in the browser storage\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setItem(key: string, value: string): void {\r\n        this.browserStorage.setItem(key, value);\r\n    }\r\n\r\n    /**\r\n     * fetch the account entity from the platform cache\r\n     * @param accountKey\r\n     */\r\n    getAccount(accountKey: string): AccountEntity | null {\r\n        const account = this.getItem(accountKey);\r\n        if (!account) {\r\n            return null;\r\n        }\r\n\r\n        const parsedAccount = this.validateAndParseJson(account);\r\n        if (!parsedAccount || !AccountEntity.isAccountEntity(parsedAccount)) {\r\n            return null;\r\n        }\r\n\r\n        return CacheManager.toObject<AccountEntity>(new AccountEntity(), parsedAccount);\r\n    }\r\n\r\n    /**\r\n     * set account entity in the platform cache\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setAccount(account: AccountEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setAccount called\");\r\n        const key = account.generateAccountKey();\r\n        this.setItem(key, JSON.stringify(account));\r\n    }\r\n\r\n    /**\r\n     * generates idToken entity from a string\r\n     * @param idTokenKey\r\n     */\r\n    getIdTokenCredential(idTokenKey: string): IdTokenEntity | null {\r\n        const value = this.getItem(idTokenKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        const parsedIdToken = this.validateAndParseJson(value);\r\n        if (!parsedIdToken || !IdTokenEntity.isIdTokenEntity(parsedIdToken)) {\r\n            this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getIdTokenCredential: cache hit\");\r\n        return CacheManager.toObject(new IdTokenEntity(), parsedIdToken);\r\n    }\r\n\r\n    /**\r\n     * set IdToken credential to the platform cache\r\n     * @param idToken\r\n     */\r\n    setIdTokenCredential(idToken: IdTokenEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setIdTokenCredential called\");\r\n        const idTokenKey = idToken.generateCredentialKey();\r\n        this.setItem(idTokenKey, JSON.stringify(idToken));\r\n    }\r\n\r\n    /**\r\n     * generates accessToken entity from a string\r\n     * @param key\r\n     */\r\n    getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null {\r\n        const value = this.getItem(accessTokenKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\r\n            return null;\r\n        }\r\n        const parsedAccessToken = this.validateAndParseJson(value);\r\n        if (!parsedAccessToken || !AccessTokenEntity.isAccessTokenEntity(parsedAccessToken)) {\r\n            this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getAccessTokenCredential: cache hit\");\r\n        return CacheManager.toObject(new AccessTokenEntity(), parsedAccessToken);\r\n    }\r\n\r\n    /**\r\n     * set accessToken credential to the platform cache\r\n     * @param accessToken\r\n     */\r\n    setAccessTokenCredential(accessToken: AccessTokenEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setAccessTokenCredential called\");\r\n        const accessTokenKey = accessToken.generateCredentialKey();\r\n        this.setItem(accessTokenKey, JSON.stringify(accessToken));\r\n    }\r\n\r\n    /**\r\n     * generates refreshToken entity from a string\r\n     * @param refreshTokenKey\r\n     */\r\n    getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null {\r\n        const value = this.getItem(refreshTokenKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\r\n            return null;\r\n        }\r\n        const parsedRefreshToken = this.validateAndParseJson(value);\r\n        if (!parsedRefreshToken || !RefreshTokenEntity.isRefreshTokenEntity(parsedRefreshToken)) {\r\n            this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getRefreshTokenCredential: cache hit\");\r\n        return CacheManager.toObject(new RefreshTokenEntity(), parsedRefreshToken);\r\n    }\r\n\r\n    /**\r\n     * set refreshToken credential to the platform cache\r\n     * @param refreshToken\r\n     */\r\n    setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setRefreshTokenCredential called\");\r\n        const refreshTokenKey = refreshToken.generateCredentialKey();\r\n        this.setItem(refreshTokenKey, JSON.stringify(refreshToken));\r\n    }\r\n\r\n    /**\r\n     * fetch appMetadata entity from the platform cache\r\n     * @param appMetadataKey\r\n     */\r\n    getAppMetadata(appMetadataKey: string): AppMetadataEntity | null {\r\n        const value = this.getItem(appMetadataKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        const parsedMetadata = this.validateAndParseJson(value);\r\n        if (!parsedMetadata || !AppMetadataEntity.isAppMetadataEntity(appMetadataKey, parsedMetadata)) {\r\n            this.logger.trace(\"BrowserCacheManager.getAppMetadata: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getAppMetadata: cache hit\");\r\n        return CacheManager.toObject(new AppMetadataEntity(), parsedMetadata);\r\n    }\r\n\r\n    /**\r\n     * set appMetadata entity to the platform cache\r\n     * @param appMetadata\r\n     */\r\n    setAppMetadata(appMetadata: AppMetadataEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setAppMetadata called\");\r\n        const appMetadataKey = appMetadata.generateAppMetadataKey();\r\n        this.setItem(appMetadataKey, JSON.stringify(appMetadata));\r\n    }\r\n\r\n    /**\r\n     * fetch server telemetry entity from the platform cache\r\n     * @param serverTelemetryKey\r\n     */\r\n    getServerTelemetry(serverTelemetryKey: string): ServerTelemetryEntity | null {\r\n        const value = this.getItem(serverTelemetryKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\r\n            return null;\r\n        }\r\n        const parsedMetadata = this.validateAndParseJson(value);\r\n        if (!parsedMetadata || !ServerTelemetryEntity.isServerTelemetryEntity(serverTelemetryKey, parsedMetadata)) {\r\n            this.logger.trace(\"BrowserCacheManager.getServerTelemetry: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getServerTelemetry: cache hit\");\r\n        return CacheManager.toObject(new ServerTelemetryEntity(), parsedMetadata);\r\n    }\r\n\r\n    /**\r\n     * set server telemetry entity to the platform cache\r\n     * @param serverTelemetryKey\r\n     * @param serverTelemetry\r\n     */\r\n    setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setServerTelemetry called\");\r\n        this.setItem(serverTelemetryKey, JSON.stringify(serverTelemetry));\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getAuthorityMetadata(key: string) : AuthorityMetadataEntity | null {\r\n        const value = this.internalStorage.getItem(key);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: called, no cache hit\");\r\n            return null;\r\n        }\r\n        const parsedMetadata = this.validateAndParseJson(value);\r\n        if (parsedMetadata && AuthorityMetadataEntity.isAuthorityMetadataEntity(key, parsedMetadata)) {\r\n            this.logger.trace(\"BrowserCacheManager.getAuthorityMetadata: cache hit\");\r\n            return CacheManager.toObject(new AuthorityMetadataEntity(), parsedMetadata);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getAuthorityMetadataKeys(): Array<string> {\r\n        const allKeys = this.internalStorage.getKeys();\r\n        return allKeys.filter((key) => {\r\n            return this.isAuthorityMetadata(key);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param entity\r\n     */\r\n    setAuthorityMetadata(key: string, entity: AuthorityMetadataEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setAuthorityMetadata called\");\r\n        this.internalStorage.setItem(key, JSON.stringify(entity));\r\n    }\r\n\r\n    /**\r\n     * Gets the active account\r\n     */\r\n    getActiveAccount(): AccountInfo | null {\r\n        const activeAccountIdKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\r\n        const activeAccountId = this.browserStorage.getItem(activeAccountIdKey);\r\n        if (!activeAccountId) {\r\n            return null;\r\n        }\r\n        return this.getAccountInfoByFilter({localAccountId: activeAccountId})[0] || null;\r\n    }\r\n\r\n    /**\r\n     * Sets the active account's localAccountId in cache\r\n     * @param account \r\n     */\r\n    setActiveAccount(account: AccountInfo | null): void {\r\n        const activeAccountIdKey = this.generateCacheKey(PersistentCacheKeys.ACTIVE_ACCOUNT);\r\n        if (account) {\r\n            this.logger.verbose(\"setActiveAccount: Active account set\");\r\n            this.browserStorage.setItem(activeAccountIdKey, account.localAccountId);\r\n        } else {\r\n            this.logger.verbose(\"setActiveAccount: No account passed, active account not set\");\r\n            this.browserStorage.removeItem(activeAccountIdKey);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets a list of accounts that match all of the filters provided\r\n     * @param account \r\n     */\r\n    getAccountInfoByFilter(accountFilter: Partial<Omit<AccountInfo, \"idTokenClaims\"|\"name\">>): AccountInfo[] {\r\n        const allAccounts = this.getAllAccounts();\r\n        return allAccounts.filter((accountObj) => {\r\n            if (accountFilter.username && accountFilter.username.toLowerCase() !== accountObj.username.toLowerCase()) {\r\n                return false;\r\n            }\r\n\r\n            if (accountFilter.homeAccountId && accountFilter.homeAccountId !== accountObj.homeAccountId) {\r\n                return false;\r\n            }\r\n\r\n            if (accountFilter.localAccountId && accountFilter.localAccountId !== accountObj.localAccountId) {\r\n                return false;\r\n            }\r\n\r\n            if (accountFilter.tenantId && accountFilter.tenantId !== accountObj.tenantId) {\r\n                return false;\r\n            }\r\n\r\n            if (accountFilter.environment && accountFilter.environment !== accountObj.environment) {\r\n                return false;\r\n            }\r\n            \r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * fetch throttling entity from the platform cache\r\n     * @param throttlingCacheKey\r\n     */\r\n    getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null {\r\n        const value = this.getItem(throttlingCacheKey);\r\n        if (!value) {\r\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        const parsedThrottlingCache = this.validateAndParseJson(value);\r\n        if (!parsedThrottlingCache || !ThrottlingEntity.isThrottlingEntity(throttlingCacheKey, parsedThrottlingCache)) {\r\n            this.logger.trace(\"BrowserCacheManager.getThrottlingCache: called, no cache hit\");\r\n            return null;\r\n        }\r\n\r\n        this.logger.trace(\"BrowserCacheManager.getThrottlingCache: cache hit\");\r\n        return CacheManager.toObject(new ThrottlingEntity(), parsedThrottlingCache);\r\n    }\r\n\r\n    /**\r\n     * set throttling entity to the platform cache\r\n     * @param throttlingCacheKey\r\n     * @param throttlingCache\r\n     */\r\n    setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void {\r\n        this.logger.trace(\"BrowserCacheManager.setThrottlingCache called\");\r\n        this.setItem(throttlingCacheKey, JSON.stringify(throttlingCache));\r\n    }\r\n\r\n    /**\r\n     * Gets cache item with given key.\r\n     * Will retrieve from cookies if storeAuthStateInCookie is set to true.\r\n     * @param key\r\n     */\r\n    getTemporaryCache(cacheKey: string, generateKey?: boolean): string | null {\r\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            const itemCookie = this.getItemCookie(key);\r\n            if (itemCookie) {\r\n                this.logger.trace(\"BrowserCacheManager.getTemporaryCache: storeAuthStateInCookies set to true, retrieving from cookies\");\r\n                return itemCookie;\r\n            }\r\n        }\r\n\r\n        const value = this.temporaryCacheStorage.getItem(key);\r\n        if (!value) {\r\n            // If temp cache item not found in session/memory, check local storage for items set by old versions\r\n            if (this.cacheConfig.cacheLocation === BrowserCacheLocation.LocalStorage) {\r\n                const item = this.browserStorage.getItem(key);\r\n                if (item) {\r\n                    this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item found in local storage\");\r\n                    return item;\r\n                }\r\n            }\r\n            this.logger.trace(\"BrowserCacheManager.getTemporaryCache: No cache item found in local storage\");\r\n            return null;\r\n        }\r\n        this.logger.trace(\"BrowserCacheManager.getTemporaryCache: Temporary cache item returned\");\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Sets the cache item with the key and value given.\r\n     * Stores in cookie if storeAuthStateInCookie is set to true.\r\n     * This can cause cookie overflow if used incorrectly.\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setTemporaryCache(cacheKey: string, value: string, generateKey?: boolean): void {\r\n        const key = generateKey ? this.generateCacheKey(cacheKey) : cacheKey;\r\n\r\n        this.temporaryCacheStorage.setItem(key, value);\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            this.logger.trace(\"BrowserCacheManager.setTemporaryCache: storeAuthStateInCookie set to true, setting item cookie\");\r\n            this.setItemCookie(key, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes the cache item with the given key.\r\n     * Will also clear the cookie item if storeAuthStateInCookie is set to true.\r\n     * @param key\r\n     */\r\n    removeItem(key: string): boolean {\r\n        this.browserStorage.removeItem(key);\r\n        this.temporaryCacheStorage.removeItem(key);\r\n        if (this.cacheConfig.storeAuthStateInCookie) {\r\n            this.logger.trace(\"BrowserCacheManager.removeItem: storeAuthStateInCookie is true, clearing item cookie\");\r\n            this.clearItemCookie(key);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks whether key is in cache.\r\n     * @param key\r\n     */\r\n    containsKey(key: string): boolean {\r\n        return this.browserStorage.containsKey(key) || this.temporaryCacheStorage.containsKey(key);\r\n    }\r\n\r\n    /**\r\n     * Gets all keys in window.\r\n     */\r\n    getKeys(): string[] {\r\n        return [\r\n            ...this.browserStorage.getKeys(),\r\n            ...this.temporaryCacheStorage.getKeys()\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Clears all cache entries created by MSAL (except tokens).\r\n     */\r\n    clear(): void {\r\n        this.removeAllAccounts();\r\n        this.removeAppMetadata();\r\n        this.getKeys().forEach((cacheKey: string) => {\r\n            // Check if key contains msal prefix; For now, we are clearing all the cache items created by MSAL.js\r\n            if ((this.browserStorage.containsKey(cacheKey) || this.temporaryCacheStorage.containsKey(cacheKey)) && ((cacheKey.indexOf(Constants.CACHE_PREFIX) !== -1) || (cacheKey.indexOf(this.clientId) !== -1))) {\r\n                this.removeItem(cacheKey);\r\n            }\r\n        });\r\n\r\n        this.internalStorage.clear();\r\n    }\r\n\r\n    /**\r\n     * Add value to cookies\r\n     * @param cookieName\r\n     * @param cookieValue\r\n     * @param expires\r\n     */\r\n    setItemCookie(cookieName: string, cookieValue: string, expires?: number): void {\r\n        let cookieStr = `${encodeURIComponent(cookieName)}=${encodeURIComponent(cookieValue)};path=/;`;\r\n        if (expires) {\r\n            const expireTime = this.getCookieExpirationTime(expires);\r\n            cookieStr += `expires=${expireTime};`;\r\n        }\r\n\r\n        if (this.cacheConfig.secureCookies) {\r\n            cookieStr += \"Secure;\";\r\n        }\r\n        \r\n        document.cookie = cookieStr;\r\n    }\r\n\r\n    /**\r\n     * Get one item by key from cookies\r\n     * @param cookieName\r\n     */\r\n    getItemCookie(cookieName: string): string {\r\n        const name = `${encodeURIComponent(cookieName)}=`;\r\n        const cookieList = document.cookie.split(\";\");\r\n        for (let i: number = 0; i < cookieList.length; i++) {\r\n            let cookie = cookieList[i];\r\n            while (cookie.charAt(0) === \" \") {\r\n                cookie = cookie.substring(1);\r\n            }\r\n            if (cookie.indexOf(name) === 0) {\r\n                return decodeURIComponent(cookie.substring(name.length, cookie.length));\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Clear all msal-related cookies currently set in the browser. Should only be used to clear temporary cache items.\r\n     */\r\n    clearMsalCookies(): void {\r\n        const cookiePrefix = `${Constants.CACHE_PREFIX}.${this.clientId}`;\r\n        const cookieList = document.cookie.split(\";\");\r\n        cookieList.forEach((cookie: string): void => {\r\n            while (cookie.charAt(0) === \" \") {\r\n                // eslint-disable-next-line no-param-reassign\r\n                cookie = cookie.substring(1);\r\n            }\r\n            if (cookie.indexOf(cookiePrefix) === 0) {\r\n                const cookieKey = cookie.split(\"=\")[0];\r\n                this.clearItemCookie(cookieKey);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear an item in the cookies by key\r\n     * @param cookieName\r\n     */\r\n    clearItemCookie(cookieName: string): void {\r\n        this.setItemCookie(cookieName, \"\", -1);\r\n    }\r\n\r\n    /**\r\n     * Get cookie expiration time\r\n     * @param cookieLifeDays\r\n     */\r\n    getCookieExpirationTime(cookieLifeDays: number): string {\r\n        const today = new Date();\r\n        const expr = new Date(today.getTime() + cookieLifeDays * this.COOKIE_LIFE_MULTIPLIER);\r\n        return expr.toUTCString();\r\n    }\r\n\r\n    /**\r\n     * Gets the cache object referenced by the browser\r\n     */\r\n    getCache(): object {\r\n        return this.browserStorage;\r\n    }\r\n\r\n    /**\r\n     * interface compat, we cannot overwrite browser cache; Functionality is supported by individual entities in browser\r\n     */\r\n    setCache(): void {\r\n        // sets nothing\r\n    }\r\n\r\n    /**\r\n     * Prepend msal.<client-id> to each key; Skip for any JSON object as Key (defined schemas do not need the key appended: AccessToken Keys or the upcoming schema)\r\n     * @param key\r\n     * @param addInstanceId\r\n     */\r\n    generateCacheKey(key: string): string {\r\n        const generatedKey = this.validateAndParseJson(key);\r\n        if (!generatedKey) {\r\n            if (StringUtils.startsWith(key, Constants.CACHE_PREFIX) || StringUtils.startsWith(key, PersistentCacheKeys.ADAL_ID_TOKEN)) {\r\n                return key;\r\n            }\r\n            return `${Constants.CACHE_PREFIX}.${this.clientId}.${key}`;\r\n        }\r\n\r\n        return JSON.stringify(key);\r\n    }\r\n\r\n    /**\r\n     * Create authorityKey to cache authority\r\n     * @param state\r\n     */\r\n    generateAuthorityKey(stateString: string): string {\r\n        const {\r\n            libraryState: {\r\n                id: stateId\r\n            }\r\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\r\n\r\n        return this.generateCacheKey(`${TemporaryCacheKeys.AUTHORITY}.${stateId}`);\r\n    }\r\n\r\n    /**\r\n     * Create Nonce key to cache nonce\r\n     * @param state\r\n     */\r\n    generateNonceKey(stateString: string): string {\r\n        const {\r\n            libraryState: {\r\n                id: stateId\r\n            }\r\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\r\n\r\n        return this.generateCacheKey(`${TemporaryCacheKeys.NONCE_IDTOKEN}.${stateId}`);\r\n    }\r\n\r\n    /**\r\n     * Creates full cache key for the request state\r\n     * @param stateString State string for the request\r\n     */\r\n    generateStateKey(stateString: string): string {\r\n        // Use the library state id to key temp storage for uniqueness for multiple concurrent requests\r\n        const {\r\n            libraryState: {\r\n                id: stateId\r\n            }\r\n        } = ProtocolUtils.parseRequestState(this.cryptoImpl, stateString);\r\n        return this.generateCacheKey(`${TemporaryCacheKeys.REQUEST_STATE}.${stateId}`);\r\n    } \r\n\r\n    /**\r\n     * Gets the cached authority based on the cached state. Returns empty if no cached state found.\r\n     */\r\n    getCachedAuthority(cachedState: string): string | null {\r\n        const stateCacheKey = this.generateStateKey(cachedState);\r\n        const state = this.getTemporaryCache(stateCacheKey);\r\n        if (!state) {\r\n            return null;\r\n        }\r\n\r\n        const authorityCacheKey = this.generateAuthorityKey(state);\r\n        return this.getTemporaryCache(authorityCacheKey);\r\n    }\r\n\r\n    /**\r\n     * Updates account, authority, and state in cache\r\n     * @param serverAuthenticationRequest\r\n     * @param account\r\n     */\r\n    updateCacheEntries(state: string, nonce: string, authorityInstance: string, loginHint: string, account: AccountInfo|null): void {\r\n        this.logger.trace(\"BrowserCacheManager.updateCacheEntries called\");\r\n        // Cache the request state\r\n        const stateCacheKey = this.generateStateKey(state);\r\n        this.setTemporaryCache(stateCacheKey, state, false);\r\n\r\n        // Cache the nonce\r\n        const nonceCacheKey = this.generateNonceKey(state);\r\n        this.setTemporaryCache(nonceCacheKey, nonce, false);\r\n\r\n        // Cache authorityKey\r\n        const authorityCacheKey = this.generateAuthorityKey(state);\r\n        this.setTemporaryCache(authorityCacheKey, authorityInstance, false);\r\n\r\n        if (account) {\r\n            const ccsCredential: CcsCredential = {\r\n                credential: account.homeAccountId,\r\n                type: CcsCredentialType.HOME_ACCOUNT_ID\r\n            };\r\n            this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\r\n        } else if (!StringUtils.isEmpty(loginHint)) {\r\n            const ccsCredential: CcsCredential = {\r\n                credential: loginHint,\r\n                type: CcsCredentialType.UPN\r\n            };\r\n            this.setTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, JSON.stringify(ccsCredential), true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset all temporary cache items\r\n     * @param state\r\n     */\r\n    resetRequestCache(state: string): void {\r\n        this.logger.trace(\"BrowserCacheManager.resetRequestCache called\");\r\n        // check state and remove associated cache items\r\n        if (!StringUtils.isEmpty(state)) {\r\n            this.getKeys().forEach(key => {\r\n                if (key.indexOf(state) !== -1) {\r\n                    this.removeItem(key);\r\n                }\r\n            });\r\n        }\r\n\r\n        // delete generic interactive request parameters\r\n        if (state) {\r\n            this.removeItem(this.generateStateKey(state));\r\n            this.removeItem(this.generateNonceKey(state));\r\n            this.removeItem(this.generateAuthorityKey(state));\r\n        }\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.ORIGIN_URI));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.URL_HASH));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.CCS_CREDENTIAL));\r\n    }\r\n\r\n    /**\r\n     * Removes temporary cache for the provided state\r\n     * @param stateString \r\n     */\r\n    cleanRequestByState(stateString: string): void {\r\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByState called\");\r\n        // Interaction is completed - remove interaction status.\r\n        if (stateString) {\r\n            const stateKey = this.generateStateKey(stateString);\r\n            const cachedState = this.temporaryCacheStorage.getItem(stateKey);\r\n            this.logger.infoPii(`BrowserCacheManager.cleanRequestByState: Removing temporary cache items for state: ${cachedState}`);\r\n            this.resetRequestCache(cachedState || \"\");\r\n        }\r\n        this.clearMsalCookies();\r\n    }\r\n\r\n    /**\r\n     * Looks in temporary cache for any state values with the provided interactionType and removes all temporary cache items for that state\r\n     * Used in scenarios where temp cache needs to be cleaned but state is not known, such as clicking browser back button.\r\n     * @param interactionType \r\n     */\r\n    cleanRequestByInteractionType(interactionType: InteractionType): void {\r\n        this.logger.trace(\"BrowserCacheManager.cleanRequestByInteractionType called\");\r\n        // Loop through all keys to find state key\r\n        this.getKeys().forEach((key) => {\r\n            // If this key is not the state key, move on\r\n            if (key.indexOf(TemporaryCacheKeys.REQUEST_STATE) === -1) {\r\n                return;\r\n            }\r\n            \r\n            // Retrieve state value, return if not a valid value\r\n            const stateValue = this.temporaryCacheStorage.getItem(key);\r\n            if (!stateValue) {\r\n                return;\r\n            }\r\n            // Extract state and ensure it matches given InteractionType, then clean request cache\r\n            const parsedState = BrowserProtocolUtils.extractBrowserRequestState(this.cryptoImpl, stateValue);\r\n            if (parsedState && parsedState.interactionType === interactionType) {\r\n                this.logger.infoPii(`BrowserCacheManager.cleanRequestByInteractionType: Removing temporary cache items for state: ${stateValue}`);\r\n                this.resetRequestCache(stateValue);\r\n            }\r\n        });\r\n        this.clearMsalCookies();\r\n    }\r\n\r\n    cacheCodeRequest(authCodeRequest: CommonAuthorizationCodeRequest, browserCrypto: ICrypto): void {\r\n        this.logger.trace(\"BrowserCacheManager.cacheCodeRequest called\");\r\n\r\n        const encodedValue = browserCrypto.base64Encode(JSON.stringify(authCodeRequest));\r\n        this.setTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, encodedValue, true);\r\n    }\r\n\r\n    /**\r\n     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.\r\n     */\r\n    getCachedRequest(state: string, browserCrypto: ICrypto): CommonAuthorizationCodeRequest {\r\n        this.logger.trace(\"BrowserCacheManager.getCachedRequest called\");\r\n        // Get token request from cache and parse as TokenExchangeParameters.\r\n        const encodedTokenRequest = this.getTemporaryCache(TemporaryCacheKeys.REQUEST_PARAMS, true);\r\n        if (!encodedTokenRequest) {\r\n            throw BrowserAuthError.createNoTokenRequestCacheError();\r\n        }\r\n\r\n        const parsedRequest = this.validateAndParseJson(browserCrypto.base64Decode(encodedTokenRequest)) as CommonAuthorizationCodeRequest;\r\n        if (!parsedRequest) {\r\n            throw BrowserAuthError.createUnableToParseTokenRequestCacheError();\r\n        }\r\n        this.removeItem(this.generateCacheKey(TemporaryCacheKeys.REQUEST_PARAMS));\r\n\r\n        // Get cached authority and use if no authority is cached with request.\r\n        if (StringUtils.isEmpty(parsedRequest.authority)) {\r\n            const authorityCacheKey: string = this.generateAuthorityKey(state);\r\n            const cachedAuthority = this.getTemporaryCache(authorityCacheKey);\r\n            if (!cachedAuthority) {\r\n                throw BrowserAuthError.createNoCachedAuthorityError();\r\n            }\r\n            parsedRequest.authority = cachedAuthority;\r\n        }\r\n\r\n        return parsedRequest;\r\n    }\r\n}\r\n\r\nexport const DEFAULT_BROWSER_CACHE_MANAGER = (clientId: string, logger: Logger): BrowserCacheManager => {\r\n    const cacheOptions = {\r\n        cacheLocation: BrowserCacheLocation.MemoryStorage,\r\n        storeAuthStateInCookie: false,\r\n        secureCookies: false\r\n    };\r\n    return new BrowserCacheManager(clientId, cacheOptions, DEFAULT_CRYPTO_IMPLEMENTATION, logger);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}