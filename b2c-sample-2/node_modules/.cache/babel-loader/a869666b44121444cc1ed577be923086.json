{"ast":null,"code":"var _jsxFileName = \"/home/nicolasgou/dev/ms-identity-javascript-react-tutorial/3-Authorization-II/2-call-api-b2c/SPA/src/App.jsx\",\n    _s = $RefreshSig$();\n\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { MsalProvider, useMsal } from \"@azure/msal-react\";\nimport { EventType, InteractionType } from \"@azure/msal-browser\";\nimport { b2cPolicies } from \"./authConfig\";\nimport { PageLayout } from \"./components/PageLayout\";\nimport { Hello } from \"./pages/Hello\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Pages = () => {\n  _s();\n\n  /**\n   * useMsal is hook that returns the PublicClientApplication instance, \n   * an array of all accounts currently signed in and an inProgress value \n   * that tells you what msal is currently doing. For more, visit:\n   * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n   */\n  const {\n    instance\n  } = useMsal();\n  /**\n   * Using the event API, you can register an event callback that will do something when an event is emitted. \n   * When registering an event callback in a react component you will need to make sure you do 2 things.\n   * 1) The callback is registered only once\n   * 2) The callback is unregistered before the component unmounts.\n   * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\n   */\n\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(event => {\n      if (event.eventType === EventType.LOGIN_FAILURE) {\n        if (event.error && event.error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\n          if (event.interactionType === InteractionType.Redirect) {\n            instance.loginRedirect(b2cPolicies.authorities.forgotPassword);\n          } else if (event.interactionType === InteractionType.Popup) {\n            instance.loginPopup(b2cPolicies.authorities.forgotPassword).catch(e => {\n              return;\n            });\n          }\n        }\n      }\n\n      if (event.eventType === EventType.LOGIN_SUCCESS || event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS) {\n        if (event === null || event === void 0 ? void 0 : event.payload) {\n          /**\n           * We need to reject id tokens that were not issued with the default sign-in policy.\n           * \"acr\" claim in the token tells us what policy is used (NOTE: for new policies (v2.0), use \"tfp\" instead of \"acr\").\n           * To learn more about B2C tokens, visit https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\n           */\n          if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.forgotPassword) {\n            window.alert(\"Password has been reset successfully. \\nPlease sign-in with your new password.\");\n            return instance.logout();\n          } else if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.editProfile) {\n            window.alert(\"Profile has been edited successfully. \\nPlease sign-in again.\");\n            return instance.logout();\n          }\n        }\n      }\n    });\n    return () => {\n      if (callbackId) {\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/hello\",\n      children: /*#__PURE__*/_jsxDEV(Hello, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Pages, \"CyAOT5TCyJmKIwhVlXYy8fh+2P8=\", false, function () {\n  return [useMsal];\n});\n\n_c = Pages;\n\nconst App = ({\n  instance\n}) => {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(MsalProvider, {\n      instance: instance,\n      children: /*#__PURE__*/_jsxDEV(PageLayout, {\n        children: /*#__PURE__*/_jsxDEV(Pages, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Pages\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/home/nicolasgou/dev/ms-identity-javascript-react-tutorial/3-Authorization-II/2-call-api-b2c/SPA/src/App.jsx"],"names":["React","useEffect","BrowserRouter","Router","Switch","Route","MsalProvider","useMsal","EventType","InteractionType","b2cPolicies","PageLayout","Hello","Pages","instance","callbackId","addEventCallback","event","eventType","LOGIN_FAILURE","error","errorMessage","indexOf","interactionType","Redirect","loginRedirect","authorities","forgotPassword","Popup","loginPopup","catch","e","LOGIN_SUCCESS","ACQUIRE_TOKEN_SUCCESS","payload","idTokenClaims","names","window","alert","logout","editProfile","removeEventCallback","App"],"mappings":";;;AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AAEA,SAASC,YAAT,EAAuBC,OAAvB,QAAsC,mBAAtC;AACA,SAASC,SAAT,EAAoBC,eAApB,QAA2C,qBAA3C;AAEA,SAASC,WAAT,QAA4B,cAA5B;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,KAAT,QAAsB,eAAtB;AAEA,OAAO,kBAAP;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAElB;AACF;AACA;AACA;AACA;AACA;AACE,QAAM;AAAEC,IAAAA;AAAF,MAAeP,OAAO,EAA5B;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AACEN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,UAAU,GAAGD,QAAQ,CAACE,gBAAT,CAA2BC,KAAD,IAAW;AACtD,UAAIA,KAAK,CAACC,SAAN,KAAoBV,SAAS,CAACW,aAAlC,EAAiD;AAC/C,YAAIF,KAAK,CAACG,KAAN,IAAeH,KAAK,CAACG,KAAN,CAAYC,YAAZ,CAAyBC,OAAzB,CAAiC,aAAjC,IAAkD,CAAC,CAAtE,EAAyE;AACvE,cAAIL,KAAK,CAACM,eAAN,KAA0Bd,eAAe,CAACe,QAA9C,EAAwD;AACtDV,YAAAA,QAAQ,CAACW,aAAT,CAAuBf,WAAW,CAACgB,WAAZ,CAAwBC,cAA/C;AACD,WAFD,MAEO,IAAIV,KAAK,CAACM,eAAN,KAA0Bd,eAAe,CAACmB,KAA9C,EAAqD;AAC1Dd,YAAAA,QAAQ,CAACe,UAAT,CAAoBnB,WAAW,CAACgB,WAAZ,CAAwBC,cAA5C,EACGG,KADH,CACSC,CAAC,IAAI;AACV;AACD,aAHH;AAID;AACF;AACF;;AAED,UAAId,KAAK,CAACC,SAAN,KAAoBV,SAAS,CAACwB,aAA9B,IAA+Cf,KAAK,CAACC,SAAN,KAAoBV,SAAS,CAACyB,qBAAjF,EAAwG;AACtG,YAAIhB,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEiB,OAAX,EAAoB;AAClB;AACV;AACA;AACA;AACA;AACU,cAAIjB,KAAK,CAACiB,OAAN,CAAcC,aAAd,CAA4B,KAA5B,MAAuCzB,WAAW,CAAC0B,KAAZ,CAAkBT,cAA7D,EAA6E;AAC3EU,YAAAA,MAAM,CAACC,KAAP,CAAa,gFAAb;AACA,mBAAOxB,QAAQ,CAACyB,MAAT,EAAP;AACD,WAHD,MAGO,IAAItB,KAAK,CAACiB,OAAN,CAAcC,aAAd,CAA4B,KAA5B,MAAuCzB,WAAW,CAAC0B,KAAZ,CAAkBI,WAA7D,EAA0E;AAC/EH,YAAAA,MAAM,CAACC,KAAP,CAAa,+DAAb;AACA,mBAAOxB,QAAQ,CAACyB,MAAT,EAAP;AACD;AACF;AACF;AACF,KA9BkB,CAAnB;AAgCA,WAAO,MAAM;AACX,UAAIxB,UAAJ,EAAgB;AACdD,QAAAA,QAAQ,CAAC2B,mBAAT,CAA6B1B,UAA7B;AACD;AACF,KAJD;AAKD,GAtCQ,EAsCN,EAtCM,CAAT;AAwCA,sBACE,QAAC,MAAD;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAA,6BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAhED;;GAAMF,K;UAQiBN,O;;;KARjBM,K;;AAkEN,MAAM6B,GAAG,GAAG,CAAC;AAAE5B,EAAAA;AAAF,CAAD,KAAkB;AAC5B,sBACE,QAAC,MAAD;AAAA,2BACE,QAAC,YAAD;AAAc,MAAA,QAAQ,EAAEA,QAAxB;AAAA,6BACE,QAAC,UAAD;AAAA,+BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAVD;;MAAM4B,G;AAYN,eAAeA,GAAf","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { MsalProvider, useMsal } from \"@azure/msal-react\";\nimport { EventType, InteractionType } from \"@azure/msal-browser\";\n\nimport { b2cPolicies } from \"./authConfig\";\nimport { PageLayout } from \"./components/PageLayout\";\nimport { Hello } from \"./pages/Hello\";\n\nimport \"./styles/App.css\";\n\nconst Pages = () => {\n\n  /**\n   * useMsal is hook that returns the PublicClientApplication instance, \n   * an array of all accounts currently signed in and an inProgress value \n   * that tells you what msal is currently doing. For more, visit:\n   * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n   */\n  const { instance } = useMsal();\n\n  /**\n   * Using the event API, you can register an event callback that will do something when an event is emitted. \n   * When registering an event callback in a react component you will need to make sure you do 2 things.\n   * 1) The callback is registered only once\n   * 2) The callback is unregistered before the component unmounts.\n   * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\n   */\n  useEffect(() => {\n    const callbackId = instance.addEventCallback((event) => {\n      if (event.eventType === EventType.LOGIN_FAILURE) {\n        if (event.error && event.error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\n          if (event.interactionType === InteractionType.Redirect) {\n            instance.loginRedirect(b2cPolicies.authorities.forgotPassword);\n          } else if (event.interactionType === InteractionType.Popup) {\n            instance.loginPopup(b2cPolicies.authorities.forgotPassword)\n              .catch(e => {\n                return;\n              });\n          }\n        }\n      }\n\n      if (event.eventType === EventType.LOGIN_SUCCESS || event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS) {\n        if (event?.payload) {\n          /**\n           * We need to reject id tokens that were not issued with the default sign-in policy.\n           * \"acr\" claim in the token tells us what policy is used (NOTE: for new policies (v2.0), use \"tfp\" instead of \"acr\").\n           * To learn more about B2C tokens, visit https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\n           */\n          if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.forgotPassword) {\n            window.alert(\"Password has been reset successfully. \\nPlease sign-in with your new password.\");\n            return instance.logout();\n          } else if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.editProfile) {\n            window.alert(\"Profile has been edited successfully. \\nPlease sign-in again.\");\n            return instance.logout();\n          }\n        }\n      }\n    });\n\n    return () => {\n      if (callbackId) {\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, []);\n\n  return (\n    <Switch>\n      <Route path=\"/hello\">\n        <Hello />\n      </Route>\n    </Switch>\n  )\n}\n\nconst App = ({ instance }) => {\n  return (\n    <Router>\n      <MsalProvider instance={instance}>\n        <PageLayout>\n          <Pages />\n        </PageLayout>\n      </MsalProvider>\n    </Router>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}