{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { GrantType, Constants as Constants$1 } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { BaseClient as BaseClient$1 } from './BaseClient.js';\nimport { RequestParameterBuilder as RequestParameterBuilder$1 } from '../request/RequestParameterBuilder.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { ResponseHandler as ResponseHandler$1 } from '../response/ResponseHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 Device code client\r\n */\nvar DeviceCodeClient = /** @class */function (_super) {\n  __extends(DeviceCodeClient, _super);\n  function DeviceCodeClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Gets device code from device code endpoint, calls back to with device code response, and\r\n   * polls token endpoint to exchange device code for tokens\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deviceCodeResponse, reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.getDeviceCode(request)];\n          case 1:\n            deviceCodeResponse = _a.sent();\n            request.deviceCodeCallback(deviceCodeResponse);\n            reqTimestamp = TimeUtils$1.nowSeconds();\n            return [4 /*yield*/, this.acquireTokenWithDeviceCode(request, deviceCodeResponse)];\n          case 2:\n            response = _a.sent();\n            responseHandler = new ResponseHandler$1(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response, this.authority, reqTimestamp, request)];\n          case 3:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates device code request and executes http GET\r\n   * @param request\r\n   */\n  DeviceCodeClient.prototype.getDeviceCode = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString, headers, thumbprint;\n      return __generator(this, function (_a) {\n        queryString = this.createQueryString(request);\n        headers = this.createTokenRequestHeaders();\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: request.authority,\n          scopes: request.scopes\n        };\n        return [2 /*return*/, this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to device code endpoint\r\n   * @param deviceCodeEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   */\n  DeviceCodeClient.prototype.executePostRequestToDeviceCodeEndpoint = function (deviceCodeEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, userCode, deviceCode, verificationUri, expiresIn, interval, message;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, deviceCodeEndpoint, {\n              body: queryString,\n              headers: headers\n            })];\n          case 1:\n            _a = _b.sent().body, userCode = _a.user_code, deviceCode = _a.device_code, verificationUri = _a.verification_uri, expiresIn = _a.expires_in, interval = _a.interval, message = _a.message;\n            return [2 /*return*/, {\n              userCode: userCode,\n              deviceCode: deviceCode,\n              verificationUri: verificationUri,\n              expiresIn: expiresIn,\n              interval: interval,\n              message: message\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create device code endpoint query parameters and returns string\r\n   */\n  DeviceCodeClient.prototype.createQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    if (!StringUtils$1.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Breaks the polling with specific conditions.\r\n   * @param request CommonDeviceCodeRequest\r\n   * @param deviceCodeResponse DeviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.continuePolling = function (deviceCodeExpirationTime, userSpecifiedTimeout, userSpecifiedCancelFlag) {\n    if (userSpecifiedCancelFlag) {\n      this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\n      throw ClientAuthError$1.createDeviceCodeCancelledError();\n    } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils$1.nowSeconds() > userSpecifiedTimeout) {\n      this.logger.error(\"User defined timeout for device code polling reached. The timeout was set for \" + userSpecifiedTimeout);\n      throw ClientAuthError$1.createUserTimeoutReachedError();\n    } else if (TimeUtils$1.nowSeconds() > deviceCodeExpirationTime) {\n      if (userSpecifiedTimeout) {\n        this.logger.verbose(\"User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for \" + userSpecifiedTimeout);\n      }\n      this.logger.error(\"Device code expired. Expiration time of device code was \" + deviceCodeExpirationTime);\n      throw ClientAuthError$1.createDeviceCodeExpiredError();\n    }\n    return true;\n  };\n  /**\r\n   * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n   * response\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.acquireTokenWithDeviceCode = function (request, deviceCodeResponse) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, userSpecifiedTimeout, deviceCodeExpirationTime, pollingIntervalMilli, thumbprint, response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\n            headers = this.createTokenRequestHeaders();\n            userSpecifiedTimeout = request.timeout ? TimeUtils$1.nowSeconds() + request.timeout : undefined;\n            deviceCodeExpirationTime = TimeUtils$1.nowSeconds() + deviceCodeResponse.expiresIn;\n            pollingIntervalMilli = deviceCodeResponse.interval * 1000;\n            _a.label = 1;\n          case 1:\n            if (!this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) return [3 /*break*/, 6];\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes\n            };\n            return [4 /*yield*/, this.executePostToTokenEndpoint(this.authority.tokenEndpoint, requestBody, headers, thumbprint)];\n          case 2:\n            response = _a.sent();\n            if (!(response.body && response.body.error === Constants$1.AUTHORIZATION_PENDING)) return [3 /*break*/, 4];\n            // user authorization is pending. Sleep for polling interval and try again\n            this.logger.info(response.body.error_description || \"Authorization pending. Continue polling.\");\n            return [4 /*yield*/, TimeUtils$1.delay(pollingIntervalMilli)];\n          case 3:\n            _a.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\n            return [2 /*return*/, response.body];\n          case 5:\n            return [3 /*break*/, 1];\n          case 6:\n            /*\r\n             * The above code should've thrown by this point, but to satisfy TypeScript,\r\n             * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n             */\n            this.logger.error(\"Polling stopped for unknown reasons.\");\n            throw ClientAuthError$1.createDeviceCodeUnknownError();\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query parameters and converts to string.\r\n   * @param request\r\n   * @param deviceCodeResponse\r\n   */\n  DeviceCodeClient.prototype.createTokenRequestBody = function (request, deviceCodeResponse) {\n    var requestParameters = new RequestParameterBuilder$1();\n    requestParameters.addScopes(request.scopes);\n    requestParameters.addClientId(this.config.authOptions.clientId);\n    requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\n    requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    requestParameters.addCorrelationId(correlationId);\n    requestParameters.addClientInfo();\n    requestParameters.addLibraryInfo(this.config.libraryInfo);\n    requestParameters.addThrottling();\n    if (this.serverTelemetryManager) {\n      requestParameters.addServerTelemetry(this.serverTelemetryManager);\n    }\n    if (!StringUtils$1.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return requestParameters.createQueryString();\n  };\n  return DeviceCodeClient;\n}(BaseClient$1);\nexport { DeviceCodeClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","DeviceCodeClient","request","getDeviceCode","deviceCodeResponse","_a","deviceCodeCallback","reqTimestamp","TimeUtils","nowSeconds","acquireTokenWithDeviceCode","response","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","logger","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","authority","queryString","createQueryString","headers","createTokenRequestHeaders","thumbprint","scopes","executePostRequestToDeviceCodeEndpoint","deviceCodeEndpoint","networkManager","sendPostRequest","body","_b","userCode","deviceCode","verificationUri","expiresIn","interval","message","parameterBuilder","RequestParameterBuilder","addScopes","addClientId","StringUtils","isEmpty","claims","clientCapabilities","length","addClaims","deviceCodeExpirationTime","userSpecifiedTimeout","userSpecifiedCancelFlag","error","ClientAuthError","createDeviceCodeCancelledError","createUserTimeoutReachedError","verbose","createDeviceCodeExpiredError","requestBody","createTokenRequestBody","timeout","undefined","pollingIntervalMilli","continuePolling","cancel","executePostToTokenEndpoint","tokenEndpoint","Constants","AUTHORIZATION_PENDING","info","error_description","delay","createDeviceCodeUnknownError","requestParameters","addGrantType","GrantType","DEVICE_CODE_GRANT","addDeviceCode","correlationId","cryptoInterface","createNewGuid","addCorrelationId","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","serverTelemetryManager","addServerTelemetry","isEmptyObj","BaseClient"],"sources":["../../src/client/DeviceCodeClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { DeviceCodeResponse, ServerDeviceCodeResponse } from \"../response/DeviceCodeResponse\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { CommonDeviceCodeRequest } from \"../request/CommonDeviceCodeRequest\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { Constants, GrantType } from \"../utils/Constants\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\n\r\n/**\r\n * OAuth2.0 Device code client\r\n */\r\nexport class DeviceCodeClient extends BaseClient {\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Gets device code from device code endpoint, calls back to with device code response, and\r\n     * polls token endpoint to exchange device code for tokens\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonDeviceCodeRequest): Promise<AuthenticationResult | null> {\r\n        const deviceCodeResponse: DeviceCodeResponse = await this.getDeviceCode(request);\r\n        request.deviceCodeCallback(deviceCodeResponse);\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response: ServerAuthorizationTokenResponse = await this.acquireTokenWithDeviceCode(\r\n            request,\r\n            deviceCodeResponse);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response);\r\n        return await responseHandler.handleServerTokenResponse(\r\n            response,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates device code request and executes http GET\r\n     * @param request\r\n     */\r\n    private async getDeviceCode(request: CommonDeviceCodeRequest): Promise<DeviceCodeResponse> {\r\n        const queryString = this.createQueryString(request);\r\n        const headers = this.createTokenRequestHeaders();\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes\r\n        };\r\n\r\n        return this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Executes POST request to device code endpoint\r\n     * @param deviceCodeEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     */\r\n    private async executePostRequestToDeviceCodeEndpoint(\r\n        deviceCodeEndpoint: string,\r\n        queryString: string,\r\n        headers: Record<string, string>,\r\n        thumbprint: RequestThumbprint): Promise<DeviceCodeResponse> {\r\n\r\n        const {\r\n            body: {\r\n                user_code: userCode,\r\n                device_code: deviceCode,\r\n                verification_uri: verificationUri,\r\n                expires_in: expiresIn,\r\n                interval,\r\n                message\r\n            }\r\n        } = await this.networkManager.sendPostRequest<ServerDeviceCodeResponse>(\r\n            thumbprint,\r\n            deviceCodeEndpoint,\r\n            {\r\n                body: queryString,\r\n                headers: headers\r\n            });\r\n\r\n        return {\r\n            userCode,\r\n            deviceCode,\r\n            verificationUri,\r\n            expiresIn,\r\n            interval,\r\n            message\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Create device code endpoint query parameters and returns string\r\n     */\r\n    private createQueryString(request: CommonDeviceCodeRequest): string {\r\n\r\n        const parameterBuilder: RequestParameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Breaks the polling with specific conditions.\r\n     * @param request CommonDeviceCodeRequest\r\n     * @param deviceCodeResponse DeviceCodeResponse\r\n     */\r\n    private continuePolling(\r\n        deviceCodeExpirationTime: number,\r\n        userSpecifiedTimeout?: number,\r\n        userSpecifiedCancelFlag?: boolean,\r\n    ): boolean {\r\n        if (userSpecifiedCancelFlag) {\r\n            this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\r\n            throw ClientAuthError.createDeviceCodeCancelledError();\r\n        } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\r\n            this.logger.error(`User defined timeout for device code polling reached. The timeout was set for ${userSpecifiedTimeout}`);\r\n            throw ClientAuthError.createUserTimeoutReachedError();\r\n        } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\r\n            if (userSpecifiedTimeout) {\r\n                this.logger.verbose(`User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for ${userSpecifiedTimeout}`);\r\n            }\r\n            this.logger.error(`Device code expired. Expiration time of device code was ${deviceCodeExpirationTime}`);\r\n            throw ClientAuthError.createDeviceCodeExpiredError();\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n     * response\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    private async acquireTokenWithDeviceCode(\r\n        request: CommonDeviceCodeRequest,\r\n        deviceCodeResponse: DeviceCodeResponse): Promise<ServerAuthorizationTokenResponse> {\r\n\r\n        const requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\r\n\r\n        const userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\r\n        const deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\r\n        const pollingIntervalMilli = deviceCodeResponse.interval * 1000;\r\n\r\n        /*\r\n         * Poll token endpoint while (device code is not expired AND operation has not been cancelled by\r\n         * setting CancellationToken.cancel = true). POST request is sent at interval set by pollingIntervalMilli\r\n         */\r\n        while (this.continuePolling(deviceCodeExpirationTime, userSpecifiedTimeout, request.cancel)) {\r\n            const thumbprint: RequestThumbprint = {\r\n                clientId: this.config.authOptions.clientId,\r\n                authority: request.authority,\r\n                scopes: request.scopes\r\n            };\r\n            const response = await this.executePostToTokenEndpoint(\r\n                this.authority.tokenEndpoint,\r\n                requestBody,\r\n                headers,\r\n                thumbprint);\r\n\r\n            if (response.body && response.body.error === Constants.AUTHORIZATION_PENDING) {\r\n                // user authorization is pending. Sleep for polling interval and try again\r\n                this.logger.info(response.body.error_description || \"Authorization pending. Continue polling.\");\r\n  \r\n                await TimeUtils.delay(pollingIntervalMilli);\r\n            } else {\r\n                this.logger.verbose(\"Authorization completed successfully. Polling stopped.\");\r\n                return response.body;\r\n            }\r\n        }\r\n\r\n        /*\r\n         * The above code should've thrown by this point, but to satisfy TypeScript,\r\n         * and in the rare case the conditionals in continuePolling() may not catch everything...\r\n         */\r\n        this.logger.error(\"Polling stopped for unknown reasons.\");\r\n        throw ClientAuthError.createDeviceCodeUnknownError();\r\n    }\r\n\r\n    /**\r\n     * Creates query parameters and converts to string.\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    private createTokenRequestBody(request: CommonDeviceCodeRequest, deviceCodeResponse: DeviceCodeResponse): string {\r\n\r\n        const requestParameters: RequestParameterBuilder = new RequestParameterBuilder();\r\n\r\n        requestParameters.addScopes(request.scopes);\r\n        requestParameters.addClientId(this.config.authOptions.clientId);\r\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\r\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        requestParameters.addCorrelationId(correlationId);\r\n        requestParameters.addClientInfo();\r\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\r\n        requestParameters.addThrottling();\r\n        \r\n        if (this.serverTelemetryManager) {\r\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return requestParameters.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}