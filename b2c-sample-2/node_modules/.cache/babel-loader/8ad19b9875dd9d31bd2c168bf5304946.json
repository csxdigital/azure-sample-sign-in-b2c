{"ast":null,"code":"var _jsxFileName = \"/home/nicolasgou/dev/azure-sample-sign-in-b2c/b2c-sample-2/src/pages/Hello.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { MsalAuthenticationTemplate, useMsal, useAccount } from \"@azure/msal-react\";\nimport { InteractionRequiredAuthError, InteractionType } from \"@azure/msal-browser\";\nimport { loginRequest, protectedResources } from \"../authConfig\";\nimport { callApiWithToken } from \"../fetch\";\nimport { HelloData } from \"../components/DataDisplay\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HelloContent = () => {\n  _s();\n  /**\n   * useMsal is hook that returns the PublicClientApplication instance, \n   * an array of all accounts currently signed in and an inProgress value \n   * that tells you what msal is currently doing. For more, visit: \n   * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n   */\n  const {\n    instance,\n    accounts,\n    inProgress\n  } = useMsal();\n  const account = useAccount(accounts[0] || {});\n  const [helloData, setHelloData] = useState(null);\n  useEffect(() => {\n    if (account && inProgress === \"none\" && !helloData) {\n      instance.acquireTokenSilent({\n        scopes: protectedResources.apiHello.scopes,\n        account: account\n      }).then(response => {\n        callApiWithToken(response.accessToken, protectedResources.apiHello.endpoint).then(response => setHelloData(response));\n      }).catch(error => {\n        // in case if silent token acquisition fails, fallback to an interactive method\n        if (error instanceof InteractionRequiredAuthError) {\n          if (account && inProgress === \"none\") {\n            instance.acquireTokenPopup({\n              scopes: protectedResources.apiHello.scopes\n            }).then(response => {\n              callApiWithToken(response.accessToken, protectedResources.apiHello.endpoint).then(response => setHelloData(response));\n            }).catch(error => console.log(error));\n          }\n        }\n      });\n    }\n  }, [account, inProgress, instance]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: helloData ? /*#__PURE__*/_jsxDEV(HelloData, {\n      helloData: helloData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 27\n    }, this) : null\n  }, void 0, false);\n};\n\n/**\n * The `MsalAuthenticationTemplate` component will render its children if a user is authenticated \n * or attempt to sign a user in. Just provide it with the interaction type you would like to use \n * (redirect or popup) and optionally a [request object](https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/request-response-object.md)\n * to be passed to the login API, a component to display while authentication is in progress or a component to display if an error occurs. For more, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\n_s(HelloContent, \"a53SmMZ5G8BSbJ2OemZf3yTVlig=\", false, function () {\n  return [useMsal, useAccount];\n});\n_c = HelloContent;\nexport const Hello = () => {\n  const authRequest = {\n    ...loginRequest\n  };\n  return /*#__PURE__*/_jsxDEV(MsalAuthenticationTemplate, {\n    interactionType: InteractionType.Redirect,\n    authenticationRequest: authRequest,\n    children: /*#__PURE__*/_jsxDEV(HelloContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n_c2 = Hello;\nvar _c, _c2;\n$RefreshReg$(_c, \"HelloContent\");\n$RefreshReg$(_c2, \"Hello\");","map":{"version":3,"names":["useEffect","useState","MsalAuthenticationTemplate","useMsal","useAccount","InteractionRequiredAuthError","InteractionType","loginRequest","protectedResources","callApiWithToken","HelloData","HelloContent","instance","accounts","inProgress","account","helloData","setHelloData","acquireTokenSilent","scopes","apiHello","then","response","accessToken","endpoint","catch","error","acquireTokenPopup","console","log","Hello","authRequest","Redirect"],"sources":["/home/nicolasgou/dev/azure-sample-sign-in-b2c/b2c-sample-2/src/pages/Hello.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { MsalAuthenticationTemplate, useMsal, useAccount } from \"@azure/msal-react\";\nimport { InteractionRequiredAuthError, InteractionType } from \"@azure/msal-browser\";\n\nimport { loginRequest, protectedResources } from \"../authConfig\";\nimport { callApiWithToken } from \"../fetch\";\nimport { HelloData } from \"../components/DataDisplay\";\n\nconst HelloContent = () => {\n    /**\n     * useMsal is hook that returns the PublicClientApplication instance, \n     * an array of all accounts currently signed in and an inProgress value \n     * that tells you what msal is currently doing. For more, visit: \n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n     */\n    const { instance, accounts, inProgress } = useMsal();\n    const account = useAccount(accounts[0] || {});\n    const [helloData, setHelloData] = useState(null);\n\n    useEffect(() => {\n        if (account && inProgress === \"none\" && !helloData) {\n            instance.acquireTokenSilent({\n                scopes: protectedResources.apiHello.scopes,\n                account: account\n            }).then((response) => {\n                callApiWithToken(response.accessToken, protectedResources.apiHello.endpoint)\n                    .then(response => setHelloData(response));\n            }).catch((error) => {\n                // in case if silent token acquisition fails, fallback to an interactive method\n                if (error instanceof InteractionRequiredAuthError) {\n                    if (account && inProgress === \"none\") {\n                        instance.acquireTokenPopup({\n                            scopes: protectedResources.apiHello.scopes,\n                        }).then((response) => {\n                            callApiWithToken(response.accessToken, protectedResources.apiHello.endpoint)\n                                .then(response => setHelloData(response));\n                        }).catch(error => console.log(error));\n                    }\n                }\n            });\n        }\n    }, [account, inProgress, instance]);\n  \n    return (\n        <>\n            { helloData ? <HelloData helloData={helloData} /> : null }\n        </>\n    );\n};\n\n/**\n * The `MsalAuthenticationTemplate` component will render its children if a user is authenticated \n * or attempt to sign a user in. Just provide it with the interaction type you would like to use \n * (redirect or popup) and optionally a [request object](https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/request-response-object.md)\n * to be passed to the login API, a component to display while authentication is in progress or a component to display if an error occurs. For more, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\nexport const Hello = () => {\n    const authRequest = {\n        ...loginRequest\n    };\n\n    return (\n        <MsalAuthenticationTemplate \n            interactionType={InteractionType.Redirect} \n            authenticationRequest={authRequest}\n        >\n            <HelloContent />\n        </MsalAuthenticationTemplate>\n      )\n};"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,0BAA0B,EAAEC,OAAO,EAAEC,UAAU,QAAQ,mBAAmB;AACnF,SAASC,4BAA4B,EAAEC,eAAe,QAAQ,qBAAqB;AAEnF,SAASC,YAAY,EAAEC,kBAAkB,QAAQ,eAAe;AAChE,SAASC,gBAAgB,QAAQ,UAAU;AAC3C,SAASC,SAAS,QAAQ,2BAA2B;AAAC;AAAA;AAEtD,MAAMC,YAAY,GAAG,MAAM;EAAA;EACvB;AACJ;AACA;AACA;AACA;AACA;EACI,MAAM;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC;EAAW,CAAC,GAAGX,OAAO,EAAE;EACpD,MAAMY,OAAO,GAAGX,UAAU,CAACS,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACZ,IAAIe,OAAO,IAAID,UAAU,KAAK,MAAM,IAAI,CAACE,SAAS,EAAE;MAChDJ,QAAQ,CAACM,kBAAkB,CAAC;QACxBC,MAAM,EAAEX,kBAAkB,CAACY,QAAQ,CAACD,MAAM;QAC1CJ,OAAO,EAAEA;MACb,CAAC,CAAC,CAACM,IAAI,CAAEC,QAAQ,IAAK;QAClBb,gBAAgB,CAACa,QAAQ,CAACC,WAAW,EAAEf,kBAAkB,CAACY,QAAQ,CAACI,QAAQ,CAAC,CACvEH,IAAI,CAACC,QAAQ,IAAIL,YAAY,CAACK,QAAQ,CAAC,CAAC;MACjD,CAAC,CAAC,CAACG,KAAK,CAAEC,KAAK,IAAK;QAChB;QACA,IAAIA,KAAK,YAAYrB,4BAA4B,EAAE;UAC/C,IAAIU,OAAO,IAAID,UAAU,KAAK,MAAM,EAAE;YAClCF,QAAQ,CAACe,iBAAiB,CAAC;cACvBR,MAAM,EAAEX,kBAAkB,CAACY,QAAQ,CAACD;YACxC,CAAC,CAAC,CAACE,IAAI,CAAEC,QAAQ,IAAK;cAClBb,gBAAgB,CAACa,QAAQ,CAACC,WAAW,EAAEf,kBAAkB,CAACY,QAAQ,CAACI,QAAQ,CAAC,CACvEH,IAAI,CAACC,QAAQ,IAAIL,YAAY,CAACK,QAAQ,CAAC,CAAC;YACjD,CAAC,CAAC,CAACG,KAAK,CAACC,KAAK,IAAIE,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC,CAAC;UACzC;QACJ;MACJ,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACX,OAAO,EAAED,UAAU,EAAEF,QAAQ,CAAC,CAAC;EAEnC,oBACI;IAAA,UACMI,SAAS,gBAAG,QAAC,SAAS;MAAC,SAAS,EAAEA;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG,GAAG;EAAI,iBACzD;AAEX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AANA,GA1CML,YAAY;EAAA,QAO6BR,OAAO,EAClCC,UAAU;AAAA;AAAA,KARxBO,YAAY;AAiDlB,OAAO,MAAMmB,KAAK,GAAG,MAAM;EACvB,MAAMC,WAAW,GAAG;IAChB,GAAGxB;EACP,CAAC;EAED,oBACI,QAAC,0BAA0B;IACvB,eAAe,EAAED,eAAe,CAAC0B,QAAS;IAC1C,qBAAqB,EAAED,WAAY;IAAA,uBAEnC,QAAC,YAAY;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACS;AAErC,CAAC;AAAC,MAbWD,KAAK;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}