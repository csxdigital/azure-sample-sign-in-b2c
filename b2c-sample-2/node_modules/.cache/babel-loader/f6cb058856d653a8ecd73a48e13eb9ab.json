{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\nvar InteractionHandler = /** @class */function () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.browserRequestLogger = browserRequestLogger;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n  InteractionHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.verbose(\"InteractionHandler.handleCodeResponse called\");\n            // Check that location hash isn't empty.\n            if (StringUtils.isEmpty(locationHash)) {\n              throw BrowserAuthError.createEmptyHashError(locationHash);\n            }\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n            // Assign code to request\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            authCodeResponse.nonce = cachedNonce || undefined;\n            authCodeResponse.state = requestState;\n            // Add CCS parameters if available\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4 /*yield*/, AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options)];\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n    return null;\n  };\n  return InteractionHandler;\n}();\nexport { InteractionHandler };","map":{"version":3,"mappings":"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","names":["authCodeModule","storageImpl","authCodeRequest","browserRequestLogger","authModule","browserStorage","InteractionHandler","locationHash","state","authority","networkModule","verbose","StringUtils","isEmpty","BrowserAuthError","createEmptyHashError","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","handleFragmentResponse","nonceKey","generateNonceKey","cachedNonce","code","cloud_instance_host_name","updateTokenEndpointAuthority","_a","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","acquireToken","tokenResponse","cleanRequestByState","cloudInstanceHostname","cloudInstanceAuthorityUri","tenant","AuthorityFactory","createDiscoveredInstance","options","cloudInstanceAuthority","updateAuthority","TemporaryCacheKeys","CCS_CREDENTIAL","JSON","parse","e","logger","error","errorPii"],"sources":["../../src/interaction_handler/InteractionHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils, CommonAuthorizationCodeRequest, AuthenticationResult, AuthorizationCodeClient, AuthorityFactory, Authority, INetworkModule, ClientAuthError, CcsCredential, Logger } from \"@azure/msal-common\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\n\r\nexport type InteractionParams = {};\r\n\r\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\r\nexport abstract class InteractionHandler {\r\n\r\n    protected authModule: AuthorizationCodeClient;\r\n    protected browserStorage: BrowserCacheManager;\r\n    protected authCodeRequest: CommonAuthorizationCodeRequest;\r\n    protected browserRequestLogger: Logger;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger) {\r\n        this.authModule = authCodeModule;\r\n        this.browserStorage = storageImpl;\r\n        this.authCodeRequest = authCodeRequest;\r\n        this.browserRequestLogger = browserRequestLogger;\r\n    }\r\n\r\n    /**\r\n     * Function to enable user interaction.\r\n     * @param requestUrl\r\n     */\r\n    abstract initiateAuthRequest(requestUrl: string, params: InteractionParams): Window | Promise<HTMLIFrameElement> | Promise<void>;\r\n\r\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash\r\n     */\r\n    async handleCodeResponse(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\r\n        this.browserRequestLogger.verbose(\"InteractionHandler.handleCodeResponse called\");\r\n        // Check that location hash isn't empty.\r\n        if (StringUtils.isEmpty(locationHash)) {\r\n            throw BrowserAuthError.createEmptyHashError(locationHash);\r\n        }\r\n\r\n        // Handle code response.\r\n        const stateKey = this.browserStorage.generateStateKey(state);\r\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n        if (!requestState) {\r\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n        const authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\r\n\r\n        // Get cached items\r\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\r\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\r\n\r\n        // Assign code to request\r\n        this.authCodeRequest.code = authCodeResponse.code;\r\n\r\n        // Check for new cloud instance\r\n        if (authCodeResponse.cloud_instance_host_name) {\r\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\r\n        }\r\n\r\n        authCodeResponse.nonce = cachedNonce || undefined;\r\n        authCodeResponse.state = requestState;\r\n\r\n        // Add CCS parameters if available\r\n        if (authCodeResponse.client_info) {\r\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\r\n        } else {\r\n            const cachedCcsCred = this.checkCcsCredentials();\r\n            if (cachedCcsCred) {\r\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\r\n            }\r\n        }\r\n\r\n        // Acquire token with retrieved code.\r\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\r\n        this.browserStorage.cleanRequestByState(state);\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * Updates authority based on cloudInstanceHostname\r\n     * @param cloudInstanceHostname \r\n     * @param authority \r\n     * @param networkModule \r\n     */\r\n    protected async updateTokenEndpointAuthority(cloudInstanceHostname: string, authority: Authority, networkModule: INetworkModule): Promise<void> {\r\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${authority.tenant}/`;\r\n        const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options);\r\n        this.authModule.updateAuthority(cloudInstanceAuthority);\r\n    }\r\n\r\n    /**\r\n     * Looks up ccs creds in the cache\r\n     */\r\n    protected checkCcsCredentials(): CcsCredential | null {\r\n        // Look up ccs credential in temp cache\r\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\r\n        if (cachedCcsCred) {\r\n            try {\r\n                return JSON.parse(cachedCcsCred) as CcsCredential;\r\n            } catch (e) {\r\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\r\n                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}