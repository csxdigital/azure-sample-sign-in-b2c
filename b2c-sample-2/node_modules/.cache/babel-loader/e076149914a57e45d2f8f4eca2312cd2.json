{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { Constants as Constants$1, CredentialType, CacheSchemaType, THE_FAMILY_ID, APP_METADATA, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme } from '../utils/Constants.js';\nimport { AuthError as AuthError$1 } from '../error/AuthError.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { CredentialEntity as CredentialEntity$1 } from './entities/CredentialEntity.js';\nimport { ScopeSet as ScopeSet$1 } from '../request/ScopeSet.js';\nimport { AccountEntity as AccountEntity$1 } from './entities/AccountEntity.js';\nimport { AuthToken as AuthToken$1 } from '../account/AuthToken.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\nvar CacheManager = /** @class */function () {\n  function CacheManager(clientId, cryptoImpl) {\n    this.clientId = clientId;\n    this.cryptoImpl = cryptoImpl;\n  }\n  /**\r\n   * Returns all accounts in cache\r\n   */\n  CacheManager.prototype.getAllAccounts = function () {\n    var _this = this;\n    var currentAccounts = this.getAccountsFilteredBy();\n    var accountValues = Object.keys(currentAccounts).map(function (accountKey) {\n      return currentAccounts[accountKey];\n    });\n    var numAccounts = accountValues.length;\n    if (numAccounts < 1) {\n      return [];\n    } else {\n      var allAccounts = accountValues.map(function (value) {\n        var accountEntity = CacheManager.toObject(new AccountEntity$1(), value);\n        var accountInfo = accountEntity.getAccountInfo();\n        var idToken = _this.readIdTokenFromCache(_this.clientId, accountInfo);\n        if (idToken && !accountInfo.idTokenClaims) {\n          accountInfo.idTokenClaims = new AuthToken$1(idToken.secret, _this.cryptoImpl).claims;\n        }\n        return accountInfo;\n      });\n      return allAccounts;\n    }\n  };\n  /**\r\n   * saves a cache record\r\n   * @param cacheRecord\r\n   */\n  CacheManager.prototype.saveCacheRecord = function (cacheRecord) {\n    if (!cacheRecord) {\n      throw ClientAuthError$1.createNullOrUndefinedCacheRecord();\n    }\n    if (!!cacheRecord.account) {\n      this.setAccount(cacheRecord.account);\n    }\n    if (!!cacheRecord.idToken) {\n      this.setIdTokenCredential(cacheRecord.idToken);\n    }\n    if (!!cacheRecord.accessToken) {\n      this.saveAccessToken(cacheRecord.accessToken);\n    }\n    if (!!cacheRecord.refreshToken) {\n      this.setRefreshTokenCredential(cacheRecord.refreshToken);\n    }\n    if (!!cacheRecord.appMetadata) {\n      this.setAppMetadata(cacheRecord.appMetadata);\n    }\n  };\n  /**\r\n   * saves access token credential\r\n   * @param credential\r\n   */\n  CacheManager.prototype.saveAccessToken = function (credential) {\n    var _this = this;\n    var currentTokenCache = this.getCredentialsFilteredBy({\n      clientId: credential.clientId,\n      credentialType: credential.credentialType,\n      environment: credential.environment,\n      homeAccountId: credential.homeAccountId,\n      realm: credential.realm\n    });\n    var currentScopes = ScopeSet$1.fromString(credential.target);\n    var currentAccessTokens = Object.keys(currentTokenCache.accessTokens).map(function (key) {\n      return currentTokenCache.accessTokens[key];\n    });\n    if (currentAccessTokens) {\n      currentAccessTokens.forEach(function (tokenEntity) {\n        var tokenScopeSet = ScopeSet$1.fromString(tokenEntity.target);\n        if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\n          _this.removeCredential(tokenEntity);\n        }\n      });\n    }\n    this.setAccessTokenCredential(credential);\n  };\n  /**\r\n   * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n   * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param realm\r\n   */\n  CacheManager.prototype.getAccountsFilteredBy = function (accountFilter) {\n    return this.getAccountsFilteredByInternal(accountFilter ? accountFilter.homeAccountId : \"\", accountFilter ? accountFilter.environment : \"\", accountFilter ? accountFilter.realm : \"\");\n  };\n  /**\r\n   * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n   * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param realm\r\n   */\n  CacheManager.prototype.getAccountsFilteredByInternal = function (homeAccountId, environment, realm) {\n    var _this = this;\n    var allCacheKeys = this.getKeys();\n    var matchingAccounts = {};\n    allCacheKeys.forEach(function (cacheKey) {\n      var entity = _this.getAccount(cacheKey);\n      if (!entity) {\n        return;\n      }\n      if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {\n        return;\n      }\n      if (!!environment && !_this.matchEnvironment(entity, environment)) {\n        return;\n      }\n      if (!!realm && !_this.matchRealm(entity, realm)) {\n        return;\n      }\n      matchingAccounts[cacheKey] = entity;\n    });\n    return matchingAccounts;\n  };\n  /**\r\n   * retrieve credentails matching all provided filters; if no filter is set, get all credentials\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param credentialType\r\n   * @param clientId\r\n   * @param realm\r\n   * @param target\r\n   */\n  CacheManager.prototype.getCredentialsFilteredBy = function (filter) {\n    return this.getCredentialsFilteredByInternal(filter.homeAccountId, filter.environment, filter.credentialType, filter.clientId, filter.familyId, filter.realm, filter.target, filter.oboAssertion);\n  };\n  /**\r\n   * Support function to help match credentials\r\n   * @param homeAccountId\r\n   * @param environment\r\n   * @param credentialType\r\n   * @param clientId\r\n   * @param realm\r\n   * @param target\r\n   */\n  CacheManager.prototype.getCredentialsFilteredByInternal = function (homeAccountId, environment, credentialType, clientId, familyId, realm, target, oboAssertion) {\n    var _this = this;\n    var allCacheKeys = this.getKeys();\n    var matchingCredentials = {\n      idTokens: {},\n      accessTokens: {},\n      refreshTokens: {}\n    };\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-credential type cache entities\n      var credType = CredentialEntity$1.getCredentialType(cacheKey);\n      if (credType === Constants$1.NOT_DEFINED) {\n        return;\n      }\n      // Attempt retrieval\n      var entity = _this.getSpecificCredential(cacheKey, credType);\n      if (!entity) {\n        return;\n      }\n      if (!!oboAssertion && !_this.matchOboAssertion(entity, oboAssertion)) {\n        return;\n      }\n      if (!!homeAccountId && !_this.matchHomeAccountId(entity, homeAccountId)) {\n        return;\n      }\n      if (!!environment && !_this.matchEnvironment(entity, environment)) {\n        return;\n      }\n      if (!!realm && !_this.matchRealm(entity, realm)) {\n        return;\n      }\n      if (!!credentialType && !_this.matchCredentialType(entity, credentialType)) {\n        return;\n      }\n      if (!!clientId && !_this.matchClientId(entity, clientId)) {\n        return;\n      }\n      if (!!familyId && !_this.matchFamilyId(entity, familyId)) {\n        return;\n      }\n      /*\r\n       * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n       * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n       */\n      if (!!target && !_this.matchTarget(entity, target)) {\n        return;\n      }\n      switch (credType) {\n        case CredentialType.ID_TOKEN:\n          matchingCredentials.idTokens[cacheKey] = entity;\n          break;\n        case CredentialType.ACCESS_TOKEN:\n        case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n          matchingCredentials.accessTokens[cacheKey] = entity;\n          break;\n        case CredentialType.REFRESH_TOKEN:\n          matchingCredentials.refreshTokens[cacheKey] = entity;\n          break;\n      }\n    });\n    return matchingCredentials;\n  };\n  /**\r\n   * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n   * @param filter\r\n   */\n  CacheManager.prototype.getAppMetadataFilteredBy = function (filter) {\n    return this.getAppMetadataFilteredByInternal(filter.environment, filter.clientId);\n  };\n  /**\r\n   * Support function to help match appMetadata\r\n   * @param environment\r\n   * @param clientId\r\n   */\n  CacheManager.prototype.getAppMetadataFilteredByInternal = function (environment, clientId) {\n    var _this = this;\n    var allCacheKeys = this.getKeys();\n    var matchingAppMetadata = {};\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-appMetadata type cache entities\n      if (!_this.isAppMetadata(cacheKey)) {\n        return;\n      }\n      // Attempt retrieval\n      var entity = _this.getAppMetadata(cacheKey);\n      if (!entity) {\n        return;\n      }\n      if (!!environment && !_this.matchEnvironment(entity, environment)) {\n        return;\n      }\n      if (!!clientId && !_this.matchClientId(entity, clientId)) {\n        return;\n      }\n      matchingAppMetadata[cacheKey] = entity;\n    });\n    return matchingAppMetadata;\n  };\n  /**\r\n   * retrieve authorityMetadata that contains a matching alias\r\n   * @param filter\r\n   */\n  CacheManager.prototype.getAuthorityMetadataByAlias = function (host) {\n    var _this = this;\n    var allCacheKeys = this.getAuthorityMetadataKeys();\n    var matchedEntity = null;\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-authorityMetadata type cache entities\n      if (!_this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(_this.clientId) === -1) {\n        return;\n      }\n      // Attempt retrieval\n      var entity = _this.getAuthorityMetadata(cacheKey);\n      if (!entity) {\n        return;\n      }\n      if (entity.aliases.indexOf(host) === -1) {\n        return;\n      }\n      matchedEntity = entity;\n    });\n    return matchedEntity;\n  };\n  /**\r\n   * Removes all accounts and related tokens from cache.\r\n   */\n  CacheManager.prototype.removeAllAccounts = function () {\n    var _this = this;\n    var allCacheKeys = this.getKeys();\n    allCacheKeys.forEach(function (cacheKey) {\n      var entity = _this.getAccount(cacheKey);\n      if (!entity) {\n        return;\n      }\n      _this.removeAccount(cacheKey);\n    });\n    return true;\n  };\n  /**\r\n   * returns a boolean if the given account is removed\r\n   * @param account\r\n   */\n  CacheManager.prototype.removeAccount = function (accountKey) {\n    var account = this.getAccount(accountKey);\n    if (!account) {\n      throw ClientAuthError$1.createNoAccountFoundError();\n    }\n    return this.removeAccountContext(account) && this.removeItem(accountKey, CacheSchemaType.ACCOUNT);\n  };\n  /**\r\n   * returns a boolean if the given account is removed\r\n   * @param account\r\n   */\n  CacheManager.prototype.removeAccountContext = function (account) {\n    var _this = this;\n    var allCacheKeys = this.getKeys();\n    var accountId = account.generateAccountId();\n    allCacheKeys.forEach(function (cacheKey) {\n      // don't parse any non-credential type cache entities\n      var credType = CredentialEntity$1.getCredentialType(cacheKey);\n      if (credType === Constants$1.NOT_DEFINED) {\n        return;\n      }\n      var cacheEntity = _this.getSpecificCredential(cacheKey, credType);\n      if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {\n        _this.removeCredential(cacheEntity);\n      }\n    });\n    return true;\n  };\n  /**\r\n   * returns a boolean if the given credential is removed\r\n   * @param credential\r\n   */\n  CacheManager.prototype.removeCredential = function (credential) {\n    var key = credential.generateCredentialKey();\n    return this.removeItem(key, CacheSchemaType.CREDENTIAL);\n  };\n  /**\r\n   * Removes all app metadata objects from cache.\r\n   */\n  CacheManager.prototype.removeAppMetadata = function () {\n    var _this = this;\n    var allCacheKeys = this.getKeys();\n    allCacheKeys.forEach(function (cacheKey) {\n      if (_this.isAppMetadata(cacheKey)) {\n        _this.removeItem(cacheKey, CacheSchemaType.APP_METADATA);\n      }\n    });\n    return true;\n  };\n  /**\r\n   * Retrieve the cached credentials into a cacherecord\r\n   * @param account\r\n   * @param clientId\r\n   * @param scopes\r\n   * @param environment\r\n   * @param authScheme\r\n   */\n  CacheManager.prototype.readCacheRecord = function (account, clientId, scopes, environment, authScheme) {\n    var cachedAccount = this.readAccountFromCache(account);\n    var cachedIdToken = this.readIdTokenFromCache(clientId, account);\n    var cachedAccessToken = this.readAccessTokenFromCache(clientId, account, scopes, authScheme);\n    var cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);\n    var cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);\n    if (cachedAccount && cachedIdToken) {\n      cachedAccount.idTokenClaims = new AuthToken$1(cachedIdToken.secret, this.cryptoImpl).claims;\n    }\n    return {\n      account: cachedAccount,\n      idToken: cachedIdToken,\n      accessToken: cachedAccessToken,\n      refreshToken: cachedRefreshToken,\n      appMetadata: cachedAppMetadata\n    };\n  };\n  /**\r\n   * Retrieve AccountEntity from cache\r\n   * @param account\r\n   */\n  CacheManager.prototype.readAccountFromCache = function (account) {\n    var accountKey = AccountEntity$1.generateAccountCacheKey(account);\n    return this.getAccount(accountKey);\n  };\n  /**\r\n   * Retrieve IdTokenEntity from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param inputRealm\r\n   */\n  CacheManager.prototype.readIdTokenFromCache = function (clientId, account) {\n    var idTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: clientId,\n      realm: account.tenantId\n    };\n    var credentialCache = this.getCredentialsFilteredBy(idTokenFilter);\n    var idTokens = Object.keys(credentialCache.idTokens).map(function (key) {\n      return credentialCache.idTokens[key];\n    });\n    var numIdTokens = idTokens.length;\n    if (numIdTokens < 1) {\n      return null;\n    } else if (numIdTokens > 1) {\n      throw ClientAuthError$1.createMultipleMatchingTokensInCacheError();\n    }\n    return idTokens[0];\n  };\n  /**\r\n   * Retrieve AccessTokenEntity from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param scopes\r\n   * @param authScheme\r\n   */\n  CacheManager.prototype.readAccessTokenFromCache = function (clientId, account, scopes, authScheme) {\n    var credentialType = authScheme === AuthenticationScheme.POP ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\n    var accessTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: credentialType,\n      clientId: clientId,\n      realm: account.tenantId,\n      target: scopes.printScopesLowerCase()\n    };\n    var credentialCache = this.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n    var numAccessTokens = accessTokens.length;\n    if (numAccessTokens < 1) {\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError$1.createMultipleMatchingTokensInCacheError();\n    }\n    return accessTokens[0];\n  };\n  /**\r\n   * Helper to retrieve the appropriate refresh token from cache\r\n   * @param clientId\r\n   * @param account\r\n   * @param familyRT\r\n   */\n  CacheManager.prototype.readRefreshTokenFromCache = function (clientId, account, familyRT) {\n    var id = familyRT ? THE_FAMILY_ID : undefined;\n    var refreshTokenFilter = {\n      homeAccountId: account.homeAccountId,\n      environment: account.environment,\n      credentialType: CredentialType.REFRESH_TOKEN,\n      clientId: clientId,\n      familyId: id\n    };\n    var credentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);\n    var refreshTokens = Object.keys(credentialCache.refreshTokens).map(function (key) {\n      return credentialCache.refreshTokens[key];\n    });\n    var numRefreshTokens = refreshTokens.length;\n    if (numRefreshTokens < 1) {\n      return null;\n    }\n    // address the else case after remove functions address environment aliases\n    return refreshTokens[0];\n  };\n  /**\r\n   * Retrieve AppMetadataEntity from cache\r\n   */\n  CacheManager.prototype.readAppMetadataFromCache = function (environment, clientId) {\n    var appMetadataFilter = {\n      environment: environment,\n      clientId: clientId\n    };\n    var appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\n    var appMetadataEntries = Object.keys(appMetadata).map(function (key) {\n      return appMetadata[key];\n    });\n    var numAppMetadata = appMetadataEntries.length;\n    if (numAppMetadata < 1) {\n      return null;\n    } else if (numAppMetadata > 1) {\n      throw ClientAuthError$1.createMultipleMatchingAppMetadataInCacheError();\n    }\n    return appMetadataEntries[0];\n  };\n  /**\r\n   * Return the family_id value associated  with FOCI\r\n   * @param environment\r\n   * @param clientId\r\n   */\n  CacheManager.prototype.isAppMetadataFOCI = function (environment, clientId) {\n    var appMetadata = this.readAppMetadataFromCache(environment, clientId);\n    return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\n  };\n  /**\r\n   * helper to match account ids\r\n   * @param value\r\n   * @param homeAccountId\r\n   */\n  CacheManager.prototype.matchHomeAccountId = function (entity, homeAccountId) {\n    return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);\n  };\n  /**\r\n   * helper to match assertion\r\n   * @param value\r\n   * @param oboAssertion\r\n   */\n  CacheManager.prototype.matchOboAssertion = function (entity, oboAssertion) {\n    return !!(entity.oboAssertion && oboAssertion === entity.oboAssertion);\n  };\n  /**\r\n   * helper to match environment\r\n   * @param value\r\n   * @param environment\r\n   */\n  CacheManager.prototype.matchEnvironment = function (entity, environment) {\n    var cloudMetadata = this.getAuthorityMetadataByAlias(environment);\n    if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\n      return true;\n    }\n    return false;\n  };\n  /**\r\n   * helper to match credential type\r\n   * @param entity\r\n   * @param credentialType\r\n   */\n  CacheManager.prototype.matchCredentialType = function (entity, credentialType) {\n    return entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase();\n  };\n  /**\r\n   * helper to match client ids\r\n   * @param entity\r\n   * @param clientId\r\n   */\n  CacheManager.prototype.matchClientId = function (entity, clientId) {\n    return !!(entity.clientId && clientId === entity.clientId);\n  };\n  /**\r\n   * helper to match family ids\r\n   * @param entity\r\n   * @param familyId\r\n   */\n  CacheManager.prototype.matchFamilyId = function (entity, familyId) {\n    return !!(entity.familyId && familyId === entity.familyId);\n  };\n  /**\r\n   * helper to match realm\r\n   * @param entity\r\n   * @param realm\r\n   */\n  CacheManager.prototype.matchRealm = function (entity, realm) {\n    return !!(entity.realm && realm === entity.realm);\n  };\n  /**\r\n   * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n   * @param entity\r\n   * @param target\r\n   */\n  CacheManager.prototype.matchTarget = function (entity, target) {\n    var isNotAccessTokenCredential = entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\n    if (isNotAccessTokenCredential || !entity.target) {\n      return false;\n    }\n    var entityScopeSet = ScopeSet$1.fromString(entity.target);\n    var requestTargetScopeSet = ScopeSet$1.fromString(target);\n    if (!requestTargetScopeSet.containsOnlyOIDCScopes()) {\n      requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes\n    } else {\n      requestTargetScopeSet.removeScope(Constants$1.OFFLINE_ACCESS_SCOPE);\n    }\n    return entityScopeSet.containsScopeSet(requestTargetScopeSet);\n  };\n  /**\r\n   * returns if a given cache entity is of the type appmetadata\r\n   * @param key\r\n   */\n  CacheManager.prototype.isAppMetadata = function (key) {\n    return key.indexOf(APP_METADATA) !== -1;\n  };\n  /**\r\n   * returns if a given cache entity is of the type authoritymetadata\r\n   * @param key\r\n   */\n  CacheManager.prototype.isAuthorityMetadata = function (key) {\n    return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\n  };\n  /**\r\n   * returns cache key used for cloud instance metadata\r\n   */\n  CacheManager.prototype.generateAuthorityMetadataCacheKey = function (authority) {\n    return AUTHORITY_METADATA_CONSTANTS.CACHE_KEY + \"-\" + this.clientId + \"-\" + authority;\n  };\n  /**\r\n   * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache\r\n   * @param key\r\n   * @param credType\r\n   */\n  CacheManager.prototype.getSpecificCredential = function (key, credType) {\n    switch (credType) {\n      case CredentialType.ID_TOKEN:\n        {\n          return this.getIdTokenCredential(key);\n        }\n      case CredentialType.ACCESS_TOKEN:\n      case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\n        {\n          return this.getAccessTokenCredential(key);\n        }\n      case CredentialType.REFRESH_TOKEN:\n        {\n          return this.getRefreshTokenCredential(key);\n        }\n      default:\n        return null;\n    }\n  };\n  /**\r\n   * Helper to convert serialized data to object\r\n   * @param obj\r\n   * @param json\r\n   */\n  CacheManager.toObject = function (obj, json) {\n    for (var propertyName in json) {\n      obj[propertyName] = json[propertyName];\n    }\n    return obj;\n  };\n  return CacheManager;\n}();\nvar DefaultStorageClass = /** @class */function (_super) {\n  __extends(DefaultStorageClass, _super);\n  function DefaultStorageClass() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DefaultStorageClass.prototype.setAccount = function () {\n    var notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAccount = function () {\n    var notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setIdTokenCredential = function () {\n    var notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getIdTokenCredential = function () {\n    var notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setAccessTokenCredential = function () {\n    var notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAccessTokenCredential = function () {\n    var notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setRefreshTokenCredential = function () {\n    var notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getRefreshTokenCredential = function () {\n    var notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setAppMetadata = function () {\n    var notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAppMetadata = function () {\n    var notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setServerTelemetry = function () {\n    var notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getServerTelemetry = function () {\n    var notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setAuthorityMetadata = function () {\n    var notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAuthorityMetadata = function () {\n    var notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getAuthorityMetadataKeys = function () {\n    var notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.setThrottlingCache = function () {\n    var notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getThrottlingCache = function () {\n    var notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.removeItem = function () {\n    var notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.containsKey = function () {\n    var notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.getKeys = function () {\n    var notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  DefaultStorageClass.prototype.clear = function () {\n    var notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\n    throw AuthError$1.createUnexpectedError(notImplErr);\n  };\n  return DefaultStorageClass;\n}(CacheManager);\nexport { CacheManager, DefaultStorageClass };","map":{"version":3,"mappings":"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","names":["clientId","cryptoImpl","CacheManager","currentAccounts","getAccountsFilteredBy","accountValues","Object","keys","map","accountKey","numAccounts","length","allAccounts","value","accountEntity","toObject","AccountEntity","accountInfo","getAccountInfo","idToken","_this","readIdTokenFromCache","idTokenClaims","AuthToken","secret","claims","cacheRecord","ClientAuthError","createNullOrUndefinedCacheRecord","account","setAccount","setIdTokenCredential","accessToken","saveAccessToken","refreshToken","setRefreshTokenCredential","appMetadata","setAppMetadata","credential","currentTokenCache","getCredentialsFilteredBy","credentialType","environment","homeAccountId","realm","currentScopes","ScopeSet","fromString","target","currentAccessTokens","accessTokens","key","forEach","tokenEntity","tokenScopeSet","intersectingScopeSets","removeCredential","setAccessTokenCredential","accountFilter","getAccountsFilteredByInternal","allCacheKeys","getKeys","matchingAccounts","cacheKey","entity","getAccount","matchHomeAccountId","matchEnvironment","matchRealm","filter","getCredentialsFilteredByInternal","familyId","oboAssertion","matchingCredentials","idTokens","refreshTokens","credType","CredentialEntity","getCredentialType","Constants","NOT_DEFINED","getSpecificCredential","matchOboAssertion","matchCredentialType","matchClientId","matchFamilyId","matchTarget","CredentialType","ID_TOKEN","ACCESS_TOKEN","ACCESS_TOKEN_WITH_AUTH_SCHEME","REFRESH_TOKEN","getAppMetadataFilteredByInternal","matchingAppMetadata","isAppMetadata","getAppMetadata","host","getAuthorityMetadataKeys","matchedEntity","isAuthorityMetadata","indexOf","getAuthorityMetadata","aliases","removeAccount","createNoAccountFoundError","removeAccountContext","removeItem","CacheSchemaType","ACCOUNT","accountId","generateAccountId","cacheEntity","generateCredentialKey","CREDENTIAL","APP_METADATA","scopes","authScheme","cachedAccount","readAccountFromCache","cachedIdToken","cachedAccessToken","readAccessTokenFromCache","cachedRefreshToken","readRefreshTokenFromCache","cachedAppMetadata","readAppMetadataFromCache","generateAccountCacheKey","idTokenFilter","tenantId","credentialCache","numIdTokens","createMultipleMatchingTokensInCacheError","AuthenticationScheme","POP","accessTokenFilter","printScopesLowerCase","numAccessTokens","familyRT","id","THE_FAMILY_ID","undefined","refreshTokenFilter","numRefreshTokens","appMetadataFilter","getAppMetadataFilteredBy","appMetadataEntries","numAppMetadata","createMultipleMatchingAppMetadataInCacheError","cloudMetadata","getAuthorityMetadataByAlias","toLowerCase","isNotAccessTokenCredential","entityScopeSet","requestTargetScopeSet","containsOnlyOIDCScopes","removeOIDCScopes","removeScope","OFFLINE_ACCESS_SCOPE","containsScopeSet","AUTHORITY_METADATA_CONSTANTS","CACHE_KEY","authority","getIdTokenCredential","getAccessTokenCredential","getRefreshTokenCredential","obj","json","propertyName","__extends","DefaultStorageClass","notImplErr","AuthError","createUnexpectedError"],"sources":["../../src/cache/CacheManager.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AccountCache, AccountFilter, CredentialFilter, CredentialCache, ValidCredentialType, AppMetadataFilter, AppMetadataCache } from \"./utils/CacheTypes\";\r\nimport { CacheRecord } from \"./entities/CacheRecord\";\r\nimport { CacheSchemaType, CredentialType, Constants, APP_METADATA, THE_FAMILY_ID, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme } from \"../utils/Constants\";\r\nimport { CredentialEntity } from \"./entities/CredentialEntity\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { AccountEntity } from \"./entities/AccountEntity\";\r\nimport { AccessTokenEntity } from \"./entities/AccessTokenEntity\";\r\nimport { IdTokenEntity } from \"./entities/IdTokenEntity\";\r\nimport { RefreshTokenEntity } from \"./entities/RefreshTokenEntity\";\r\nimport { AuthError } from \"../error/AuthError\";\r\nimport { ICacheManager } from \"./interface/ICacheManager\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { AccountInfo } from \"../account/AccountInfo\";\r\nimport { AppMetadataEntity } from \"./entities/AppMetadataEntity\";\r\nimport { ServerTelemetryEntity } from \"./entities/ServerTelemetryEntity\";\r\nimport { ThrottlingEntity } from \"./entities/ThrottlingEntity\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { ICrypto } from \"../crypto/ICrypto\";\r\nimport { AuthorityMetadataEntity } from \"./entities/AuthorityMetadataEntity\";\r\n\r\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n */\r\nexport abstract class CacheManager implements ICacheManager {\r\n    protected clientId: string;\r\n    protected cryptoImpl: ICrypto;\r\n\r\n    constructor(clientId: string, cryptoImpl: ICrypto) {\r\n        this.clientId = clientId;\r\n        this.cryptoImpl = cryptoImpl;\r\n    }\r\n\r\n    /**\r\n     * fetch the account entity from the platform cache\r\n     *  @param accountKey\r\n     */\r\n    abstract getAccount(accountKey: string): AccountEntity | null;\r\n\r\n    /**\r\n     * set account entity in the platform cache\r\n     * @param account\r\n     */\r\n    abstract setAccount(account: AccountEntity): void;\r\n\r\n    /**\r\n     * fetch the idToken entity from the platform cache\r\n     * @param idTokenKey\r\n     */\r\n    abstract getIdTokenCredential(idTokenKey: string): IdTokenEntity | null;\r\n\r\n    /**\r\n     * set idToken entity to the platform cache\r\n     * @param idToken\r\n     */\r\n    abstract setIdTokenCredential(idToken: IdTokenEntity): void;\r\n\r\n    /**\r\n     * fetch the idToken entity from the platform cache\r\n     * @param accessTokenKey\r\n     */\r\n    abstract getAccessTokenCredential(accessTokenKey: string): AccessTokenEntity | null;\r\n\r\n    /**\r\n     * set idToken entity to the platform cache\r\n     * @param accessToken\r\n     */\r\n    abstract setAccessTokenCredential(accessToken: AccessTokenEntity): void;\r\n\r\n    /**\r\n     * fetch the idToken entity from the platform cache\r\n     * @param refreshTokenKey\r\n     */\r\n    abstract getRefreshTokenCredential(refreshTokenKey: string): RefreshTokenEntity | null;\r\n\r\n    /**\r\n     * set idToken entity to the platform cache\r\n     * @param refreshToken\r\n     */\r\n    abstract setRefreshTokenCredential(refreshToken: RefreshTokenEntity): void;\r\n\r\n    /**\r\n     * fetch appMetadata entity from the platform cache\r\n     * @param appMetadataKey\r\n     */\r\n    abstract getAppMetadata(appMetadataKey: string): AppMetadataEntity | null;\r\n\r\n    /**\r\n     * set appMetadata entity to the platform cache\r\n     * @param appMetadata\r\n     */\r\n    abstract setAppMetadata(appMetadata: AppMetadataEntity): void;\r\n\r\n    /**\r\n     * fetch server telemetry entity from the platform cache\r\n     * @param serverTelemetryKey\r\n     */\r\n    abstract getServerTelemetry(serverTelemetryKey: string): ServerTelemetryEntity | null;\r\n\r\n    /**\r\n     * set server telemetry entity to the platform cache\r\n     * @param serverTelemetryKey\r\n     * @param serverTelemetry\r\n     */\r\n    abstract setServerTelemetry(serverTelemetryKey: string, serverTelemetry: ServerTelemetryEntity): void;\r\n\r\n    /**\r\n     * fetch cloud discovery metadata entity from the platform cache\r\n     * @param key\r\n     */\r\n    abstract getAuthorityMetadata(key: string): AuthorityMetadataEntity | null;\r\n\r\n    /**\r\n     * \r\n     */\r\n    abstract getAuthorityMetadataKeys(): Array<string>;\r\n\r\n    /**\r\n     * set cloud discovery metadata entity to the platform cache\r\n     * @param key\r\n     * @param value\r\n     */\r\n    abstract setAuthorityMetadata(key: string, value: AuthorityMetadataEntity): void;\r\n\r\n    /**\r\n     * fetch throttling entity from the platform cache\r\n     * @param throttlingCacheKey\r\n     */\r\n    abstract getThrottlingCache(throttlingCacheKey: string): ThrottlingEntity | null;\r\n\r\n    /**\r\n     * set throttling entity to the platform cache\r\n     * @param throttlingCacheKey\r\n     * @param throttlingCache\r\n     */\r\n    abstract setThrottlingCache(throttlingCacheKey: string, throttlingCache: ThrottlingEntity): void;;\r\n\r\n    /**\r\n     * Function to remove an item from cache given its key.\r\n     * @param key\r\n     */\r\n    abstract removeItem(key: string, type?: string): boolean;\r\n\r\n    /**\r\n     * Function which returns boolean whether cache contains a specific key.\r\n     * @param key\r\n     */\r\n    abstract containsKey(key: string, type?: string): boolean;\r\n\r\n    /**\r\n     * Function which retrieves all current keys from the cache.\r\n     */\r\n    abstract getKeys(): string[];\r\n\r\n    /**\r\n     * Function which clears cache.\r\n     */\r\n    abstract clear(): void;\r\n\r\n    /**\r\n     * Returns all accounts in cache\r\n     */\r\n    getAllAccounts(): AccountInfo[] {\r\n        const currentAccounts: AccountCache = this.getAccountsFilteredBy();\r\n        const accountValues: AccountEntity[] = Object.keys(currentAccounts).map(accountKey => currentAccounts[accountKey]);\r\n        const numAccounts = accountValues.length;\r\n        if (numAccounts < 1) {\r\n            return [];\r\n        } else {\r\n            const allAccounts = accountValues.map<AccountInfo>((value) => {\r\n                const accountEntity = CacheManager.toObject<AccountEntity>(new AccountEntity(), value);\r\n                const accountInfo = accountEntity.getAccountInfo();\r\n                const idToken = this.readIdTokenFromCache(this.clientId, accountInfo);\r\n                if (idToken && !accountInfo.idTokenClaims) {\r\n                    accountInfo.idTokenClaims = new AuthToken(idToken.secret, this.cryptoImpl).claims;\r\n                }\r\n\r\n                return accountInfo;\r\n                \r\n            });\r\n            return allAccounts;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord\r\n     */\r\n    saveCacheRecord(cacheRecord: CacheRecord): void {\r\n        if (!cacheRecord) {\r\n            throw ClientAuthError.createNullOrUndefinedCacheRecord();\r\n        }\r\n\r\n        if (!!cacheRecord.account) {\r\n            this.setAccount(cacheRecord.account);\r\n        }\r\n\r\n        if (!!cacheRecord.idToken) {\r\n            this.setIdTokenCredential(cacheRecord.idToken);\r\n        }\r\n\r\n        if (!!cacheRecord.accessToken) {\r\n            this.saveAccessToken(cacheRecord.accessToken);\r\n        }\r\n\r\n        if (!!cacheRecord.refreshToken) {\r\n            this.setRefreshTokenCredential(cacheRecord.refreshToken);\r\n        }\r\n\r\n        if (!!cacheRecord.appMetadata) {\r\n            this.setAppMetadata(cacheRecord.appMetadata);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */\r\n    private saveAccessToken(credential: AccessTokenEntity): void {\r\n        const currentTokenCache = this.getCredentialsFilteredBy({\r\n            clientId: credential.clientId,\r\n            credentialType: credential.credentialType,\r\n            environment: credential.environment,\r\n            homeAccountId: credential.homeAccountId,\r\n            realm: credential.realm,\r\n        });\r\n        const currentScopes = ScopeSet.fromString(credential.target);\r\n        const currentAccessTokens: AccessTokenEntity[] = Object.keys(currentTokenCache.accessTokens).map(key => currentTokenCache.accessTokens[key]);\r\n        if (currentAccessTokens) {\r\n            currentAccessTokens.forEach((tokenEntity) => {\r\n                const tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\r\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\r\n                    this.removeCredential(tokenEntity);\r\n                }\r\n            });\r\n        }\r\n        this.setAccessTokenCredential(credential);\r\n    }\r\n\r\n    /**\r\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param realm\r\n     */\r\n    getAccountsFilteredBy(accountFilter?: AccountFilter): AccountCache {\r\n        return this.getAccountsFilteredByInternal(\r\n            accountFilter ? accountFilter.homeAccountId : \"\",\r\n            accountFilter ? accountFilter.environment : \"\",\r\n            accountFilter ? accountFilter.realm : \"\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * retrieve accounts matching all provided filters; if no filter is set, get all accounts\r\n     * not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param realm\r\n     */\r\n    private getAccountsFilteredByInternal(\r\n        homeAccountId?: string,\r\n        environment?: string,\r\n        realm?: string\r\n    ): AccountCache {\r\n        const allCacheKeys = this.getKeys();\r\n        const matchingAccounts: AccountCache = {};\r\n\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            const entity: AccountEntity | null = this.getAccount(cacheKey);\r\n\r\n            if (!entity) {\r\n                return;\r\n            }\r\n\r\n            if (!!homeAccountId && !this.matchHomeAccountId(entity, homeAccountId)) {\r\n                return;\r\n            }\r\n\r\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n\r\n            if (!!realm && !this.matchRealm(entity, realm)) {\r\n                return;\r\n            }\r\n\r\n            matchingAccounts[cacheKey] = entity;\r\n        });\r\n\r\n        return matchingAccounts;\r\n    }\r\n\r\n    /**\r\n     * retrieve credentails matching all provided filters; if no filter is set, get all credentials\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param credentialType\r\n     * @param clientId\r\n     * @param realm\r\n     * @param target\r\n     */\r\n    getCredentialsFilteredBy(filter: CredentialFilter): CredentialCache {\r\n        return this.getCredentialsFilteredByInternal(\r\n            filter.homeAccountId,\r\n            filter.environment,\r\n            filter.credentialType,\r\n            filter.clientId,\r\n            filter.familyId,\r\n            filter.realm,\r\n            filter.target,\r\n            filter.oboAssertion\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Support function to help match credentials\r\n     * @param homeAccountId\r\n     * @param environment\r\n     * @param credentialType\r\n     * @param clientId\r\n     * @param realm\r\n     * @param target\r\n     */\r\n    private getCredentialsFilteredByInternal(\r\n        homeAccountId?: string,\r\n        environment?: string,\r\n        credentialType?: string,\r\n        clientId?: string,\r\n        familyId?: string,\r\n        realm?: string,\r\n        target?: string,\r\n        oboAssertion?: string\r\n    ): CredentialCache {\r\n        const allCacheKeys = this.getKeys();\r\n        const matchingCredentials: CredentialCache = {\r\n            idTokens: {},\r\n            accessTokens: {},\r\n            refreshTokens: {},\r\n        };\r\n        \r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-credential type cache entities\r\n            const credType = CredentialEntity.getCredentialType(cacheKey);\r\n\r\n            if (credType === Constants.NOT_DEFINED) {\r\n                return;\r\n            }\r\n\r\n            // Attempt retrieval\r\n            const entity = this.getSpecificCredential(cacheKey, credType);\r\n\r\n            if (!entity) {\r\n                return;\r\n            }\r\n\r\n            if (!!oboAssertion && !this.matchOboAssertion(entity, oboAssertion)) {\r\n                return;\r\n            }\r\n\r\n            if (!!homeAccountId && !this.matchHomeAccountId(entity, homeAccountId)) {\r\n                return;\r\n            }\r\n\r\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n\r\n            if (!!realm && !this.matchRealm(entity, realm)) {\r\n                return;\r\n            }\r\n\r\n            if (!!credentialType && !this.matchCredentialType(entity, credentialType)) {\r\n                return;\r\n            }\r\n\r\n            if (!!clientId && !this.matchClientId(entity, clientId)) {\r\n                return;\r\n            }\r\n\r\n            if (!!familyId && !this.matchFamilyId(entity, familyId)) {\r\n                return;\r\n            }\r\n\r\n            /*\r\n             * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n             * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n             */\r\n            if (!!target && !this.matchTarget(entity, target)) {\r\n                return;\r\n            }\r\n\r\n            switch (credType) {\r\n                case CredentialType.ID_TOKEN:\r\n                    matchingCredentials.idTokens[cacheKey] = entity as IdTokenEntity;\r\n                    break;\r\n                case CredentialType.ACCESS_TOKEN:\r\n                case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME:\r\n                    matchingCredentials.accessTokens[cacheKey] = entity as AccessTokenEntity;\r\n                    break;\r\n                case CredentialType.REFRESH_TOKEN:\r\n                    matchingCredentials.refreshTokens[cacheKey] = entity as RefreshTokenEntity;\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return matchingCredentials;\r\n    }\r\n\r\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */\r\n    getAppMetadataFilteredBy(filter: AppMetadataFilter): AppMetadataCache {\r\n        return this.getAppMetadataFilteredByInternal(\r\n            filter.environment,\r\n            filter.clientId,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Support function to help match appMetadata\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    private getAppMetadataFilteredByInternal(\r\n        environment?: string,\r\n        clientId?: string\r\n    ): AppMetadataCache {\r\n\r\n        const allCacheKeys = this.getKeys();\r\n        const matchingAppMetadata: AppMetadataCache = {};\r\n\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-appMetadata type cache entities\r\n            if (!this.isAppMetadata(cacheKey)) {\r\n                return;\r\n            }\r\n\r\n            // Attempt retrieval\r\n            const entity = this.getAppMetadata(cacheKey);\r\n\r\n            if (!entity) {\r\n                return;\r\n            }\r\n\r\n            if (!!environment && !this.matchEnvironment(entity, environment)) {\r\n                return;\r\n            }\r\n\r\n            if (!!clientId && !this.matchClientId(entity, clientId)) {\r\n                return;\r\n            }\r\n\r\n            matchingAppMetadata[cacheKey] = entity;\r\n\r\n        });\r\n\r\n        return matchingAppMetadata;\r\n    }\r\n\r\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */\r\n    getAuthorityMetadataByAlias(host: string): AuthorityMetadataEntity | null {\r\n        const allCacheKeys = this.getAuthorityMetadataKeys();\r\n        let matchedEntity = null;\r\n\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-authorityMetadata type cache entities\r\n            if (!this.isAuthorityMetadata(cacheKey) || cacheKey.indexOf(this.clientId) === -1) {\r\n                return;\r\n            }\r\n\r\n            // Attempt retrieval\r\n            const entity = this.getAuthorityMetadata(cacheKey);\r\n\r\n            if (!entity) {\r\n                return;\r\n            }\r\n\r\n            if (entity.aliases.indexOf(host) === -1) {\r\n                return;\r\n            }\r\n\r\n            matchedEntity = entity;\r\n\r\n        });\r\n        \r\n        return matchedEntity;\r\n    }\r\n\r\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */\r\n    removeAllAccounts(): boolean {\r\n        const allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            const entity = this.getAccount(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            this.removeAccount(cacheKey);\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * returns a boolean if the given account is removed\r\n     * @param account\r\n     */\r\n    removeAccount(accountKey: string): boolean {\r\n        const account = this.getAccount(accountKey);\r\n        if (!account) {\r\n            throw ClientAuthError.createNoAccountFoundError();\r\n        }\r\n        return (this.removeAccountContext(account) && this.removeItem(accountKey, CacheSchemaType.ACCOUNT));\r\n    }\r\n\r\n    /**\r\n     * returns a boolean if the given account is removed\r\n     * @param account\r\n     */\r\n    removeAccountContext(account: AccountEntity): boolean {\r\n        const allCacheKeys = this.getKeys();\r\n        const accountId = account.generateAccountId();\r\n\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-credential type cache entities\r\n            const credType = CredentialEntity.getCredentialType(cacheKey);\r\n            if (credType === Constants.NOT_DEFINED) {\r\n                return;\r\n            }\r\n\r\n            const cacheEntity = this.getSpecificCredential(cacheKey, credType);\r\n            if (!!cacheEntity && accountId === cacheEntity.generateAccountId()) {\r\n                this.removeCredential(cacheEntity);\r\n            }\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * returns a boolean if the given credential is removed\r\n     * @param credential\r\n     */\r\n    removeCredential(credential: CredentialEntity): boolean {\r\n        const key = credential.generateCredentialKey();\r\n        return this.removeItem(key, CacheSchemaType.CREDENTIAL);\r\n    }\r\n\r\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */\r\n    removeAppMetadata(): boolean {\r\n        const allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            if (this.isAppMetadata(cacheKey)) {\r\n                this.removeItem(cacheKey, CacheSchemaType.APP_METADATA);\r\n            }\r\n        });\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Retrieve the cached credentials into a cacherecord\r\n     * @param account\r\n     * @param clientId\r\n     * @param scopes\r\n     * @param environment\r\n     * @param authScheme\r\n     */\r\n    readCacheRecord(account: AccountInfo, clientId: string, scopes: ScopeSet, environment: string, authScheme: AuthenticationScheme): CacheRecord {\r\n        const cachedAccount = this.readAccountFromCache(account);\r\n        const cachedIdToken = this.readIdTokenFromCache(clientId, account);\r\n        const cachedAccessToken = this.readAccessTokenFromCache(clientId, account, scopes, authScheme);\r\n        const cachedRefreshToken = this.readRefreshTokenFromCache(clientId, account, false);\r\n        const cachedAppMetadata = this.readAppMetadataFromCache(environment, clientId);\r\n\r\n        if (cachedAccount && cachedIdToken) {\r\n            cachedAccount.idTokenClaims = new AuthToken(cachedIdToken.secret, this.cryptoImpl).claims;\r\n        }\r\n\r\n        return {\r\n            account: cachedAccount,\r\n            idToken: cachedIdToken,\r\n            accessToken: cachedAccessToken,\r\n            refreshToken: cachedRefreshToken,\r\n            appMetadata: cachedAppMetadata,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Retrieve AccountEntity from cache\r\n     * @param account\r\n     */\r\n    readAccountFromCache(account: AccountInfo): AccountEntity | null {\r\n        const accountKey: string = AccountEntity.generateAccountCacheKey(account);\r\n        return this.getAccount(accountKey);\r\n    }\r\n\r\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param inputRealm\r\n     */\r\n    readIdTokenFromCache(clientId: string, account: AccountInfo): IdTokenEntity | null {\r\n        const idTokenFilter: CredentialFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: clientId,\r\n            realm: account.tenantId,\r\n        };\r\n\r\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(idTokenFilter);\r\n        const idTokens = Object.keys(credentialCache.idTokens).map((key) => credentialCache.idTokens[key]);\r\n        const numIdTokens = idTokens.length;\r\n\r\n        if (numIdTokens < 1) {\r\n            return null;\r\n        } else if (numIdTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n\r\n        return idTokens[0] as IdTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param scopes\r\n     * @param authScheme\r\n     */\r\n    readAccessTokenFromCache(clientId: string, account: AccountInfo, scopes: ScopeSet, authScheme: AuthenticationScheme): AccessTokenEntity | null {\r\n        const credentialType = (authScheme === AuthenticationScheme.POP) ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME : CredentialType.ACCESS_TOKEN;\r\n\r\n        const accessTokenFilter: CredentialFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: credentialType,\r\n            clientId,\r\n            realm: account.tenantId,\r\n            target: scopes.printScopesLowerCase(),\r\n        };\r\n\r\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(accessTokenFilter);\r\n\r\n        const accessTokens = Object.keys(credentialCache.accessTokens).map((key) => credentialCache.accessTokens[key]);\r\n\r\n        const numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        } else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n\r\n        return accessTokens[0] as AccessTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param clientId\r\n     * @param account\r\n     * @param familyRT\r\n     */\r\n    readRefreshTokenFromCache(clientId: string, account: AccountInfo, familyRT: boolean): RefreshTokenEntity | null {\r\n        const id = familyRT ? THE_FAMILY_ID : undefined;\r\n        const refreshTokenFilter: CredentialFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.REFRESH_TOKEN,\r\n            clientId: clientId,\r\n            familyId: id\r\n        };\r\n\r\n        const credentialCache: CredentialCache = this.getCredentialsFilteredBy(refreshTokenFilter);\r\n        const refreshTokens = Object.keys(credentialCache.refreshTokens).map((key) => credentialCache.refreshTokens[key]);\r\n\r\n        const numRefreshTokens = refreshTokens.length;\r\n        if (numRefreshTokens < 1) {\r\n            return null;\r\n        }\r\n        // address the else case after remove functions address environment aliases\r\n\r\n        return refreshTokens[0] as RefreshTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */\r\n    readAppMetadataFromCache(environment: string, clientId: string): AppMetadataEntity | null {\r\n        const appMetadataFilter: AppMetadataFilter = {\r\n            environment,\r\n            clientId,\r\n        };\r\n\r\n        const appMetadata: AppMetadataCache = this.getAppMetadataFilteredBy(appMetadataFilter);\r\n        const appMetadataEntries: AppMetadataEntity[] = Object.keys(appMetadata).map((key) => appMetadata[key]);\r\n\r\n        const numAppMetadata = appMetadataEntries.length;\r\n        if (numAppMetadata < 1) {\r\n            return null;\r\n        } else if (numAppMetadata > 1) {\r\n            throw ClientAuthError.createMultipleMatchingAppMetadataInCacheError();\r\n        }\r\n\r\n        return appMetadataEntries[0] as AppMetadataEntity;\r\n    }\r\n\r\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    isAppMetadataFOCI(environment: string, clientId: string): boolean {\r\n        const appMetadata = this.readAppMetadataFromCache(environment, clientId);\r\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\r\n    }\r\n\r\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */\r\n    private matchHomeAccountId(entity: AccountEntity | CredentialEntity, homeAccountId: string): boolean {\r\n        return !!(entity.homeAccountId && homeAccountId === entity.homeAccountId);\r\n    }\r\n\r\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */\r\n    private matchOboAssertion(entity: AccountEntity | CredentialEntity, oboAssertion: string): boolean {\r\n        return !!(entity.oboAssertion && oboAssertion === entity.oboAssertion);\r\n    }\r\n\r\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */\r\n    private matchEnvironment(entity: AccountEntity | CredentialEntity | AppMetadataEntity, environment: string): boolean {\r\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\r\n        if (cloudMetadata && cloudMetadata.aliases.indexOf(entity.environment) > -1) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */\r\n    private matchCredentialType(entity: CredentialEntity, credentialType: string): boolean {\r\n        return (entity.credentialType && credentialType.toLowerCase() === entity.credentialType.toLowerCase());\r\n    }\r\n\r\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */\r\n    private matchClientId(entity: CredentialEntity | AppMetadataEntity, clientId: string): boolean {\r\n        return !!(entity.clientId && clientId === entity.clientId);\r\n    }\r\n\r\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */\r\n    private matchFamilyId(entity: CredentialEntity | AppMetadataEntity, familyId: string): boolean {\r\n        return !!(entity.familyId && familyId === entity.familyId);\r\n    }\r\n\r\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */\r\n    private matchRealm(entity: AccountEntity | CredentialEntity, realm: string): boolean {\r\n        return !!(entity.realm && realm === entity.realm);\r\n    }\r\n\r\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */\r\n    private matchTarget(entity: CredentialEntity, target: string): boolean {\r\n        const isNotAccessTokenCredential = (entity.credentialType !== CredentialType.ACCESS_TOKEN && entity.credentialType !== CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME);\r\n\r\n        if ( isNotAccessTokenCredential || !entity.target) {\r\n            return false;\r\n        }\r\n\r\n        const entityScopeSet: ScopeSet = ScopeSet.fromString(entity.target);\r\n        const requestTargetScopeSet: ScopeSet = ScopeSet.fromString(target);\r\n\r\n        if (!requestTargetScopeSet.containsOnlyOIDCScopes()) {\r\n            requestTargetScopeSet.removeOIDCScopes(); // ignore OIDC scopes\r\n        } else {\r\n            requestTargetScopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\r\n        }\r\n        return entityScopeSet.containsScopeSet(requestTargetScopeSet);\r\n    }\r\n\r\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */\r\n    private isAppMetadata(key: string): boolean {\r\n        return key.indexOf(APP_METADATA) !== -1;\r\n    }\r\n\r\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */\r\n    protected isAuthorityMetadata(key: string): boolean {\r\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\r\n    }\r\n\r\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */\r\n    generateAuthorityMetadataCacheKey(authority: string): string {\r\n        return `${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\r\n    }\r\n\r\n    /**\r\n     * Returns the specific credential (IdToken/AccessToken/RefreshToken) from the cache\r\n     * @param key\r\n     * @param credType\r\n     */\r\n    private getSpecificCredential(key: string, credType: string): ValidCredentialType | null {\r\n        switch (credType) {\r\n            case CredentialType.ID_TOKEN: {\r\n                return this.getIdTokenCredential(key);\r\n            }\r\n            case CredentialType.ACCESS_TOKEN:\r\n            case CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME: {\r\n                return this.getAccessTokenCredential(key);\r\n            }\r\n            case CredentialType.REFRESH_TOKEN: {\r\n                return this.getRefreshTokenCredential(key);\r\n            }\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */\r\n    static toObject<T>(obj: T, json: object): T {\r\n        for (const propertyName in json) {\r\n            obj[propertyName] = json[propertyName];\r\n        }\r\n        return obj;\r\n    }\r\n}\r\n\r\nexport class DefaultStorageClass extends CacheManager {\r\n    setAccount(): void {\r\n        const notImplErr = \"Storage interface - setAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAccount(): AccountEntity {\r\n        const notImplErr = \"Storage interface - getAccount() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setIdTokenCredential(): void {\r\n        const notImplErr = \"Storage interface - setIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getIdTokenCredential(): IdTokenEntity {\r\n        const notImplErr = \"Storage interface - getIdTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setAccessTokenCredential(): void {\r\n        const notImplErr = \"Storage interface - setAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAccessTokenCredential(): AccessTokenEntity {\r\n        const notImplErr = \"Storage interface - getAccessTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setRefreshTokenCredential(): void {\r\n        const notImplErr = \"Storage interface - setRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getRefreshTokenCredential(): RefreshTokenEntity {\r\n        const notImplErr = \"Storage interface - getRefreshTokenCredential() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setAppMetadata(): void {\r\n        const notImplErr = \"Storage interface - setAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAppMetadata(): AppMetadataEntity {\r\n        const notImplErr = \"Storage interface - getAppMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setServerTelemetry(): void {\r\n        const notImplErr = \"Storage interface - setServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getServerTelemetry(): ServerTelemetryEntity {\r\n        const notImplErr = \"Storage interface - getServerTelemetry() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setAuthorityMetadata(): void {\r\n        const notImplErr = \"Storage interface - setAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAuthorityMetadata(): AuthorityMetadataEntity | null {\r\n        const notImplErr = \"Storage interface - getAuthorityMetadata() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getAuthorityMetadataKeys(): Array<string> {\r\n        const notImplErr = \"Storage interface - getAuthorityMetadataKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    setThrottlingCache(): void {\r\n        const notImplErr = \"Storage interface - setThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getThrottlingCache(): ThrottlingEntity {\r\n        const notImplErr = \"Storage interface - getThrottlingCache() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    removeItem(): boolean {\r\n        const notImplErr = \"Storage interface - removeItem() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    containsKey(): boolean {\r\n        const notImplErr = \"Storage interface - containsKey() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    getKeys(): string[] {\r\n        const notImplErr = \"Storage interface - getKeys() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n    clear(): void {\r\n        const notImplErr = \"Storage interface - clear() has not been implemented for the cacheStorage interface.\";\r\n        throw AuthError.createUnexpectedError(notImplErr);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}