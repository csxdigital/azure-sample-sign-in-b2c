{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { DatabaseStorage } from '../cache/DatabaseStorage.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\nvar CryptoOps = /** @class */function () {\n  function CryptoOps() {\n    // Browser crypto needs to be validated first before any other classes can be set.\n    this.browserCrypto = new BrowserCrypto();\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = new DatabaseStorage(CryptoOps.DB_NAME, CryptoOps.TABLE_NAME, CryptoOps.DB_VERSION);\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkBuffer, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n          case 1:\n            keyPair = _a.sent();\n            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.publicKey)];\n          case 2:\n            publicKeyJwk = _a.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserCrypto.getJwkString(pubKeyThumprintObj);\n            return [4 /*yield*/, this.browserCrypto.sha256Digest(publicJwkString)];\n          case 3:\n            publicJwkBuffer = _a.sent();\n            publicJwkHash = this.b64Encode.urlEncodeArr(new Uint8Array(publicJwkBuffer));\n            return [4 /*yield*/, this.browserCrypto.exportJwk(keyPair.privateKey)];\n          case 4:\n            privateKeyJwk = _a.sent();\n            return [4 /*yield*/, this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n          case 5:\n            unextractablePrivateKey = _a.sent();\n            // Store Keypair data in keystore\n            this.cache.put(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            });\n            return [2 /*return*/, publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n  CryptoOps.prototype.signJwt = function (payload, kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedKeyPair, publicKeyJwk, publicKeyJwkString, header, encodedHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cache.get(kid)];\n          case 1:\n            cachedKeyPair = _a.sent();\n            return [4 /*yield*/, this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n          case 2:\n            publicKeyJwk = _a.sent();\n            publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\n            header = {\n              alg: publicKeyJwk.alg,\n              type: KEY_FORMAT_JWK\n            };\n            encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header));\n            // Generate payload\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4 /*yield*/, this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n          case 3:\n            signatureBuffer = _a.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            return [2 /*return*/, tokenString + \".\" + encodedSignature];\n        }\n      });\n    });\n  };\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  CryptoOps.DB_VERSION = 1;\n  CryptoOps.DB_NAME = \"msal.db\";\n  CryptoOps.TABLE_NAME = CryptoOps.DB_NAME + \".keys\";\n  return CryptoOps;\n}();\nexport { CryptoOps };","map":{"version":3,"mappings":"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","names":["browserCrypto","BrowserCrypto","b64Encode","Base64Encode","b64Decode","Base64Decode","guidGenerator","GuidGenerator","pkceGenerator","PkceGenerator","cache","DatabaseStorage","CryptoOps","DB_NAME","TABLE_NAME","DB_VERSION","generateGuid","input","encode","decode","generateCodes","request","generateKeyPair","EXTRACTABLE","POP_KEY_USAGES","keyPair","_a","exportJwk","publicKey","publicKeyJwk","pubKeyThumprintObj","e","kty","n","publicJwkString","getJwkString","sha256Digest","publicJwkBuffer","publicJwkHash","urlEncodeArr","Uint8Array","privateKey","privateKeyJwk","importJwk","unextractablePrivateKey","put","requestMethod","resourceRequestMethod","requestUri","resourceRequestUri","payload","kid","get","cachedKeyPair","publicKeyJwkString","header","alg","type","KEY_FORMAT_JWK","encodedHeader","urlEncode","JSON","stringify","cnf","jwk","parse","encodedPayload","tokenString","tokenBuffer","BrowserStringUtils","stringToArrayBuffer","sign","signatureBuffer","encodedSignature"],"sources":["../../src/crypto/CryptoOps.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseAuthRequest, ICrypto, PkceCodes, SignedHttpRequest } from \"@azure/msal-common\";\r\nimport { GuidGenerator } from \"./GuidGenerator\";\r\nimport { Base64Encode } from \"../encode/Base64Encode\";\r\nimport { Base64Decode } from \"../encode/Base64Decode\";\r\nimport { PkceGenerator } from \"./PkceGenerator\";\r\nimport { BrowserCrypto } from \"./BrowserCrypto\";\r\nimport { DatabaseStorage } from \"../cache/DatabaseStorage\";\r\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\r\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\r\n\r\nexport type CachedKeyPair = {\r\n    publicKey: CryptoKey,\r\n    privateKey: CryptoKey,\r\n    requestMethod?: string,\r\n    requestUri?: string\r\n};\r\n\r\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and \r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\r\nexport class CryptoOps implements ICrypto {\r\n\r\n    private browserCrypto: BrowserCrypto;\r\n    private guidGenerator: GuidGenerator;\r\n    private b64Encode: Base64Encode;\r\n    private b64Decode: Base64Decode;\r\n    private pkceGenerator: PkceGenerator;\r\n\r\n    private static POP_KEY_USAGES: Array<KeyUsage> = [\"sign\", \"verify\"];\r\n    private static EXTRACTABLE: boolean = true;\r\n\r\n    private static DB_VERSION = 1;\r\n    private static DB_NAME = \"msal.db\";\r\n    private static TABLE_NAME =`${CryptoOps.DB_NAME}.keys`;\r\n    private cache: DatabaseStorage<CachedKeyPair>;\r\n\r\n    constructor() {\r\n        // Browser crypto needs to be validated first before any other classes can be set.\r\n        this.browserCrypto = new BrowserCrypto();\r\n        this.b64Encode = new Base64Encode();\r\n        this.b64Decode = new Base64Decode();\r\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\r\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\r\n        this.cache = new DatabaseStorage(CryptoOps.DB_NAME, CryptoOps.TABLE_NAME, CryptoOps.DB_VERSION);\r\n    }\r\n\r\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */\r\n    createNewGuid(): string {\r\n        return this.guidGenerator.generateGuid();\r\n    }\r\n\r\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input \r\n     */\r\n    base64Encode(input: string): string {\r\n        return this.b64Encode.encode(input);\r\n    }    \r\n    \r\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input \r\n     */\r\n    base64Decode(input: string): string {\r\n        return this.b64Decode.decode(input);\r\n    }\r\n\r\n    /**\r\n     * Generates PKCE codes used in Authorization Code Flow.\r\n     */\r\n    async generatePkceCodes(): Promise<PkceCodes> {\r\n        return this.pkceGenerator.generateCodes();\r\n    }\r\n\r\n    /**\r\n     * Generates a keypair, stores it and returns a thumbprint\r\n     * @param request\r\n     */\r\n    async getPublicKeyThumbprint(request: BaseAuthRequest): Promise<string> {\r\n        // Generate Keypair\r\n        const keyPair = await this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\r\n\r\n        // Generate Thumbprint for Public Key\r\n        const publicKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.publicKey);\r\n        const pubKeyThumprintObj: JsonWebKey = {\r\n            e: publicKeyJwk.e,\r\n            kty: publicKeyJwk.kty,\r\n            n: publicKeyJwk.n\r\n        };\r\n        const publicJwkString: string = BrowserCrypto.getJwkString(pubKeyThumprintObj);\r\n        const publicJwkBuffer: ArrayBuffer = await this.browserCrypto.sha256Digest(publicJwkString);\r\n        const publicJwkHash: string = this.b64Encode.urlEncodeArr(new Uint8Array(publicJwkBuffer));\r\n\r\n        // Generate Thumbprint for Private Key\r\n        const privateKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.privateKey);\r\n        // Re-import private key to make it unextractable\r\n        const unextractablePrivateKey: CryptoKey = await this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\r\n\r\n        // Store Keypair data in keystore\r\n        this.cache.put(publicJwkHash, {\r\n            privateKey: unextractablePrivateKey,\r\n            publicKey: keyPair.publicKey,\r\n            requestMethod: request.resourceRequestMethod,\r\n            requestUri: request.resourceRequestUri\r\n        });\r\n\r\n        return publicJwkHash;\r\n    }\r\n\r\n    /**\r\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n     * @param payload \r\n     * @param kid \r\n     */\r\n    async signJwt(payload: SignedHttpRequest, kid: string): Promise<string> {\r\n        // Get keypair from cache\r\n        const cachedKeyPair: CachedKeyPair = await this.cache.get(kid);\r\n\r\n        // Get public key as JWK\r\n        const publicKeyJwk = await this.browserCrypto.exportJwk(cachedKeyPair.publicKey);\r\n        const publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\r\n\r\n        // Generate header\r\n        const header = {\r\n            alg: publicKeyJwk.alg,\r\n            type: KEY_FORMAT_JWK\r\n        };\r\n        const encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header));\r\n\r\n        // Generate payload\r\n        payload.cnf = {\r\n            jwk: JSON.parse(publicKeyJwkString)\r\n        };\r\n        const encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\r\n\r\n        // Form token string\r\n        const tokenString = `${encodedHeader}.${encodedPayload}`;\r\n\r\n        // Sign token\r\n        const tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\r\n        const signatureBuffer = await this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer);\r\n        const encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\r\n\r\n        return `${tokenString}.${encodedSignature}`;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}