{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { LogLevel } from \"@azure/msal-browser\";\n/**\n * Enter here the user flows and custom policies for your B2C application\n * To learn more about user flows, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/user-flow-overview\n * To learn more about custom policies, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/custom-policy-overview\n */\n\nexport const b2cPolicies = {\n  names: {\n    signUpSignIn: \"b2c_1_susi\",\n    forgotPassword: \"b2c_1_reset\",\n    editProfile: \"b2c_1_edit_profile\"\n  },\n  authorities: {\n    signUpSignIn: {\n      authority: \"https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/b2c_1_susi\"\n    },\n    forgotPassword: {\n      authority: \"https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/b2c_1_reset\"\n    },\n    editProfile: {\n      authority: \"https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/b2c_1_edit_profile\"\n    }\n  },\n  authorityDomain: \"fabrikamb2c.b2clogin.com\"\n};\n/**\n * Configuration object to be passed to MSAL instance on creation. \n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md \n */\n\nexport const msalConfig = {\n  auth: {\n    clientId: \"2fdd06f3-7b34-49a3-a78b-0cf1dd87878e\",\n    // This is the ONLY mandatory field that you need to supply.\n    authority: b2cPolicies.authorities.signUpSignIn.authority,\n    // Choose SUSI as your default authority.\n    knownAuthorities: [b2cPolicies.authorityDomain],\n    // Mark your B2C tenant's domain as trusted.\n    redirectUri: \"/\",\n    // You must register this URI on Azure Portal/App Registration. Defaults to window.location.origin\n    postLogoutRedirectUri: \"/\",\n    // Indicates the page to navigate after logout.\n    navigateToLoginRequestUrl: false // If \"true\", will navigate back to the original request location before processing the auth code response.\n\n  },\n  cache: {\n    cacheLocation: \"sessionStorage\",\n    // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n    storeAuthStateInCookie: false // Set this to \"true\" if you are having issues on IE11 or Edge\n\n  },\n  system: {\n    loggerOptions: {\n      loggerCallback: (level, message, containsPii) => {\n        if (containsPii) {\n          return;\n        }\n\n        switch (level) {\n          case LogLevel.Error:\n            console.error(message);\n            return;\n\n          case LogLevel.Info:\n            console.info(message);\n            return;\n\n          case LogLevel.Verbose:\n            console.debug(message);\n            return;\n\n          case LogLevel.Warning:\n            console.warn(message);\n            return;\n        }\n      }\n    }\n  }\n};\n/**\n * Add here the endpoints and scopes when obtaining an access token for protected web APIs. For more information, see:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md\n */\n\nexport const protectedResources = {\n  apiHello: {\n    endpoint: \"http://localhost:5000/hello\",\n    scopes: [\"https://fabrikamb2c.onmicrosoft.com/helloapi/demo.read\"] // e.g. api://xxxxxx/access_as_user\n\n  }\n};\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit: \n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\n\nexport const loginRequest = {\n  scopes: [...protectedResources.apiHello.scopes]\n};","map":{"version":3,"sources":["/home/nicolasgou/dev/ms-identity-javascript-react-tutorial/3-Authorization-II/2-call-api-b2c/SPA/src/authConfig.js"],"names":["LogLevel","b2cPolicies","names","signUpSignIn","forgotPassword","editProfile","authorities","authority","authorityDomain","msalConfig","auth","clientId","knownAuthorities","redirectUri","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","Error","console","error","Info","info","Verbose","debug","Warning","warn","protectedResources","apiHello","endpoint","scopes","loginRequest"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,qBAAzB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,YAAY,EAAE,YADX;AAEHC,IAAAA,cAAc,EAAE,aAFb;AAGHC,IAAAA,WAAW,EAAE;AAHV,GADgB;AAMvBC,EAAAA,WAAW,EAAE;AACTH,IAAAA,YAAY,EAAE;AACVI,MAAAA,SAAS,EAAE;AADD,KADL;AAITH,IAAAA,cAAc,EAAE;AACZG,MAAAA,SAAS,EAAE;AADC,KAJP;AAOTF,IAAAA,WAAW,EAAE;AACTE,MAAAA,SAAS,EAAE;AADF;AAPJ,GANU;AAiBvBC,EAAAA,eAAe,EAAE;AAjBM,CAApB;AAqBP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG;AACtBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAE,sCADR;AACgD;AAClDJ,IAAAA,SAAS,EAAEN,WAAW,CAACK,WAAZ,CAAwBH,YAAxB,CAAqCI,SAF9C;AAEyD;AAC3DK,IAAAA,gBAAgB,EAAE,CAACX,WAAW,CAACO,eAAb,CAHhB;AAG+C;AACjDK,IAAAA,WAAW,EAAE,GAJX;AAIgB;AAClBC,IAAAA,qBAAqB,EAAE,GALrB;AAK0B;AAC5BC,IAAAA,yBAAyB,EAAE,KANzB,CAMgC;;AANhC,GADgB;AAStBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,aAAa,EAAE,gBADZ;AAC8B;AACjCC,IAAAA,sBAAsB,EAAE,KAFrB,CAE4B;;AAF5B,GATe;AAatBC,EAAAA,MAAM,EAAE;AACJC,IAAAA,aAAa,EAAE;AACXC,MAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,OAAR,EAAiBC,WAAjB,KAAiC;AAC7C,YAAIA,WAAJ,EAAiB;AACb;AACH;;AACD,gBAAQF,KAAR;AACI,eAAKtB,QAAQ,CAACyB,KAAd;AACIC,YAAAA,OAAO,CAACC,KAAR,CAAcJ,OAAd;AACA;;AACJ,eAAKvB,QAAQ,CAAC4B,IAAd;AACIF,YAAAA,OAAO,CAACG,IAAR,CAAaN,OAAb;AACA;;AACJ,eAAKvB,QAAQ,CAAC8B,OAAd;AACIJ,YAAAA,OAAO,CAACK,KAAR,CAAcR,OAAd;AACA;;AACJ,eAAKvB,QAAQ,CAACgC,OAAd;AACIN,YAAAA,OAAO,CAACO,IAAR,CAAaV,OAAb;AACA;AAZR;AAcH;AAnBU;AADX;AAbc,CAAnB;AAsCP;AACA;AACA;AACA;;AACA,OAAO,MAAMW,kBAAkB,GAAG;AAC9BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,EAAE,6BADJ;AAENC,IAAAA,MAAM,EAAE,CAAC,wDAAD,CAFF,CAE8D;;AAF9D;AADoB,CAA3B;AAOP;AACA;AACA;AACA;AACA;AACA;;AACC,OAAO,MAAMC,YAAY,GAAG;AACzBD,EAAAA,MAAM,EAAE,CAAC,GAAGH,kBAAkB,CAACC,QAAnB,CAA4BE,MAAhC;AADiB,CAArB","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { LogLevel } from \"@azure/msal-browser\";\n\n/**\n * Enter here the user flows and custom policies for your B2C application\n * To learn more about user flows, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/user-flow-overview\n * To learn more about custom policies, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/custom-policy-overview\n */\nexport const b2cPolicies = {\n    names: {\n        signUpSignIn: \"b2c_1_susi\",\n        forgotPassword: \"b2c_1_reset\",\n        editProfile: \"b2c_1_edit_profile\"\n    },\n    authorities: {\n        signUpSignIn: {\n            authority: \"https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/b2c_1_susi\",\n        },\n        forgotPassword: {\n            authority: \"https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/b2c_1_reset\",\n        },\n        editProfile: {\n            authority: \"https://fabrikamb2c.b2clogin.com/fabrikamb2c.onmicrosoft.com/b2c_1_edit_profile\"\n        }\n    },\n    authorityDomain: \"fabrikamb2c.b2clogin.com\"\n}\n\n\n/**\n * Configuration object to be passed to MSAL instance on creation. \n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md \n */\nexport const msalConfig = {\n    auth: {\n        clientId: \"2fdd06f3-7b34-49a3-a78b-0cf1dd87878e\", // This is the ONLY mandatory field that you need to supply.\n        authority: b2cPolicies.authorities.signUpSignIn.authority, // Choose SUSI as your default authority.\n        knownAuthorities: [b2cPolicies.authorityDomain], // Mark your B2C tenant's domain as trusted.\n        redirectUri: \"/\", // You must register this URI on Azure Portal/App Registration. Defaults to window.location.origin\n        postLogoutRedirectUri: \"/\", // Indicates the page to navigate after logout.\n        navigateToLoginRequestUrl: false, // If \"true\", will navigate back to the original request location before processing the auth code response.\n    },\n    cache: {\n        cacheLocation: \"sessionStorage\", // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n    },\n    system: {\n        loggerOptions: {\n            loggerCallback: (level, message, containsPii) => {\n                if (containsPii) {\n                    return;\n                }\n                switch (level) {\n                    case LogLevel.Error:\n                        console.error(message);\n                        return;\n                    case LogLevel.Info:\n                        console.info(message);\n                        return;\n                    case LogLevel.Verbose:\n                        console.debug(message);\n                        return;\n                    case LogLevel.Warning:\n                        console.warn(message);\n                        return;\n                }\n            }\n        }\n    }\n};\n\n/**\n * Add here the endpoints and scopes when obtaining an access token for protected web APIs. For more information, see:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md\n */\nexport const protectedResources = {\n    apiHello: {\n        endpoint: \"http://localhost:5000/hello\",\n        scopes: [\"https://fabrikamb2c.onmicrosoft.com/helloapi/demo.read\"], // e.g. api://xxxxxx/access_as_user\n    },\n}\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit: \n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\n export const loginRequest = {\n    scopes: [...protectedResources.apiHello.scopes]\n};\n"]},"metadata":{},"sourceType":"module"}