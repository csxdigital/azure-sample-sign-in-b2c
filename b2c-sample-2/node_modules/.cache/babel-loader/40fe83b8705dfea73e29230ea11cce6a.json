{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { CredentialType, GrantType, CacheOutcome } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ScopeSet as ScopeSet$1 } from '../request/ScopeSet.js';\nimport { BaseClient as BaseClient$1 } from './BaseClient.js';\nimport { RequestParameterBuilder as RequestParameterBuilder$1 } from '../request/RequestParameterBuilder.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { ResponseHandler as ResponseHandler$1 } from '../response/ResponseHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 client credential grant\r\n */\nvar ClientCredentialClient = /** @class */function (_super) {\n  __extends(ClientCredentialClient, _super);\n  function ClientCredentialClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n   * @param request\r\n   */\n  ClientCredentialClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet$1(request.scopes || []);\n            if (!request.skipCache) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3 /*break*/, 4];\n            return [2 /*return*/, cachedAuthenticationResult];\n          case 4:\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 5:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * looks up cache if the tokens are cached already\r\n   */\n  ClientCredentialClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n            if (!cachedAccessToken) {\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2 /*return*/, null];\n            }\n            if (TimeUtils$1.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              return [2 /*return*/, null];\n            }\n            return [4 /*yield*/, ResponseHandler$1.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: null,\n              idToken: null,\n              accessToken: cachedAccessToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request)];\n          case 1:\n            return [2 /*return*/, _c.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Reads access token from the cache\r\n   * TODO: Move this call to cacheManager instead\r\n   */\n  ClientCredentialClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      homeAccountId: \"\",\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: this.scopeSet.printScopesLowerCase()\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n    if (accessTokens.length < 1) {\n      return null;\n    } else if (accessTokens.length > 1) {\n      throw ClientAuthError$1.createMultipleMatchingTokensInCacheError();\n    }\n    return accessTokens[0];\n  };\n  /**\r\n   * Makes a network call to request the token from the service\r\n   * @param request\r\n   * @param authority\r\n   */\n  ClientCredentialClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes\n            };\n            reqTimestamp = TimeUtils$1.nowSeconds();\n            return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler$1(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\n          case 2:\n            tokenResponse = _a.sent();\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate the request to the server in the acceptable format\r\n   * @param request\r\n   */\n  ClientCredentialClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes, false);\n    parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (!StringUtils$1.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return ClientCredentialClient;\n}(BaseClient$1);\nexport { ClientCredentialClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","ClientCredentialClient","request","scopeSet","ScopeSet","scopes","skipCache","executeTokenRequest","authority","_a","getCachedAuthenticationResult","cachedAuthenticationResult","cachedAccessToken","readAccessTokenFromCache","serverTelemetryManager","setCacheOutcome","CacheOutcome","NO_CACHED_ACCESS_TOKEN","TimeUtils","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","ResponseHandler","generateAuthenticationResult","cryptoUtils","account","idToken","accessToken","refreshToken","appMetadata","_c","accessTokenFilter","homeAccountId","environment","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","CredentialType","ACCESS_TOKEN","clientId","authOptions","realm","tenant","target","printScopesLowerCase","credentialCache","cacheManager","getCredentialsFilteredBy","accessTokens","Object","keys","map","key","length","ClientAuthError","createMultipleMatchingTokensInCacheError","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","thumbprint","reqTimestamp","nowSeconds","executePostToTokenEndpoint","tokenEndpoint","response","responseHandler","logger","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","tokenResponse","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","addGrantType","GrantType","CLIENT_CREDENTIALS_GRANT","addLibraryInfo","libraryInfo","addThrottling","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","claims","clientCapabilities","addClaims","createQueryString","BaseClient"],"sources":["../../src/client/ClientCredentialClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { GrantType , CredentialType, CacheOutcome } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { CommonClientCredentialRequest } from \"../request/CommonClientCredentialRequest\";\r\nimport { CredentialFilter, CredentialCache } from \"../cache/utils/CacheTypes\";\r\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\n\r\n/**\r\n * OAuth2.0 client credential grant\r\n */\r\nexport class ClientCredentialClient extends BaseClient {\r\n\r\n    private scopeSet: ScopeSet;\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Public API to acquire a token with ClientCredential Flow for Confidential clients\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\r\n\r\n        this.scopeSet = new ScopeSet(request.scopes || []);\r\n\r\n        if (request.skipCache) {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n\r\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\r\n        if (cachedAuthenticationResult) {\r\n            return cachedAuthenticationResult;\r\n        } else {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * looks up cache if the tokens are cached already\r\n     */\r\n    private async getCachedAuthenticationResult(request: CommonClientCredentialRequest): Promise<AuthenticationResult | null> {\r\n        \r\n        const cachedAccessToken = this.readAccessTokenFromCache();\r\n\r\n        if (!cachedAccessToken) {\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n            return null;\r\n        }\r\n\r\n        if (TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n            return null;\r\n        }\r\n\r\n        return await ResponseHandler.generateAuthenticationResult(\r\n            this.cryptoUtils,\r\n            this.authority,\r\n            {\r\n                account: null,\r\n                idToken: null,\r\n                accessToken: cachedAccessToken,\r\n                refreshToken: null,\r\n                appMetadata: null\r\n            },\r\n            true,\r\n            request\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Reads access token from the cache\r\n     * TODO: Move this call to cacheManager instead\r\n     */\r\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\r\n        const accessTokenFilter: CredentialFilter = {\r\n            homeAccountId: \"\",\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: this.scopeSet.printScopesLowerCase()\r\n        };\r\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\r\n        const accessTokens = Object.keys(credentialCache.accessTokens).map(key => credentialCache.accessTokens[key]);\r\n        if (accessTokens.length < 1) {\r\n            return null;\r\n        } else if (accessTokens.length > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0] as AccessTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Makes a network call to request the token from the service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonClientCredentialRequest, authority: Authority)\r\n        : Promise<AuthenticationResult | null> {\r\n\r\n        const requestBody = this.createTokenRequestBody(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes\r\n        };\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        responseHandler.validateTokenResponse(response.body);\r\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request\r\n        );\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * generate the request to the server in the acceptable format\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonClientCredentialRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes, false);\r\n\r\n        parameterBuilder.addGrantType(GrantType.CLIENT_CREDENTIALS_GRANT);\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n\r\n        parameterBuilder.addThrottling();\r\n        \r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}