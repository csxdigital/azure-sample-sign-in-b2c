{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { PromptValue, Separators, GrantType, AuthenticationScheme } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\nimport { buildClientInfoFromHomeAccountId, buildClientInfo } from '../account/ClientInfo.js';\nimport { AccountEntity as AccountEntity$1 } from '../cache/entities/AccountEntity.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { BaseClient as BaseClient$1 } from './BaseClient.js';\nimport { RequestParameterBuilder as RequestParameterBuilder$1 } from '../request/RequestParameterBuilder.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { UrlString as UrlString$1 } from '../url/UrlString.js';\nimport { PopTokenGenerator as PopTokenGenerator$1 } from '../crypto/PopTokenGenerator.js';\nimport { ResponseHandler as ResponseHandler$1 } from '../response/ResponseHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\nvar AuthorizationCodeClient = /** @class */function (_super) {\n  __extends(AuthorizationCodeClient, _super);\n  function AuthorizationCodeClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n   * application. The URL target the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * acquireToken(AuthorizationCodeRequest)\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString;\n      return __generator(this, function (_a) {\n        queryString = this.createAuthCodeUrlQueryString(request);\n        return [2 /*return*/, UrlString$1.appendQueryString(this.authority.authorizationEndpoint, queryString)];\n      });\n    });\n  };\n  /**\r\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n   * authorization_code_grant\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n            if (!request || StringUtils$1.isEmpty(request.code)) {\n              throw ClientAuthError$1.createTokenRequestCannotBeMadeError();\n            }\n            reqTimestamp = TimeUtils$1.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler$1(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handles the hash fragment response from public client code request. Returns a code response used by\r\n   * the client to exchange for a token in acquireToken.\r\n   * @param hashFragment\r\n   */\n  AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\n    // Handle responses.\n    var responseHandler = new ResponseHandler$1(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n    // Deserialize hash fragment response parameters.\n    var hashUrlString = new UrlString$1(hashFragment);\n    // Deserialize hash fragment response parameters.\n    var serverParams = UrlString$1.getDeserializedHash(hashUrlString.getHash());\n    // Get code response\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n    // throw when there is no auth code in the response\n    if (!serverParams.code) {\n      throw ClientAuthError$1.createNoAuthCodeInServerResponseError();\n    }\n    return __assign(__assign({}, serverParams), {\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    });\n  };\n  /**\r\n   * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param authorityUri\r\n   */\n  AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError$1.createEmptyLogoutRequestError();\n    }\n    if (logoutRequest.account) {\n      // Clear given account.\n      this.cacheManager.removeAccount(AccountEntity$1.generateAccountCacheKey(logoutRequest.account));\n    } else {\n      // Clear all accounts and tokens\n      this.cacheManager.clear();\n    }\n    var queryString = this.createLogoutUrlQueryString(logoutRequest);\n    // Construct logout URI.\n    return UrlString$1.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes\n            };\n            return [4 /*yield*/, this.createTokenRequestBody(request)];\n          case 1:\n            requestBody = _a.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            ccsCredential = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            }\n            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n            endpoint = StringUtils$1.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + \"?\" + queryParameters;\n            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, clientAssertion, popTokenGenerator, cnfString, correlationId, ccsCred, clientInfo, clientInfo;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder$1();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            // validate the redirectUri (to be a non null value)\n            parameterBuilder.addRedirectUri(request.redirectUri);\n            // Add scope array, parameter builder will add default scopes and dedupe\n            parameterBuilder.addScopes(request.scopes);\n            // add code: user set, not validated\n            parameterBuilder.addAuthorizationCode(request.code);\n            // Add library metadata\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addThrottling();\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n            // add code_verifier if passed\n            if (request.codeVerifier) {\n              parameterBuilder.addCodeVerifier(request.codeVerifier);\n            }\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n            parameterBuilder.addClientInfo();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator$1(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            cnfString = _a.sent();\n            parameterBuilder.addPopToken(cnfString);\n            _a.label = 2;\n          case 2:\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            if (!StringUtils$1.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            ccsCred = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            } else {\n              ccsCred = request.ccsCredential;\n            }\n            // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n              switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n                  break;\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(ccsCred.credential);\n                  break;\n              }\n            }\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    var requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\n    parameterBuilder.addScopes(requestScopes);\n    // validate the redirectUri (to be a non null value)\n    parameterBuilder.addRedirectUri(request.redirectUri);\n    // generate the correlationId if not set by the user and add\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    // add response_mode. If not passed in it defaults to query.\n    parameterBuilder.addResponseMode(request.responseMode);\n    // add response_type = code\n    parameterBuilder.addResponseTypeCode();\n    // add library info parameters\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    // add client_info=1\n    parameterBuilder.addClientInfo();\n    if (request.codeChallenge && request.codeChallengeMethod) {\n      parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n    }\n    if (request.prompt) {\n      parameterBuilder.addPrompt(request.prompt);\n    }\n    if (request.domainHint) {\n      parameterBuilder.addDomainHint(request.domainHint);\n    }\n    // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object\n    if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n      // AAD will throw if prompt=select_account is passed with an account hint\n      if (request.sid && request.prompt === PromptValue.NONE) {\n        // SessionID is only used in silent calls\n        this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n        parameterBuilder.addSid(request.sid);\n      } else if (request.account) {\n        var accountSid = this.extractAccountSid(request.account);\n        // If account and loginHint are provided, we will check account first for sid before adding loginHint\n        if (accountSid && request.prompt === PromptValue.NONE) {\n          // SessionId is only used in silent calls\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n          parameterBuilder.addSid(accountSid);\n          try {\n            var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n        } else if (request.loginHint) {\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n          parameterBuilder.addLoginHint(request.loginHint);\n          parameterBuilder.addCcsUpn(request.loginHint);\n        } else if (request.account.username) {\n          // Fallback to account username if provided\n          this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n          parameterBuilder.addLoginHint(request.account.username);\n          try {\n            var clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n            parameterBuilder.addCcsOid(clientInfo);\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n        }\n      } else if (request.loginHint) {\n        this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n        parameterBuilder.addLoginHint(request.loginHint);\n        parameterBuilder.addCcsUpn(request.loginHint);\n      }\n    } else {\n      this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n    }\n    if (request.nonce) {\n      parameterBuilder.addNonce(request.nonce);\n    }\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n    if (!StringUtils$1.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * This API validates the `EndSessionRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n   * @param account\r\n   */\n  AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\n    if (account.idTokenClaims) {\n      var tokenClaims = account.idTokenClaims;\n      return tokenClaims.sid || null;\n    }\n    return null;\n  };\n  return AuthorizationCodeClient;\n}(BaseClient$1);\nexport { AuthorizationCodeClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","AuthorizationCodeClient","request","queryString","createAuthCodeUrlQueryString","UrlString","appendQueryString","authority","authorizationEndpoint","authCodePayload","logger","info","StringUtils","isEmpty","code","ClientAuthError","createTokenRequestCannotBeMadeError","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","response","_a","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","hashFragment","cachedState","hashUrlString","serverParams","getDeserializedHash","getHash","validateServerAuthorizationCodeResponse","createNoAuthCodeInServerResponseError","logoutRequest","ClientConfigurationError","createEmptyLogoutRequestError","account","removeAccount","AccountEntity","generateAccountCacheKey","clear","createLogoutUrlQueryString","endSessionEndpoint","thumbprint","canonicalAuthority","scopes","createTokenRequestBody","requestBody","queryParameters","createTokenQueryParameters","ccsCredential","undefined","clientInfo","buildClientInfo","credential","uid","Separators","CLIENT_INFO_SEPARATOR","utid","type","CcsCredentialType","HOME_ACCOUNT_ID","e","verbose","headers","createTokenRequestHeaders","endpoint","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","addClientId","addRedirectUri","redirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addThrottling","serverTelemetryManager","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","GrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","authenticationScheme","AuthenticationScheme","POP","popTokenGenerator","PopTokenGenerator","generateCnf","cnfString","addPopToken","correlationId","cryptoInterface","createNewGuid","addCorrelationId","isEmptyObj","claims","clientCapabilities","length","addClaims","ccsCred","systemOptions","preventCorsPreflight","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","requestScopes","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","PromptValue","SELECT_ACCOUNT","sid","NONE","addSid","accountSid","extractAccountSid","homeAccountId","loginHint","addLoginHint","username","nonce","addNonce","state","addState","extraQueryParameters","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","idTokenClaims","tokenClaims","BaseClient"],"sources":["../../src/client/AuthorizationCodeClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { CommonAuthorizationUrlRequest } from \"../request/CommonAuthorizationUrlRequest\";\r\nimport { CommonAuthorizationCodeRequest } from \"../request/CommonAuthorizationCodeRequest\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { GrantType, AuthenticationScheme, PromptValue, Separators } from \"../utils/Constants\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\r\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\r\nimport { CommonEndSessionRequest } from \"../request/CommonEndSessionRequest\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { AuthorizationCodePayload } from \"../response/AuthorizationCodePayload\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { TokenClaims } from \"../account/TokenClaims\";\r\nimport { AccountInfo } from \"../account/AccountInfo\";\r\nimport { buildClientInfoFromHomeAccountId, buildClientInfo } from \"../account/ClientInfo\";\r\nimport { CcsCredentialType, CcsCredential } from \"../account/CcsCredential\";\r\n\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\r\nexport class AuthorizationCodeClient extends BaseClient {\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */\r\n    async getAuthCodeUrl(request: CommonAuthorizationUrlRequest): Promise<string> {\r\n        const queryString = this.createAuthCodeUrlQueryString(request);\r\n\r\n        return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\r\n    }\r\n\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonAuthorizationCodeRequest, authCodePayload?: AuthorizationCodePayload): Promise<AuthenticationResult> {\r\n        this.logger.info(\"in acquireToken call\");\r\n        if (!request || StringUtils.isEmpty(request.code)) {\r\n            throw ClientAuthError.createTokenRequestCannotBeMadeError();\r\n        }\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executeTokenRequest(this.authority, request);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response.body);\r\n        return await responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload);\r\n    }\r\n\r\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */\r\n    handleFragmentResponse(hashFragment: string, cachedState: string): AuthorizationCodePayload {\r\n        // Handle responses.\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\r\n\r\n        // Deserialize hash fragment response parameters.\r\n        const hashUrlString = new UrlString(hashFragment);\r\n        // Deserialize hash fragment response parameters.\r\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hashUrlString.getHash());\r\n\r\n        // Get code response\r\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\r\n\r\n        // throw when there is no auth code in the response\r\n        if (!serverParams.code) {\r\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\r\n        }\r\n        return {\r\n            ...serverParams,\r\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\r\n            code: serverParams.code\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    getLogoutUri(logoutRequest: CommonEndSessionRequest): string {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\r\n        }\r\n\r\n        if (logoutRequest.account) {\r\n            // Clear given account.\r\n            this.cacheManager.removeAccount(AccountEntity.generateAccountCacheKey(logoutRequest.account));\r\n        } else {\r\n            // Clear all accounts and tokens\r\n            this.cacheManager.clear();\r\n        }\r\n\r\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n\r\n        // Construct logout URI.\r\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\r\n    }\r\n\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    private async executeTokenRequest(authority: Authority, request: CommonAuthorizationCodeRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes\r\n        };\r\n\r\n        const requestBody = await this.createTokenRequestBody(request);\r\n        const queryParameters = this.createTokenQueryParameters(request);\r\n        let ccsCredential: CcsCredential | undefined = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                ccsCredential = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                };\r\n            } catch (e) {\r\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n            }\r\n        }\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\r\n        const endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : `${authority.tokenEndpoint}?${queryParameters}`;\r\n\r\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request \r\n     */\r\n    private createTokenQueryParameters(request: CommonAuthorizationCodeRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    private async createTokenRequestBody(request: CommonAuthorizationCodeRequest): Promise<string> {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        // validate the redirectUri (to be a non null value)\r\n        parameterBuilder.addRedirectUri(request.redirectUri);\r\n\r\n        // Add scope array, parameter builder will add default scopes and dedupe\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        // add code: user set, not validated\r\n        parameterBuilder.addAuthorizationCode(request.code);\r\n\r\n        // Add library metadata\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n\r\n        parameterBuilder.addThrottling();\r\n        \r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        // add code_verifier if passed\r\n        if (request.codeVerifier) {\r\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n            const cnfString = await popTokenGenerator.generateCnf(request);\r\n            parameterBuilder.addPopToken(cnfString);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        \r\n        let ccsCred: CcsCredential | undefined = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                ccsCred = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                };\r\n            } catch (e) {\r\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n            }\r\n        } else {\r\n            ccsCred = request.ccsCredential;\r\n        }\r\n\r\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    private createAuthCodeUrlQueryString(request: CommonAuthorizationUrlRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        const requestScopes = [...request.scopes || [], ...request.extraScopesToConsent || []];\r\n        parameterBuilder.addScopes(requestScopes);\r\n\r\n        // validate the redirectUri (to be a non null value)\r\n        parameterBuilder.addRedirectUri(request.redirectUri);\r\n\r\n        // generate the correlationId if not set by the user and add\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        // add response_mode. If not passed in it defaults to query.\r\n        parameterBuilder.addResponseMode(request.responseMode);\r\n\r\n        // add response_type = code\r\n        parameterBuilder.addResponseTypeCode();\r\n\r\n        // add library info parameters\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n\r\n        // add client_info=1\r\n        parameterBuilder.addClientInfo();\r\n\r\n        if (request.codeChallenge && request.codeChallengeMethod) {\r\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\r\n        }\r\n\r\n        if (request.prompt) {\r\n            parameterBuilder.addPrompt(request.prompt);\r\n        }\r\n\r\n        if (request.domainHint) {\r\n            parameterBuilder.addDomainHint(request.domainHint);\r\n        }\r\n\r\n        // Add sid or loginHint with preference for sid -> loginHint -> username of AccountInfo object\r\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n            // AAD will throw if prompt=select_account is passed with an account hint\r\n            if (request.sid && request.prompt === PromptValue.NONE) {\r\n                // SessionID is only used in silent calls\r\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\r\n                parameterBuilder.addSid(request.sid);\r\n            } else if (request.account) {\r\n                const accountSid = this.extractAccountSid(request.account);\r\n                // If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                if (accountSid && request.prompt === PromptValue.NONE) {\r\n                    // SessionId is only used in silent calls\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\r\n                    parameterBuilder.addSid(accountSid);\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                } else if (request.loginHint) {\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\r\n                    parameterBuilder.addLoginHint(request.loginHint);\r\n                    parameterBuilder.addCcsUpn(request.loginHint);\r\n                } else if (request.account.username) {\r\n                    // Fallback to account username if provided\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\r\n                    parameterBuilder.addLoginHint(request.account.username);\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +  e);\r\n                    }\r\n                }\r\n            } else if (request.loginHint) {\r\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\r\n                parameterBuilder.addLoginHint(request.loginHint);\r\n                parameterBuilder.addCcsUpn(request.loginHint);\r\n            }\r\n        } else {\r\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\r\n        }\r\n\r\n        if (request.nonce) {\r\n            parameterBuilder.addNonce(request.nonce);\r\n        }\r\n\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    private createLogoutUrlQueryString(request: CommonEndSessionRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        if (request.postLogoutRedirectUri) {\r\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\r\n        }\r\n\r\n        if (request.correlationId) {\r\n            parameterBuilder.addCorrelationId(request.correlationId);\r\n        }\r\n\r\n        if (request.idTokenHint) {\r\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account \r\n     */\r\n    private extractAccountSid(account: AccountInfo): string | null {\r\n        if (account.idTokenClaims) {\r\n            const tokenClaims = account.idTokenClaims as TokenClaims;\r\n            return tokenClaims.sid || null;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}