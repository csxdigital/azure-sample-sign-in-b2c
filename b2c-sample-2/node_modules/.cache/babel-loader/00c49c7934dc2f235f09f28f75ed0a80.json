{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { AuthToken as AuthToken$1 } from '../account/AuthToken.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { UrlString as UrlString$1 } from '../url/UrlString.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar KeyLocation;\n(function (KeyLocation) {\n  KeyLocation[\"SW\"] = \"sw\";\n  KeyLocation[\"UHW\"] = \"uhw\";\n})(KeyLocation || (KeyLocation = {}));\nvar PopTokenGenerator = /** @class */function () {\n  function PopTokenGenerator(cryptoUtils) {\n    this.cryptoUtils = cryptoUtils;\n  }\n  PopTokenGenerator.prototype.generateCnf = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var kidThumbprint, reqCnf;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.cryptoUtils.getPublicKeyThumbprint(request)];\n          case 1:\n            kidThumbprint = _a.sent();\n            reqCnf = {\n              kid: kidThumbprint,\n              xms_ksl: KeyLocation.SW\n            };\n            return [2 /*return*/, this.cryptoUtils.base64Encode(JSON.stringify(reqCnf))];\n        }\n      });\n    });\n  };\n  PopTokenGenerator.prototype.signPopToken = function (accessToken, request) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenClaims, resourceRequestMethod, resourceRequestUri, shrClaims, resourceUrlString, resourceUrlComponents;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            tokenClaims = AuthToken$1.extractTokenClaims(accessToken, this.cryptoUtils);\n            resourceRequestMethod = request.resourceRequestMethod, resourceRequestUri = request.resourceRequestUri, shrClaims = request.shrClaims;\n            resourceUrlString = resourceRequestUri ? new UrlString$1(resourceRequestUri) : undefined;\n            resourceUrlComponents = resourceUrlString === null || resourceUrlString === void 0 ? void 0 : resourceUrlString.getUrlComponents();\n            if (!((_a = tokenClaims === null || tokenClaims === void 0 ? void 0 : tokenClaims.cnf) === null || _a === void 0 ? void 0 : _a.kid)) {\n              throw ClientAuthError$1.createTokenClaimsRequiredError();\n            }\n            return [4 /*yield*/, this.cryptoUtils.signJwt({\n              at: accessToken,\n              ts: TimeUtils$1.nowSeconds(),\n              m: resourceRequestMethod === null || resourceRequestMethod === void 0 ? void 0 : resourceRequestMethod.toUpperCase(),\n              u: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.HostNameAndPort,\n              nonce: this.cryptoUtils.createNewGuid(),\n              p: resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.AbsolutePath,\n              q: (resourceUrlComponents === null || resourceUrlComponents === void 0 ? void 0 : resourceUrlComponents.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\n              client_claims: shrClaims || undefined\n            }, tokenClaims.cnf.kid)];\n          case 1:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  return PopTokenGenerator;\n}();\nexport { PopTokenGenerator };","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;AAyBA,IAAKA,WAGJ;AAHD,WAAKA,WAAW;EACZA,wBAAS;EACTA,0BAAW;AACf,CAAC,EAHIA,WAAW,KAAXA,WAAW;;EASZ,2BAAYC,WAAoB;IAC5B,IAAI,CAACA,WAAW,GAAGA,WAAW;;EAG5BC,uCAAW,GAAjB,UAAkBC,OAAwB;;;;;;YAChB,qBAAM,IAAI,CAACF,WAAW,CAACG,sBAAsB,CAACD,OAAO,CAAC;;YAAtEE,aAAa,GAAGC,SAAsD;YACtEC,MAAM,GAAW;cACnBC,GAAG,EAAEH,aAAa;cAClBI,OAAO,EAAET,WAAW,CAACU;aACxB;YACD,sBAAO,IAAI,CAACT,WAAW,CAACU,YAAY,CAACC,IAAI,CAACC,SAAS,CAACN,MAAM,CAAC,CAAC;QAAC;;;GAChE;EAEKL,wCAAY,GAAlB,UAAmBY,WAAmB,EAAEX,OAAwB;;;;;;;YACtDY,WAAW,GAAuBC,WAAS,CAACC,kBAAkB,CAACH,WAAW,EAAE,IAAI,CAACb,WAAW,CAAC;YAG3FiB,qBAAqB,GAAoCf,OAAO,sBAA3C,EAAEgB,kBAAkB,GAAgBhB,OAAO,mBAAvB,EAAEiB,SAAS,GAAKjB,OAAO,UAAZ;YAEtDkB,iBAAiB,GAAIF,kBAAkB,GAAI,IAAIG,WAAS,CAACH,kBAAkB,CAAC,GAAGI,SAAS;YACxFC,qBAAqB,GAAGH,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEI,gBAAgB,EAAE;YAEnE,IAAI,QAACV,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEW,GAAG,0CAAElB,GAAG,GAAE;cACxB,MAAMmB,iBAAe,CAACC,8BAA8B,EAAE;;YAGnD,qBAAM,IAAI,CAAC3B,WAAW,CAAC4B,OAAO,CAAC;cAClCC,EAAE,EAAEhB,WAAW;cACfiB,EAAE,EAAEC,WAAS,CAACC,UAAU,EAAE;cAC1BC,CAAC,EAAEhB,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEiB,WAAW,EAAE;cACvCC,CAAC,EAAEZ,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEa,eAAe;cACzCC,KAAK,EAAE,IAAI,CAACrC,WAAW,CAACsC,aAAa,EAAE;cACvCC,CAAC,EAAEhB,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEiB,YAAY;cACtCC,CAAC,EAAE,CAAClB,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEmB,WAAW,IAAI,CAAC,EAAE,EAAEnB,qBAAqB,CAACmB,WAAW,CAAC,GAAGpB,SAAS;cAC7FqB,aAAa,EAAExB,SAAS,IAAIG;aAC/B,EAAER,WAAW,CAACW,GAAG,CAAClB,GAAG,CAAC;;YATvB,sBAAOqC,SASgB;QAAC;;;GAC3B;EACL,wBAAC;AAAD,CAAC","names":["KeyLocation","cryptoUtils","PopTokenGenerator","request","getPublicKeyThumbprint","kidThumbprint","_a","reqCnf","kid","xms_ksl","SW","base64Encode","JSON","stringify","accessToken","tokenClaims","AuthToken","extractTokenClaims","resourceRequestMethod","resourceRequestUri","shrClaims","resourceUrlString","UrlString","undefined","resourceUrlComponents","getUrlComponents","cnf","ClientAuthError","createTokenClaimsRequiredError","signJwt","at","ts","TimeUtils","nowSeconds","m","toUpperCase","u","HostNameAndPort","nonce","createNewGuid","p","AbsolutePath","q","QueryString","client_claims","_b"],"sources":["../../src/crypto/PopTokenGenerator.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto } from \"./ICrypto\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { TokenClaims } from \"../account/TokenClaims\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\r\n\r\n/**\r\n * See eSTS docs for more info.\r\n * - A kid element, with the value containing an RFC 7638-compliant JWK thumbprint that is base64 encoded.\r\n * -  xms_ksl element, representing the storage location of the key's secret component on the client device. One of two values:\r\n *      - sw: software storage\r\n *      - uhw: hardware storage\r\n */\r\ntype ReqCnf = {\r\n    kid: string;\r\n    xms_ksl: KeyLocation;\r\n};\r\n\r\nenum KeyLocation {\r\n    SW = \"sw\",\r\n    UHW = \"uhw\"\r\n}\r\n\r\nexport class PopTokenGenerator {\r\n\r\n    private cryptoUtils: ICrypto;\r\n\r\n    constructor(cryptoUtils: ICrypto) {\r\n        this.cryptoUtils = cryptoUtils;\r\n    }\r\n\r\n    async generateCnf(request: BaseAuthRequest): Promise<string> {\r\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\r\n        const reqCnf: ReqCnf = {\r\n            kid: kidThumbprint,\r\n            xms_ksl: KeyLocation.SW\r\n        };\r\n        return this.cryptoUtils.base64Encode(JSON.stringify(reqCnf));\r\n    }\r\n\r\n    async signPopToken(accessToken: string, request: BaseAuthRequest): Promise<string> {\r\n        const tokenClaims: TokenClaims | null = AuthToken.extractTokenClaims(accessToken, this.cryptoUtils);\r\n\r\n        // Deconstruct request to extract SHR parameters\r\n        const { resourceRequestMethod, resourceRequestUri, shrClaims } = request;\r\n\r\n        const resourceUrlString = (resourceRequestUri) ? new UrlString(resourceRequestUri) : undefined;\r\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\r\n\r\n        if (!tokenClaims?.cnf?.kid) {\r\n            throw ClientAuthError.createTokenClaimsRequiredError();\r\n        }\r\n\r\n        return await this.cryptoUtils.signJwt({\r\n            at: accessToken,\r\n            ts: TimeUtils.nowSeconds(),\r\n            m: resourceRequestMethod?.toUpperCase(),\r\n            u: resourceUrlComponents?.HostNameAndPort,\r\n            nonce: this.cryptoUtils.createNewGuid(),\r\n            p: resourceUrlComponents?.AbsolutePath,\r\n            q: (resourceUrlComponents?.QueryString) ? [[], resourceUrlComponents.QueryString] : undefined,\r\n            client_claims: shrClaims || undefined\r\n        }, tokenClaims.cnf.kid);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}