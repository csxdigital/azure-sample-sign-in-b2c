{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { AuthError as AuthError$1 } from './AuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\nvar ClientAuthErrorMessage = {\n  clientInfoDecodingError: {\n    code: \"client_info_decoding_error\",\n    desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\n  },\n  clientInfoEmptyError: {\n    code: \"client_info_empty_error\",\n    desc: \"The client info was empty. Please review the trace to determine the root cause.\"\n  },\n  tokenParsingError: {\n    code: \"token_parsing_error\",\n    desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\n  },\n  nullOrEmptyToken: {\n    code: \"null_or_empty_token\",\n    desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\n  },\n  endpointResolutionError: {\n    code: \"endpoints_resolution_error\",\n    desc: \"Error: could not resolve endpoints. Please check network and try again.\"\n  },\n  networkError: {\n    code: \"network_error\",\n    desc: \"Network request failed. Please check network trace to determine root cause.\"\n  },\n  unableToGetOpenidConfigError: {\n    code: \"openid_config_error\",\n    desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\n  },\n  hashNotDeserialized: {\n    code: \"hash_not_deserialized\",\n    desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\n  },\n  blankGuidGenerated: {\n    code: \"blank_guid_generated\",\n    desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\n  },\n  invalidStateError: {\n    code: \"invalid_state\",\n    desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\n  },\n  stateMismatchError: {\n    code: \"state_mismatch\",\n    desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\n  },\n  stateNotFoundError: {\n    code: \"state_not_found\",\n    desc: \"State not found\"\n  },\n  nonceMismatchError: {\n    code: \"nonce_mismatch\",\n    desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\n  },\n  nonceNotFoundError: {\n    code: \"nonce_not_found\",\n    desc: \"nonce not found\"\n  },\n  noTokensFoundError: {\n    code: \"no_tokens_found\",\n    desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\n  },\n  multipleMatchingTokens: {\n    code: \"multiple_matching_tokens\",\n    desc: \"The cache contains multiple tokens satisfying the requirements. \" + \"Call AcquireToken again providing more requirements such as authority or account.\"\n  },\n  multipleMatchingAccounts: {\n    code: \"multiple_matching_accounts\",\n    desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\n  },\n  multipleMatchingAppMetadata: {\n    code: \"multiple_matching_appMetadata\",\n    desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\n  },\n  tokenRequestCannotBeMade: {\n    code: \"request_cannot_be_made\",\n    desc: \"Token request cannot be made without authorization code or refresh token.\"\n  },\n  appendEmptyScopeError: {\n    code: \"cannot_append_empty_scope\",\n    desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\n  },\n  removeEmptyScopeError: {\n    code: \"cannot_remove_empty_scope\",\n    desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\n  },\n  appendScopeSetError: {\n    code: \"cannot_append_scopeset\",\n    desc: \"Cannot append ScopeSet due to error.\"\n  },\n  emptyInputScopeSetError: {\n    code: \"empty_input_scopeset\",\n    desc: \"Empty input ScopeSet cannot be processed.\"\n  },\n  DeviceCodePollingCancelled: {\n    code: \"device_code_polling_cancelled\",\n    desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\n  },\n  DeviceCodeExpired: {\n    code: \"device_code_expired\",\n    desc: \"Device code is expired.\"\n  },\n  DeviceCodeUnknownError: {\n    code: \"device_code_unknown_error\",\n    desc: \"Device code stopped polling for unknown reasons.\"\n  },\n  NoAccountInSilentRequest: {\n    code: \"no_account_in_silent_request\",\n    desc: \"Please pass an account object, silent flow is not supported without account information\"\n  },\n  invalidCacheRecord: {\n    code: \"invalid_cache_record\",\n    desc: \"Cache record object was null or undefined.\"\n  },\n  invalidCacheEnvironment: {\n    code: \"invalid_cache_environment\",\n    desc: \"Invalid environment when attempting to create cache entry\"\n  },\n  noAccountFound: {\n    code: \"no_account_found\",\n    desc: \"No account found in cache for given key.\"\n  },\n  CachePluginError: {\n    code: \"no cache plugin set on CacheManager\",\n    desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\n  },\n  noCryptoObj: {\n    code: \"no_crypto_object\",\n    desc: \"No crypto object detected. This is required for the following operation: \"\n  },\n  invalidCacheType: {\n    code: \"invalid_cache_type\",\n    desc: \"Invalid cache type\"\n  },\n  unexpectedAccountType: {\n    code: \"unexpected_account_type\",\n    desc: \"Unexpected account type.\"\n  },\n  unexpectedCredentialType: {\n    code: \"unexpected_credential_type\",\n    desc: \"Unexpected credential type.\"\n  },\n  invalidAssertion: {\n    code: \"invalid_assertion\",\n    desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\n  },\n  invalidClientCredential: {\n    code: \"invalid_client_credential\",\n    desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\n  },\n  tokenRefreshRequired: {\n    code: \"token_refresh_required\",\n    desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\n  },\n  userTimeoutReached: {\n    code: \"user_timeout_reached\",\n    desc: \"User defined timeout for device code polling reached\"\n  },\n  tokenClaimsRequired: {\n    code: \"token_claims_cnf_required_for_signedjwt\",\n    desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\n  },\n  noAuthorizationCodeFromServer: {\n    code: \"authorization_code_missing_from_server_response\",\n    desc: \"Server response does not contain an authorization code to proceed\"\n  },\n  noAzureRegionDetected: {\n    code: \"no_azure_region_detected\",\n    desc: \"No azure region was detected and no fallback was made available\"\n  },\n  accessTokenEntityNullError: {\n    code: \"access_token_entity_null\",\n    desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\n  }\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\nvar ClientAuthError = /** @class */function (_super) {\n  __extends(ClientAuthError, _super);\n  function ClientAuthError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n    _this.name = \"ClientAuthError\";\n    Object.setPrototypeOf(_this, ClientAuthError.prototype);\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when client info object doesn't decode correctly.\r\n   * @param caughtError\r\n   */\n  ClientAuthError.createClientInfoDecodingError = function (caughtError) {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + \" Failed with error: \" + caughtError);\n  };\n  /**\r\n   * Creates an error thrown if the client info is empty.\r\n   * @param rawClientInfo\r\n   */\n  ClientAuthError.createClientInfoEmptyError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, \"\" + ClientAuthErrorMessage.clientInfoEmptyError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the id token extraction errors out.\r\n   * @param err\r\n   */\n  ClientAuthError.createTokenParsingError = function (caughtExtractionError) {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + \" Failed with error: \" + caughtExtractionError);\n  };\n  /**\r\n   * Creates an error thrown when the id token string is null or empty.\r\n   * @param invalidRawTokenString\r\n   */\n  ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {\n    return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + \" Raw Token Value: \" + invalidRawTokenString);\n  };\n  /**\r\n   * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n   */\n  ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + \" Detail: \" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the fetch client throws\r\n   */\n  ClientAuthError.createNetworkError = function (endpoint, errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + \" | Fetch client threw: \" + errDetail + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\n  };\n  /**\r\n   * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\r\n   */\n  ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + \" Attempted to retrieve endpoints from: \" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the hash cannot be deserialized.\r\n   * @param hashParamObj\r\n   */\n  ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {\n    return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + \" Given Object: \" + hashParamObj);\n  };\n  /**\r\n   * Creates an error thrown when the state cannot be parsed.\r\n   * @param invalidState\r\n   */\n  ClientAuthError.createInvalidStateError = function (invalidState, errorString) {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + \" Invalid State: \" + invalidState + \", Root Err: \" + errorString);\n  };\n  /**\r\n   * Creates an error thrown when two states do not match.\r\n   */\n  ClientAuthError.createStateMismatchError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the state is not present\r\n   * @param missingState\r\n   */\n  ClientAuthError.createStateNotFoundError = function (missingState) {\n    return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + \":  \" + missingState);\n  };\n  /**\r\n   * Creates an error thrown when the nonce does not match.\r\n   */\n  ClientAuthError.createNonceMismatchError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the mnonce is not present\r\n   * @param missingNonce\r\n   */\n  ClientAuthError.createNonceNotFoundError = function (missingNonce) {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + \":  \" + missingNonce);\n  };\n  /**\r\n   * Creates an error thrown when the authorization code required for a token request is null or empty.\r\n   */\n  ClientAuthError.createNoTokensFoundError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noTokensFoundError.code, ClientAuthErrorMessage.noTokensFoundError.desc);\n  };\n  /**\r\n   * Throws error when multiple tokens are in cache.\r\n   */\n  ClientAuthError.createMultipleMatchingTokensInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + \".\");\n  };\n  /**\r\n   * Throws error when multiple accounts are in cache for the given params\r\n   */\n  ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);\n  };\n  /**\r\n   * Throws error when multiple appMetada are in cache for the given clientId.\r\n   */\n  ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\n  };\n  /**\r\n   * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n   */\n  ClientAuthError.createTokenRequestCannotBeMadeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\n  };\n  /**\r\n   * Throws error when attempting to append a null, undefined or empty scope to a set\r\n   * @param givenScope\r\n   */\n  ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + \" Given Scope: \" + givenScope);\n  };\n  /**\r\n   * Throws error when attempting to append a null, undefined or empty scope to a set\r\n   * @param givenScope\r\n   */\n  ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + \" Given Scope: \" + givenScope);\n  };\n  /**\r\n   * Throws error when attempting to append null or empty ScopeSet.\r\n   * @param appendError\r\n   */\n  ClientAuthError.createAppendScopeSetError = function (appendError) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + \" Detail Error: \" + appendError);\n  };\n  /**\r\n   * Throws error if ScopeSet is null or undefined.\r\n   * @param givenScopeSet\r\n   */\n  ClientAuthError.createEmptyInputScopeSetError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, \"\" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);\n  };\n  /**\r\n   * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\r\n   */\n  ClientAuthError.createDeviceCodeCancelledError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, \"\" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);\n  };\n  /**\r\n   * Throws error if device code is expired\r\n   */\n  ClientAuthError.createDeviceCodeExpiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, \"\" + ClientAuthErrorMessage.DeviceCodeExpired.desc);\n  };\n  /**\r\n   * Throws error if device code is expired\r\n   */\n  ClientAuthError.createDeviceCodeUnknownError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, \"\" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);\n  };\n  /**\r\n   * Throws error when silent requests are made without an account object\r\n   */\n  ClientAuthError.createNoAccountInSilentRequestError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, \"\" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);\n  };\n  /**\r\n   * Throws error when cache record is null or undefined.\r\n   */\n  ClientAuthError.createNullOrUndefinedCacheRecord = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\n  };\n  /**\r\n   * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\r\n   */\n  ClientAuthError.createInvalidCacheEnvironmentError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\n  };\n  /**\r\n   * Throws error when account is not found in cache.\r\n   */\n  ClientAuthError.createNoAccountFoundError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\n  };\n  /**\r\n   * Throws error if ICachePlugin not set on CacheManager.\r\n   */\n  ClientAuthError.createCachePluginError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, \"\" + ClientAuthErrorMessage.CachePluginError.desc);\n  };\n  /**\r\n   * Throws error if crypto object not found.\r\n   * @param operationName\r\n   */\n  ClientAuthError.createNoCryptoObjectError = function (operationName) {\n    return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, \"\" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);\n  };\n  /**\r\n   * Throws error if cache type is invalid.\r\n   */\n  ClientAuthError.createInvalidCacheTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, \"\" + ClientAuthErrorMessage.invalidCacheType.desc);\n  };\n  /**\r\n   * Throws error if unexpected account type.\r\n   */\n  ClientAuthError.createUnexpectedAccountTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, \"\" + ClientAuthErrorMessage.unexpectedAccountType.desc);\n  };\n  /**\r\n   * Throws error if unexpected credential type.\r\n   */\n  ClientAuthError.createUnexpectedCredentialTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, \"\" + ClientAuthErrorMessage.unexpectedCredentialType.desc);\n  };\n  /**\r\n   * Throws error if client assertion is not valid.\r\n   */\n  ClientAuthError.createInvalidAssertionError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, \"\" + ClientAuthErrorMessage.invalidAssertion.desc);\n  };\n  /**\r\n   * Throws error if client assertion is not valid.\r\n   */\n  ClientAuthError.createInvalidCredentialError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, \"\" + ClientAuthErrorMessage.invalidClientCredential.desc);\n  };\n  /**\r\n   * Throws error if token cannot be retrieved from cache due to refresh being required.\r\n   */\n  ClientAuthError.createRefreshRequiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\n  };\n  /**\r\n   * Throws error if the user defined timeout is reached.\r\n   */\n  ClientAuthError.createUserTimeoutReachedError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\n  };\n  /*\r\n   * Throws error if token claims are not populated for a signed jwt generation\r\n   */\n  ClientAuthError.createTokenClaimsRequiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\n  };\n  /**\r\n   * Throws error when the authorization code is missing from the server response\r\n   */\n  ClientAuthError.createNoAuthCodeInServerResponseError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\n  };\n  return ClientAuthError;\n}(AuthError$1);\nexport { ClientAuthError, ClientAuthErrorMessage };","map":{"version":3,"mappings":"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","names":["ClientAuthErrorMessage","clientInfoDecodingError","code","desc","clientInfoEmptyError","tokenParsingError","nullOrEmptyToken","endpointResolutionError","networkError","unableToGetOpenidConfigError","hashNotDeserialized","blankGuidGenerated","invalidStateError","stateMismatchError","stateNotFoundError","nonceMismatchError","nonceNotFoundError","noTokensFoundError","multipleMatchingTokens","multipleMatchingAccounts","multipleMatchingAppMetadata","tokenRequestCannotBeMade","appendEmptyScopeError","removeEmptyScopeError","appendScopeSetError","emptyInputScopeSetError","DeviceCodePollingCancelled","DeviceCodeExpired","DeviceCodeUnknownError","NoAccountInSilentRequest","invalidCacheRecord","invalidCacheEnvironment","noAccountFound","CachePluginError","noCryptoObj","invalidCacheType","unexpectedAccountType","unexpectedCredentialType","invalidAssertion","invalidClientCredential","tokenRefreshRequired","userTimeoutReached","tokenClaimsRequired","noAuthorizationCodeFromServer","noAzureRegionDetected","accessTokenEntityNullError","__extends","errorCode","errorMessage","_super","_this","name","Object","setPrototypeOf","ClientAuthError","prototype","caughtError","caughtExtractionError","invalidRawTokenString","errDetail","endpoint","split","hashParamObj","invalidState","errorString","missingState","missingNonce","givenScope","appendError","operationName","AuthError"],"sources":["../../src/error/ClientAuthError.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthError } from \"./AuthError\";\r\n\r\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nexport const ClientAuthErrorMessage = {\r\n    clientInfoDecodingError: {\r\n        code: \"client_info_decoding_error\",\r\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\r\n    },\r\n    clientInfoEmptyError: {\r\n        code: \"client_info_empty_error\",\r\n        desc: \"The client info was empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    tokenParsingError: {\r\n        code: \"token_parsing_error\",\r\n        desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\r\n    },\r\n    nullOrEmptyToken: {\r\n        code: \"null_or_empty_token\",\r\n        desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    endpointResolutionError: {\r\n        code: \"endpoints_resolution_error\",\r\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\r\n    },\r\n    networkError: {\r\n        code: \"network_error\",\r\n        desc: \"Network request failed. Please check network trace to determine root cause.\"\r\n    },\r\n    unableToGetOpenidConfigError: {\r\n        code: \"openid_config_error\",\r\n        desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\r\n    },\r\n    hashNotDeserialized: {\r\n        code: \"hash_not_deserialized\",\r\n        desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\r\n    },\r\n    blankGuidGenerated: {\r\n        code: \"blank_guid_generated\",\r\n        desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\r\n    },\r\n    invalidStateError: {\r\n        code: \"invalid_state\",\r\n        desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\r\n    },\r\n    stateMismatchError: {\r\n        code: \"state_mismatch\",\r\n        desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\r\n    },\r\n    stateNotFoundError: {\r\n        code: \"state_not_found\",\r\n        desc: \"State not found\"\r\n    },\r\n    nonceMismatchError: {\r\n        code: \"nonce_mismatch\",\r\n        desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\r\n    },\r\n    nonceNotFoundError: {\r\n        code: \"nonce_not_found\",\r\n        desc: \"nonce not found\"\r\n    },\r\n    noTokensFoundError: {\r\n        code: \"no_tokens_found\",\r\n        desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\r\n    },\r\n    multipleMatchingTokens: {\r\n        code: \"multiple_matching_tokens\",\r\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n            \"Call AcquireToken again providing more requirements such as authority or account.\"\r\n    },\r\n    multipleMatchingAccounts: {\r\n        code: \"multiple_matching_accounts\",\r\n        desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\r\n    },\r\n    multipleMatchingAppMetadata: {\r\n        code: \"multiple_matching_appMetadata\",\r\n        desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\r\n    },\r\n    tokenRequestCannotBeMade: {\r\n        code: \"request_cannot_be_made\",\r\n        desc: \"Token request cannot be made without authorization code or refresh token.\"\r\n    },\r\n    appendEmptyScopeError: {\r\n        code: \"cannot_append_empty_scope\",\r\n        desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\r\n    },\r\n    removeEmptyScopeError: {\r\n        code: \"cannot_remove_empty_scope\",\r\n        desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\r\n    },\r\n    appendScopeSetError: {\r\n        code: \"cannot_append_scopeset\",\r\n        desc: \"Cannot append ScopeSet due to error.\"\r\n    },\r\n    emptyInputScopeSetError: {\r\n        code: \"empty_input_scopeset\",\r\n        desc: \"Empty input ScopeSet cannot be processed.\"\r\n    },\r\n    DeviceCodePollingCancelled: {\r\n        code: \"device_code_polling_cancelled\",\r\n        desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\r\n    },\r\n    DeviceCodeExpired: {\r\n        code: \"device_code_expired\",\r\n        desc: \"Device code is expired.\"\r\n    },\r\n    DeviceCodeUnknownError: {\r\n        code: \"device_code_unknown_error\",\r\n        desc: \"Device code stopped polling for unknown reasons.\"\r\n    },\r\n    NoAccountInSilentRequest: {\r\n        code: \"no_account_in_silent_request\",\r\n        desc: \"Please pass an account object, silent flow is not supported without account information\"\r\n    },\r\n    invalidCacheRecord: {\r\n        code: \"invalid_cache_record\",\r\n        desc: \"Cache record object was null or undefined.\"\r\n    },\r\n    invalidCacheEnvironment: {\r\n        code: \"invalid_cache_environment\",\r\n        desc: \"Invalid environment when attempting to create cache entry\"\r\n    },\r\n    noAccountFound: {\r\n        code: \"no_account_found\",\r\n        desc: \"No account found in cache for given key.\"\r\n    },\r\n    CachePluginError: {\r\n        code: \"no cache plugin set on CacheManager\",\r\n        desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\r\n    },\r\n    noCryptoObj: {\r\n        code: \"no_crypto_object\",\r\n        desc: \"No crypto object detected. This is required for the following operation: \"\r\n    },\r\n    invalidCacheType: {\r\n        code: \"invalid_cache_type\",\r\n        desc: \"Invalid cache type\"\r\n    },\r\n    unexpectedAccountType: {\r\n        code: \"unexpected_account_type\",\r\n        desc: \"Unexpected account type.\"\r\n    },\r\n    unexpectedCredentialType: {\r\n        code: \"unexpected_credential_type\",\r\n        desc: \"Unexpected credential type.\"\r\n    },\r\n    invalidAssertion: {\r\n        code: \"invalid_assertion\",\r\n        desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\r\n    },\r\n    invalidClientCredential: {\r\n        code: \"invalid_client_credential\",\r\n        desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\r\n    },\r\n    tokenRefreshRequired: {\r\n        code: \"token_refresh_required\",\r\n        desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\r\n    },\r\n    userTimeoutReached: {\r\n        code: \"user_timeout_reached\",\r\n        desc: \"User defined timeout for device code polling reached\",\r\n    },\r\n    tokenClaimsRequired: {\r\n        code: \"token_claims_cnf_required_for_signedjwt\",\r\n        desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\r\n    },\r\n    noAuthorizationCodeFromServer: {\r\n        code: \"authorization_code_missing_from_server_response\",\r\n        desc: \"Server response does not contain an authorization code to proceed\"\r\n    },\r\n    noAzureRegionDetected: {\r\n        code: \"no_azure_region_detected\",\r\n        desc: \"No azure region was detected and no fallback was made available\"\r\n    },\r\n    accessTokenEntityNullError: {\r\n        code: \"access_token_entity_null\",\r\n        desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\r\n    }\r\n};\r\n\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nexport class ClientAuthError extends AuthError {\r\n\r\n    constructor(errorCode: string, errorMessage?: string) {\r\n        super(errorCode, errorMessage);\r\n        this.name = \"ClientAuthError\";\r\n\r\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when client info object doesn't decode correctly.\r\n     * @param caughtError\r\n     */\r\n    static createClientInfoDecodingError(caughtError: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code,\r\n            `${ClientAuthErrorMessage.clientInfoDecodingError.desc} Failed with error: ${caughtError}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown if the client info is empty.\r\n     * @param rawClientInfo\r\n     */\r\n    static createClientInfoEmptyError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code,\r\n            `${ClientAuthErrorMessage.clientInfoEmptyError.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the id token extraction errors out.\r\n     * @param err\r\n     */\r\n    static createTokenParsingError(caughtExtractionError: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code,\r\n            `${ClientAuthErrorMessage.tokenParsingError.desc} Failed with error: ${caughtExtractionError}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the id token string is null or empty.\r\n     * @param invalidRawTokenString\r\n     */\r\n    static createTokenNullOrEmptyError(invalidRawTokenString: string) : ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code,\r\n            `${ClientAuthErrorMessage.nullOrEmptyToken.desc} Raw Token Value: ${invalidRawTokenString}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n     */\r\n    static createEndpointDiscoveryIncompleteError(errDetail: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code,\r\n            `${ClientAuthErrorMessage.endpointResolutionError.desc} Detail: ${errDetail}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the fetch client throws\r\n     */\r\n    static createNetworkError(endpoint: string, errDetail: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.networkError.code,\r\n            `${ClientAuthErrorMessage.networkError.desc} | Fetch client threw: ${errDetail} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\r\n     */\r\n    static createUnableToGetOpenidConfigError(errDetail: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code,\r\n            `${ClientAuthErrorMessage.unableToGetOpenidConfigError.desc} Attempted to retrieve endpoints from: ${errDetail}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the hash cannot be deserialized.\r\n     * @param hashParamObj\r\n     */\r\n    static createHashNotDeserializedError(hashParamObj: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code,\r\n            `${ClientAuthErrorMessage.hashNotDeserialized.desc} Given Object: ${hashParamObj}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the state cannot be parsed.\r\n     * @param invalidState\r\n     */\r\n    static createInvalidStateError(invalidState: string, errorString?: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code,\r\n            `${ClientAuthErrorMessage.invalidStateError.desc} Invalid State: ${invalidState}, Root Err: ${errorString}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when two states do not match.\r\n     */\r\n    static createStateMismatchError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code,\r\n            ClientAuthErrorMessage.stateMismatchError.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the state is not present\r\n     * @param missingState\r\n     */\r\n    static createStateNotFoundError(missingState: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code,\r\n            `${ClientAuthErrorMessage.stateNotFoundError.desc}:  ${missingState}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the nonce does not match.\r\n     */\r\n    static createNonceMismatchError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code,\r\n            ClientAuthErrorMessage.nonceMismatchError.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the mnonce is not present\r\n     * @param missingNonce\r\n     */\r\n    static createNonceNotFoundError(missingNonce: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code,\r\n            `${ClientAuthErrorMessage.nonceNotFoundError.desc}:  ${missingNonce}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the authorization code required for a token request is null or empty.\r\n     */\r\n    static createNoTokensFoundError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noTokensFoundError.code, ClientAuthErrorMessage.noTokensFoundError.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when multiple tokens are in cache.\r\n     */\r\n    static createMultipleMatchingTokensInCacheError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code,\r\n            `${ClientAuthErrorMessage.multipleMatchingTokens.desc}.`);\r\n    }\r\n\r\n    /**\r\n     * Throws error when multiple accounts are in cache for the given params\r\n     */\r\n    static createMultipleMatchingAccountsInCacheError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code,\r\n            ClientAuthErrorMessage.multipleMatchingAccounts.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when multiple appMetada are in cache for the given clientId.\r\n     */\r\n    static createMultipleMatchingAppMetadataInCacheError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code,\r\n            ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n     */\r\n    static createTokenRequestCannotBeMadeError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when attempting to append a null, undefined or empty scope to a set\r\n     * @param givenScope\r\n     */\r\n    static createAppendEmptyScopeToSetError(givenScope: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, `${ClientAuthErrorMessage.appendEmptyScopeError.desc} Given Scope: ${givenScope}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error when attempting to append a null, undefined or empty scope to a set\r\n     * @param givenScope\r\n     */\r\n    static createRemoveEmptyScopeFromSetError(givenScope: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, `${ClientAuthErrorMessage.removeEmptyScopeError.desc} Given Scope: ${givenScope}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error when attempting to append null or empty ScopeSet.\r\n     * @param appendError\r\n     */\r\n    static createAppendScopeSetError(appendError: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, `${ClientAuthErrorMessage.appendScopeSetError.desc} Detail Error: ${appendError}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if ScopeSet is null or undefined.\r\n     * @param givenScopeSet\r\n     */\r\n    static createEmptyInputScopeSetError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, `${ClientAuthErrorMessage.emptyInputScopeSetError.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\r\n     */\r\n    static createDeviceCodeCancelledError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, `${ClientAuthErrorMessage.DeviceCodePollingCancelled.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if device code is expired\r\n     */\r\n    static createDeviceCodeExpiredError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, `${ClientAuthErrorMessage.DeviceCodeExpired.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if device code is expired\r\n     */\r\n    static createDeviceCodeUnknownError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, `${ClientAuthErrorMessage.DeviceCodeUnknownError.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error when silent requests are made without an account object\r\n     */\r\n    static createNoAccountInSilentRequestError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, `${ClientAuthErrorMessage.NoAccountInSilentRequest.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error when cache record is null or undefined.\r\n     */\r\n    static createNullOrUndefinedCacheRecord(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\r\n     */\r\n    static createInvalidCacheEnvironmentError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when account is not found in cache.\r\n     */\r\n    static createNoAccountFoundError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error if ICachePlugin not set on CacheManager.\r\n     */\r\n    static createCachePluginError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, `${ClientAuthErrorMessage.CachePluginError.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if crypto object not found.\r\n     * @param operationName\r\n     */\r\n    static createNoCryptoObjectError(operationName: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, `${ClientAuthErrorMessage.noCryptoObj.desc}${operationName}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if cache type is invalid.\r\n     */\r\n    static createInvalidCacheTypeError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, `${ClientAuthErrorMessage.invalidCacheType.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if unexpected account type.\r\n     */\r\n    static createUnexpectedAccountTypeError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, `${ClientAuthErrorMessage.unexpectedAccountType.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if unexpected credential type.\r\n     */\r\n    static createUnexpectedCredentialTypeError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, `${ClientAuthErrorMessage.unexpectedCredentialType.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if client assertion is not valid.\r\n     */\r\n    static createInvalidAssertionError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, `${ClientAuthErrorMessage.invalidAssertion.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if client assertion is not valid.\r\n     */\r\n    static createInvalidCredentialError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, `${ClientAuthErrorMessage.invalidClientCredential.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if token cannot be retrieved from cache due to refresh being required.\r\n     */\r\n    static createRefreshRequiredError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error if the user defined timeout is reached.\r\n     */\r\n    static createUserTimeoutReachedError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\r\n    }\r\n\r\n    /*\r\n     * Throws error if token claims are not populated for a signed jwt generation\r\n     */\r\n    static createTokenClaimsRequiredError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when the authorization code is missing from the server response\r\n     */\r\n    static createNoAuthCodeInServerResponseError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}