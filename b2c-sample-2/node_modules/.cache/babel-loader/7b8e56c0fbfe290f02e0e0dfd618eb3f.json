{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { AADServerParamKeys, Constants as Constants$1, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\nimport { ScopeSet as ScopeSet$1 } from './ScopeSet.js';\nimport { RequestValidator as RequestValidator$1 } from './RequestValidator.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RequestParameterBuilder = /** @class */function () {\n  function RequestParameterBuilder() {\n    this.parameters = new Map();\n  }\n  /**\r\n   * add response_type = code\r\n   */\n  RequestParameterBuilder.prototype.addResponseTypeCode = function () {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants$1.CODE_RESPONSE_TYPE));\n  };\n  /**\r\n   * add response_mode. defaults to query.\r\n   * @param responseMode\r\n   */\n  RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {\n    this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  };\n  /**\r\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n   * @param scopeSet\r\n   * @param addOidcScopes\r\n   */\n  RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {\n    if (addOidcScopes === void 0) {\n      addOidcScopes = true;\n    }\n    var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];\n    var scopeSet = new ScopeSet$1(requestScopes);\n    this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  };\n  /**\r\n   * add clientId\r\n   * @param clientId\r\n   */\n  RequestParameterBuilder.prototype.addClientId = function (clientId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n  };\n  /**\r\n   * add redirect_uri\r\n   * @param redirectUri\r\n   */\n  RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {\n    RequestValidator$1.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add post logout redirectUri\r\n   * @param redirectUri\r\n   */\n  RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {\n    RequestValidator$1.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add id_token_hint to logout request\r\n   * @param idTokenHint\r\n   */\n  RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {\n    this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  };\n  /**\r\n   * add domain_hint\r\n   * @param domainHint\r\n   */\n  RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {\n    this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n  };\n  /**\r\n   * add login_hint\r\n   * @param loginHint\r\n   */\n  RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {\n    this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n   * @param loginHint\r\n   */\n  RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"UPN:\" + loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for account object\r\n   * @param loginHint\r\n   */\n  RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid));\n  };\n  /**\r\n   * add sid\r\n   * @param sid\r\n   */\n  RequestParameterBuilder.prototype.addSid = function (sid) {\n    this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n  };\n  /**\r\n   * add claims\r\n   * @param claims\r\n   */\n  RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {\n    var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator$1.validateClaims(mergedClaims);\n    this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n  };\n  /**\r\n   * add correlationId\r\n   * @param correlationId\r\n   */\n  RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  };\n  /**\r\n   * add library info query params\r\n   * @param libraryInfo\r\n   */\n  RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n  };\n  /**\r\n   * add prompt\r\n   * @param prompt\r\n   */\n  RequestParameterBuilder.prototype.addPrompt = function (prompt) {\n    RequestValidator$1.validatePrompt(prompt);\n    this.parameters.set(\"\" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));\n  };\n  /**\r\n   * add state\r\n   * @param state\r\n   */\n  RequestParameterBuilder.prototype.addState = function (state) {\n    if (!StringUtils$1.isEmpty(state)) {\n      this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n    }\n  };\n  /**\r\n   * add nonce\r\n   * @param nonce\r\n   */\n  RequestParameterBuilder.prototype.addNonce = function (nonce) {\n    this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n  };\n  /**\r\n   * add code_challenge and code_challenge_method\r\n   * - throw if either of them are not passed\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n  RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    RequestValidator$1.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw ClientConfigurationError$1.createInvalidCodeChallengeParamsError();\n    }\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n  RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {\n    this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n  RequestParameterBuilder.prototype.addDeviceCode = function (code) {\n    this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `refreshToken` passed by the user\r\n   * @param refreshToken\r\n   */\n  RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {\n    this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  };\n  /**\r\n   * add the `code_verifier` passed by the user to exchange for a token\r\n   * @param codeVerifier\r\n   */\n  RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {\n    this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  };\n  /**\r\n   * add client_secret\r\n   * @param clientSecret\r\n   */\n  RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {\n    this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n  };\n  /**\r\n   * add clientAssertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n  RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n  };\n  /**\r\n   * add clientAssertionType for confidential client flows\r\n   * @param clientAssertionType\r\n   */\n  RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n  };\n  /**\r\n   * add OBO assertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n  RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {\n    this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n  RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {\n    this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n  RequestParameterBuilder.prototype.addGrantType = function (grantType) {\n    this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n  };\n  /**\r\n   * add client info\r\n   *\r\n   */\n  RequestParameterBuilder.prototype.addClientInfo = function () {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  };\n  /**\r\n   * add extraQueryParams\r\n   * @param eQparams\r\n   */\n  RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {\n    var _this = this;\n    RequestValidator$1.sanitizeEQParams(eQparams, this.parameters);\n    Object.keys(eQparams).forEach(function (key) {\n      _this.parameters.set(key, eQparams[key]);\n    });\n  };\n  RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {\n    var mergedClaims;\n    // Parse provided claims into JSON object or initialize empty object\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw ClientConfigurationError$1.createInvalidClaimsRequestError();\n      }\n    }\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      }\n      // Add xms_cc claim with provided clientCapabilities to access_token key\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n    return JSON.stringify(mergedClaims);\n  };\n  /**\r\n   * adds `username` for Password Grant flow\r\n   * @param username\r\n   */\n  RequestParameterBuilder.prototype.addUsername = function (username) {\n    this.parameters.set(PasswordGrantConstants.username, username);\n  };\n  /**\r\n   * adds `password` for Password Grant flow\r\n   * @param password\r\n   */\n  RequestParameterBuilder.prototype.addPassword = function (password) {\n    this.parameters.set(PasswordGrantConstants.password, password);\n  };\n  /**\r\n   * add pop_jwk to query params\r\n   * @param cnfString\r\n   */\n  RequestParameterBuilder.prototype.addPopToken = function (cnfString) {\n    if (!StringUtils$1.isEmpty(cnfString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n    }\n  };\n  /**\r\n   * add server telemetry fields\r\n   * @param serverTelemetryManager\r\n   */\n  RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  };\n  /**\r\n   * Adds parameter that indicates to the server that throttling is supported\r\n   */\n  RequestParameterBuilder.prototype.addThrottling = function () {\n    this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  };\n  /**\r\n   * Utility to create a URL from the params map\r\n   */\n  RequestParameterBuilder.prototype.createQueryString = function () {\n    var queryParameterArray = new Array();\n    this.parameters.forEach(function (value, key) {\n      queryParameterArray.push(key + \"=\" + value);\n    });\n    return queryParameterArray.join(\"&\");\n  };\n  return RequestParameterBuilder;\n}();\nexport { RequestParameterBuilder };","map":{"version":3,"mappings":"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","names":["parameters","Map","RequestParameterBuilder","set","AADServerParamKeys","RESPONSE_TYPE","encodeURIComponent","Constants","CODE_RESPONSE_TYPE","responseMode","RESPONSE_MODE","ResponseMode","QUERY","scopes","addOidcScopes","requestScopes","OIDC_DEFAULT_SCOPES","scopeSet","ScopeSet","SCOPE","printScopes","clientId","CLIENT_ID","redirectUri","RequestValidator","validateRedirectUri","REDIRECT_URI","POST_LOGOUT_URI","idTokenHint","ID_TOKEN_HINT","domainHint","SSOTypes","DOMAIN_HINT","loginHint","LOGIN_HINT","HeaderNames","CCS_HEADER","clientInfo","uid","utid","sid","SID","claims","clientCapabilities","mergedClaims","addClientCapabilitiesToClaims","validateClaims","CLAIMS","correlationId","CLIENT_REQUEST_ID","libraryInfo","X_CLIENT_SKU","sku","X_CLIENT_VER","version","X_CLIENT_OS","os","X_CLIENT_CPU","cpu","prompt","validatePrompt","PROMPT","state","StringUtils","isEmpty","STATE","nonce","NONCE","codeChallenge","codeChallengeMethod","validateCodeChallengeParams","CODE_CHALLENGE","CODE_CHALLENGE_METHOD","ClientConfigurationError","createInvalidCodeChallengeParamsError","code","CODE","DEVICE_CODE","refreshToken","REFRESH_TOKEN","codeVerifier","CODE_VERIFIER","clientSecret","CLIENT_SECRET","clientAssertion","CLIENT_ASSERTION","clientAssertionType","CLIENT_ASSERTION_TYPE","oboAssertion","OBO_ASSERTION","tokenUse","REQUESTED_TOKEN_USE","grantType","GRANT_TYPE","CLIENT_INFO","eQparams","sanitizeEQParams","Object","keys","forEach","key","_this","JSON","parse","e","createInvalidClaimsRequestError","length","hasOwnProperty","ClaimsRequestKeys","ACCESS_TOKEN","XMS_CC","values","stringify","username","PasswordGrantConstants","password","cnfString","TOKEN_TYPE","AuthenticationScheme","POP","REQ_CNF","serverTelemetryManager","X_CLIENT_CURR_TELEM","generateCurrentRequestHeaderValue","X_CLIENT_LAST_TELEM","generateLastRequestHeaderValue","X_MS_LIB_CAPABILITY","ThrottlingConstants","X_MS_LIB_CAPABILITY_VALUE","queryParameterArray","Array","value","push","join"],"sources":["../../src/request/RequestParameterBuilder.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AADServerParamKeys, Constants, ResponseMode, SSOTypes, CLIENT_INFO, AuthenticationScheme, ClaimsRequestKeys, PasswordGrantConstants, OIDC_DEFAULT_SCOPES, ThrottlingConstants, HeaderNames} from \"../utils/Constants\";\r\nimport { ScopeSet } from \"./ScopeSet\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { StringDict } from \"../utils/MsalTypes\";\r\nimport { RequestValidator } from \"./RequestValidator\";\r\nimport { LibraryInfo } from \"../config/ClientConfiguration\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\r\nimport { ClientInfo } from \"../account/ClientInfo\";\r\n\r\nexport class RequestParameterBuilder {\r\n\r\n    private parameters: Map<string, string>;\r\n\r\n    constructor() {\r\n        this.parameters = new Map<string, string>();\r\n    }\r\n\r\n    /**\r\n     * add response_type = code\r\n     */\r\n    addResponseTypeCode(): void {\r\n        this.parameters.set(\r\n            AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * add response_mode. defaults to query.\r\n     * @param responseMode\r\n     */\r\n    addResponseMode(responseMode?: ResponseMode): void {\r\n        this.parameters.set(\r\n            AADServerParamKeys.RESPONSE_MODE,\r\n            encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n     * @param scopeSet\r\n     * @param addOidcScopes\r\n     */\r\n    addScopes(scopes: string[], addOidcScopes: boolean = true): void {\r\n        const requestScopes = addOidcScopes ? [...scopes || [], ...OIDC_DEFAULT_SCOPES] : scopes || [];\r\n        const scopeSet = new ScopeSet(requestScopes);\r\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\r\n    }\r\n\r\n    /**\r\n     * add clientId\r\n     * @param clientId\r\n     */\r\n    addClientId(clientId: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\r\n    }\r\n\r\n    /**\r\n     * add redirect_uri\r\n     * @param redirectUri\r\n     */\r\n    addRedirectUri(redirectUri: string): void {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\r\n    }\r\n\r\n    /**\r\n     * add post logout redirectUri\r\n     * @param redirectUri\r\n     */\r\n    addPostLogoutRedirectUri(redirectUri: string): void {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\r\n    }\r\n\r\n    /**\r\n     * add id_token_hint to logout request\r\n     * @param idTokenHint\r\n     */\r\n    addIdTokenHint(idTokenHint: string): void {\r\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\r\n    }\r\n\r\n    /**\r\n     * add domain_hint\r\n     * @param domainHint\r\n     */\r\n    addDomainHint(domainHint: string): void {\r\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\r\n    }\r\n\r\n    /**\r\n     * add login_hint\r\n     * @param loginHint\r\n     */\r\n    addLoginHint(loginHint: string): void {\r\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\r\n    }\r\n\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n     * @param loginHint \r\n     */\r\n    addCcsUpn(loginHint: string): void {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\r\n    }\r\n\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for account object\r\n     * @param loginHint \r\n     */\r\n    addCcsOid(clientInfo: ClientInfo): void {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\r\n    }\r\n\r\n    /**\r\n     * add sid\r\n     * @param sid\r\n     */\r\n    addSid(sid: string): void {\r\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\r\n    }\r\n\r\n    /**\r\n     * add claims\r\n     * @param claims\r\n     */\r\n    addClaims(claims?: string, clientCapabilities?: Array<string>): void {\r\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\r\n        RequestValidator.validateClaims(mergedClaims);\r\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\r\n    }\r\n\r\n    /**\r\n     * add correlationId\r\n     * @param correlationId\r\n     */\r\n    addCorrelationId(correlationId: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\r\n    }\r\n\r\n    /**\r\n     * add library info query params\r\n     * @param libraryInfo\r\n     */\r\n    addLibraryInfo(libraryInfo: LibraryInfo): void {\r\n        // Telemetry Info\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\r\n    }\r\n\r\n    /**\r\n     * add prompt\r\n     * @param prompt\r\n     */\r\n    addPrompt(prompt: string): void {\r\n        RequestValidator.validatePrompt(prompt);\r\n        this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\r\n    }\r\n\r\n    /**\r\n     * add state\r\n     * @param state\r\n     */\r\n    addState(state: string): void {\r\n        if (!StringUtils.isEmpty(state)) {\r\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add nonce\r\n     * @param nonce\r\n     */\r\n    addNonce(nonce: string): void {\r\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\r\n    }\r\n\r\n    /**\r\n     * add code_challenge and code_challenge_method\r\n     * - throw if either of them are not passed\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    addCodeChallengeParams(\r\n        codeChallenge: string,\r\n        codeChallengeMethod: string\r\n    ): void {\r\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\r\n        if (codeChallenge && codeChallengeMethod) {\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\r\n        } else {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    addAuthorizationCode(code: string): void {\r\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\r\n    }\r\n\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    addDeviceCode(code: string): void {\r\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\r\n    }\r\n\r\n    /**\r\n     * add the `refreshToken` passed by the user\r\n     * @param refreshToken\r\n     */\r\n    addRefreshToken(refreshToken: string): void {\r\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\r\n    }\r\n\r\n    /**\r\n     * add the `code_verifier` passed by the user to exchange for a token\r\n     * @param codeVerifier\r\n     */\r\n    addCodeVerifier(codeVerifier: string): void {\r\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\r\n    }\r\n\r\n    /**\r\n     * add client_secret\r\n     * @param clientSecret\r\n     */\r\n    addClientSecret(clientSecret: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\r\n    }\r\n\r\n    /**\r\n     * add clientAssertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    addClientAssertion(clientAssertion: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\r\n    }\r\n\r\n    /**\r\n     * add clientAssertionType for confidential client flows\r\n     * @param clientAssertionType\r\n     */\r\n    addClientAssertionType(clientAssertionType: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\r\n    }\r\n\r\n    /**\r\n     * add OBO assertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    addOboAssertion(oboAssertion: string): void {\r\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\r\n    }\r\n\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    addRequestTokenUse(tokenUse: string): void {\r\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\r\n    }\r\n\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    addGrantType(grantType: string): void {\r\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\r\n    }\r\n\r\n    /**\r\n     * add client info\r\n     *\r\n     */\r\n    addClientInfo(): void {\r\n        this.parameters.set(CLIENT_INFO, \"1\");\r\n    }\r\n\r\n    /**\r\n     * add extraQueryParams\r\n     * @param eQparams\r\n     */\r\n    addExtraQueryParameters(eQparams: StringDict): void {\r\n        RequestValidator.sanitizeEQParams(eQparams, this.parameters);\r\n        Object.keys(eQparams).forEach((key) => {\r\n            this.parameters.set(key, eQparams[key]);\r\n        });\r\n    }\r\n\r\n    addClientCapabilitiesToClaims(claims?: string, clientCapabilities?: Array<string>): string {\r\n        let mergedClaims: object;\r\n\r\n        // Parse provided claims into JSON object or initialize empty object\r\n        if (!claims) {\r\n            mergedClaims = {};\r\n        } else {\r\n            try {\r\n                mergedClaims = JSON.parse(claims);\r\n            } catch(e) {\r\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n            }\r\n        }\r\n\r\n        if (clientCapabilities && clientCapabilities.length > 0) {\r\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)){\r\n                // Add access_token key to claims object\r\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\r\n            }\r\n\r\n            // Add xms_cc claim with provided clientCapabilities to access_token key\r\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\r\n                values: clientCapabilities\r\n            };\r\n        }\r\n\r\n        return JSON.stringify(mergedClaims);\r\n    }\r\n\r\n    /**\r\n     * adds `username` for Password Grant flow\r\n     * @param username\r\n     */\r\n    addUsername(username: string): void {\r\n        this.parameters.set(PasswordGrantConstants.username, username);\r\n    }\r\n\r\n    /**\r\n     * adds `password` for Password Grant flow\r\n     * @param password\r\n     */\r\n    addPassword(password: string): void {\r\n        this.parameters.set(PasswordGrantConstants.password, password);\r\n    }\r\n\r\n    /**\r\n     * add pop_jwk to query params\r\n     * @param cnfString\r\n     */\r\n    addPopToken(cnfString: string): void {\r\n        if (!StringUtils.isEmpty(cnfString)) {\r\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\r\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add server telemetry fields\r\n     * @param serverTelemetryManager \r\n     */\r\n    addServerTelemetry(serverTelemetryManager: ServerTelemetryManager): void {\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\r\n    }\r\n\r\n    /**\r\n     * Adds parameter that indicates to the server that throttling is supported\r\n     */\r\n    addThrottling(): void {\r\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\r\n    }\r\n\r\n    /**\r\n     * Utility to create a URL from the params map\r\n     */\r\n    createQueryString(): string {\r\n        const queryParameterArray: Array<string> = new Array<string>();\r\n\r\n        this.parameters.forEach((value, key) => {\r\n            queryParameterArray.push(`${key}=${value}`);\r\n        });\r\n\r\n        return queryParameterArray.join(\"&\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}