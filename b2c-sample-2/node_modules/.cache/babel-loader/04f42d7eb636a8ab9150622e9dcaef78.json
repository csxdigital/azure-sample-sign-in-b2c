{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { CredentialType, GrantType, AADServerParamKeys, CacheOutcome, Constants as Constants$1 } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { ScopeSet as ScopeSet$1 } from '../request/ScopeSet.js';\nimport { AuthToken as AuthToken$1 } from '../account/AuthToken.js';\nimport { BaseClient as BaseClient$1 } from './BaseClient.js';\nimport { RequestParameterBuilder as RequestParameterBuilder$1 } from '../request/RequestParameterBuilder.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { ResponseHandler as ResponseHandler$1 } from '../response/ResponseHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * On-Behalf-Of client\r\n */\nvar OnBehalfOfClient = /** @class */function (_super) {\n  __extends(OnBehalfOfClient, _super);\n  function OnBehalfOfClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Public API to acquire tokens with on behalf of flow\r\n   * @param request\r\n   */\n  OnBehalfOfClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAuthenticationResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.scopeSet = new ScopeSet$1(request.scopes || []);\n            if (!request.skipCache) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            return [4 /*yield*/, this.getCachedAuthenticationResult(request)];\n          case 3:\n            cachedAuthenticationResult = _a.sent();\n            if (!cachedAuthenticationResult) return [3 /*break*/, 4];\n            return [2 /*return*/, cachedAuthenticationResult];\n          case 4:\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 5:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * look up cache for tokens\r\n   * @param request\r\n   */\n  OnBehalfOfClient.prototype.getCachedAuthenticationResult = function (request) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedAccessToken, cachedIdToken, idTokenObject, cachedAccount, localAccountId, accountInfo;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            cachedAccessToken = this.readAccessTokenFromCache();\n            if (!cachedAccessToken || TimeUtils$1.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Update the server telemetry outcome\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(!cachedAccessToken ? CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED : CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              return [2 /*return*/, null];\n            }\n            cachedIdToken = this.readIdTokenFromCache(request);\n            cachedAccount = null;\n            if (cachedIdToken) {\n              idTokenObject = new AuthToken$1(cachedIdToken.secret, this.config.cryptoInterface);\n              localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\n              accountInfo = {\n                homeAccountId: cachedIdToken.homeAccountId,\n                environment: cachedIdToken.environment,\n                tenantId: cachedIdToken.realm,\n                username: Constants$1.EMPTY_STRING,\n                localAccountId: localAccountId || \"\"\n              };\n              cachedAccount = this.readAccountFromCache(accountInfo);\n            }\n            return [4 /*yield*/, ResponseHandler$1.generateAuthenticationResult(this.cryptoUtils, this.authority, {\n              account: cachedAccount,\n              accessToken: cachedAccessToken,\n              idToken: cachedIdToken,\n              refreshToken: null,\n              appMetadata: null\n            }, true, request, idTokenObject)];\n          case 1:\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * read access token from cache TODO: CacheManager API should be used here\r\n   * @param request\r\n   */\n  OnBehalfOfClient.prototype.readAccessTokenFromCache = function () {\n    var accessTokenFilter = {\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ACCESS_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      target: this.scopeSet.printScopesLowerCase()\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\n    var accessTokens = Object.keys(credentialCache.accessTokens).map(function (key) {\n      return credentialCache.accessTokens[key];\n    });\n    var numAccessTokens = accessTokens.length;\n    if (numAccessTokens < 1) {\n      return null;\n    } else if (numAccessTokens > 1) {\n      throw ClientAuthError$1.createMultipleMatchingTokensInCacheError();\n    }\n    return accessTokens[0];\n  };\n  /**\r\n   * read idtoken from cache TODO: CacheManager API should be used here instead\r\n   * @param request\r\n   */\n  OnBehalfOfClient.prototype.readIdTokenFromCache = function (request) {\n    var idTokenFilter = {\n      environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\n      credentialType: CredentialType.ID_TOKEN,\n      clientId: this.config.authOptions.clientId,\n      realm: this.authority.tenant,\n      oboAssertion: request.oboAssertion\n    };\n    var credentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\n    var idTokens = Object.keys(credentialCache.idTokens).map(function (key) {\n      return credentialCache.idTokens[key];\n    });\n    // When acquiring a token on behalf of an application, there might not be an id token in the cache\n    if (idTokens.length < 1) {\n      return null;\n    }\n    return idTokens[0];\n  };\n  /**\r\n   * read account from cache, TODO: CacheManager API should be used here instead\r\n   * @param account\r\n   */\n  OnBehalfOfClient.prototype.readAccountFromCache = function (account) {\n    return this.cacheManager.readAccountFromCache(account);\n  };\n  /**\r\n   * Make a network call to the server requesting credentials\r\n   * @param request\r\n   * @param authority\r\n   */\n  OnBehalfOfClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, headers, thumbprint, reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            requestBody = this.createTokenRequestBody(request);\n            headers = this.createTokenRequestHeaders();\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: request.authority,\n              scopes: request.scopes\n            };\n            reqTimestamp = TimeUtils$1.nowSeconds();\n            return [4 /*yield*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler$1(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [4 /*yield*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request)];\n          case 2:\n            tokenResponse = _a.sent();\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * generate a server request in accepable format\r\n   * @param request\r\n   */\n  OnBehalfOfClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.JWT_BEARER);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\n    parameterBuilder.addOboAssertion(request.oboAssertion);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return OnBehalfOfClient;\n}(BaseClient$1);\nexport { OnBehalfOfClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","OnBehalfOfClient","request","scopeSet","ScopeSet","scopes","skipCache","executeTokenRequest","authority","_a","getCachedAuthenticationResult","cachedAuthenticationResult","cachedAccessToken","readAccessTokenFromCache","TimeUtils","isTokenExpired","expiresOn","config","systemOptions","tokenRenewalOffsetSeconds","serverTelemetryManager","setCacheOutcome","CacheOutcome","CACHED_ACCESS_TOKEN_EXPIRED","NO_CACHED_ACCESS_TOKEN","cachedIdToken","readIdTokenFromCache","cachedAccount","idTokenObject","AuthToken","secret","cryptoInterface","localAccountId","claims","oid","sub","accountInfo","homeAccountId","environment","tenantId","realm","username","Constants","EMPTY_STRING","readAccountFromCache","ResponseHandler","generateAuthenticationResult","cryptoUtils","account","accessToken","idToken","refreshToken","appMetadata","_b","accessTokenFilter","canonicalAuthorityUrlComponents","HostNameAndPort","credentialType","CredentialType","ACCESS_TOKEN","clientId","authOptions","tenant","target","printScopesLowerCase","credentialCache","cacheManager","getCredentialsFilteredBy","accessTokens","Object","keys","map","key","numAccessTokens","length","ClientAuthError","createMultipleMatchingTokensInCacheError","idTokenFilter","ID_TOKEN","oboAssertion","idTokens","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","thumbprint","reqTimestamp","nowSeconds","executePostToTokenEndpoint","tokenEndpoint","response","responseHandler","logger","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","tokenResponse","parameterBuilder","RequestParameterBuilder","addClientId","addScopes","addGrantType","GrantType","JWT_BEARER","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","addServerTelemetry","correlationId","createNewGuid","addCorrelationId","addRequestTokenUse","AADServerParamKeys","ON_BEHALF_OF","addOboAssertion","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","createQueryString","BaseClient"],"sources":["../../src/client/OnBehalfOfClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { GrantType, AADServerParamKeys , CredentialType, Constants, CacheOutcome } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { CommonOnBehalfOfRequest } from \"../request/CommonOnBehalfOfRequest\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { CredentialFilter, CredentialCache } from \"../cache/utils/CacheTypes\";\r\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\r\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\r\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { AccountInfo } from \"../account/AccountInfo\";\r\n\r\n/**\r\n * On-Behalf-Of client\r\n */\r\nexport class OnBehalfOfClient extends BaseClient {\r\n\r\n    private scopeSet: ScopeSet;\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Public API to acquire tokens with on behalf of flow\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\r\n        this.scopeSet = new ScopeSet(request.scopes || []);\r\n\r\n        if (request.skipCache) {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n\r\n        const cachedAuthenticationResult = await this.getCachedAuthenticationResult(request);\r\n        if (cachedAuthenticationResult) {\r\n            return cachedAuthenticationResult;\r\n        } else {\r\n            return await this.executeTokenRequest(request, this.authority);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * look up cache for tokens\r\n     * @param request\r\n     */\r\n    private async getCachedAuthenticationResult(request: CommonOnBehalfOfRequest): Promise<AuthenticationResult | null> {\r\n        const cachedAccessToken = this.readAccessTokenFromCache();\r\n        if (!cachedAccessToken ||\r\n            TimeUtils.isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n\r\n            // Update the server telemetry outcome\r\n            this.serverTelemetryManager?.setCacheOutcome(!cachedAccessToken ? CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED : CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n\r\n            return null;\r\n        }\r\n\r\n        const cachedIdToken = this.readIdTokenFromCache(request);\r\n        let idTokenObject: AuthToken | undefined;\r\n        let cachedAccount: AccountEntity | null = null;\r\n        if (cachedIdToken) {\r\n            idTokenObject = new AuthToken(cachedIdToken.secret, this.config.cryptoInterface);\r\n            const localAccountId = idTokenObject.claims.oid ? idTokenObject.claims.oid : idTokenObject.claims.sub;\r\n            const accountInfo: AccountInfo = {\r\n                homeAccountId: cachedIdToken.homeAccountId,\r\n                environment: cachedIdToken.environment,\r\n                tenantId: cachedIdToken.realm,\r\n                username: Constants.EMPTY_STRING,\r\n                localAccountId: localAccountId || \"\"\r\n            };\r\n\r\n            cachedAccount = this.readAccountFromCache(accountInfo);\r\n        }\r\n\r\n        return await ResponseHandler.generateAuthenticationResult(\r\n            this.cryptoUtils,\r\n            this.authority,\r\n            {\r\n                account: cachedAccount,\r\n                accessToken: cachedAccessToken,\r\n                idToken: cachedIdToken,\r\n                refreshToken: null,\r\n                appMetadata: null\r\n            },\r\n            true,\r\n            request,\r\n            idTokenObject);\r\n    }\r\n\r\n    /**\r\n     * read access token from cache TODO: CacheManager API should be used here\r\n     * @param request\r\n     */\r\n    private readAccessTokenFromCache(): AccessTokenEntity | null {\r\n        const accessTokenFilter: CredentialFilter = {\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ACCESS_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            target: this.scopeSet.printScopesLowerCase(),\r\n        };\r\n\r\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(accessTokenFilter);\r\n        const accessTokens = Object.keys(credentialCache.accessTokens).map(key => credentialCache.accessTokens[key]);\r\n\r\n        const numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            return null;\r\n        } else if (numAccessTokens > 1) {\r\n            throw ClientAuthError.createMultipleMatchingTokensInCacheError();\r\n        }\r\n        return accessTokens[0] as AccessTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * read idtoken from cache TODO: CacheManager API should be used here instead\r\n     * @param request\r\n     */\r\n    private readIdTokenFromCache(request: CommonOnBehalfOfRequest): IdTokenEntity | null {\r\n        const idTokenFilter: CredentialFilter = {\r\n            environment: this.authority.canonicalAuthorityUrlComponents.HostNameAndPort,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.config.authOptions.clientId,\r\n            realm: this.authority.tenant,\r\n            oboAssertion: request.oboAssertion\r\n        };\r\n\r\n        const credentialCache: CredentialCache = this.cacheManager.getCredentialsFilteredBy(idTokenFilter);\r\n        const idTokens = Object.keys(credentialCache.idTokens).map(key => credentialCache.idTokens[key]);\r\n        // When acquiring a token on behalf of an application, there might not be an id token in the cache\r\n        if (idTokens.length < 1) {\r\n            return null;\r\n        }\r\n        return idTokens[0] as IdTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * read account from cache, TODO: CacheManager API should be used here instead\r\n     * @param account\r\n     */\r\n    private readAccountFromCache(account: AccountInfo): AccountEntity | null {\r\n        return this.cacheManager.readAccountFromCache(account);\r\n    }\r\n\r\n    /**\r\n     * Make a network call to the server requesting credentials\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonOnBehalfOfRequest, authority: Authority)\r\n        : Promise<AuthenticationResult | null> {\r\n\r\n        const requestBody = this.createTokenRequestBody(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders();\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes\r\n        };\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        responseHandler.validateTokenResponse(response.body);\r\n        const tokenResponse = await responseHandler.handleServerTokenResponse(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request\r\n        );\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * generate a server request in accepable format\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonOnBehalfOfRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        parameterBuilder.addGrantType(GrantType.JWT_BEARER);\r\n\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n\r\n        parameterBuilder.addThrottling();\r\n        \r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        parameterBuilder.addRequestTokenUse(AADServerParamKeys.ON_BEHALF_OF);\r\n\r\n        parameterBuilder.addOboAssertion(request.oboAssertion);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}