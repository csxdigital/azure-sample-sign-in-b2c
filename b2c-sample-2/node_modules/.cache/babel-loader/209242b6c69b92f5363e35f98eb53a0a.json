{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ThrottlingUtils, ClientAuthError } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, BrowserConstants, ApiId } from '../utils/BrowserConstants.js';\nimport { InteractionHandler } from './InteractionHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar RedirectHandler = /** @class */function (_super) {\n  __extends(RedirectHandler, _super);\n  function RedirectHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger, browserCrypto) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this;\n    _this.browserCrypto = browserCrypto;\n    return _this;\n  }\n  /**\r\n   * Redirects window to given URL.\r\n   * @param urlNavigate\r\n   */\n  RedirectHandler.prototype.initiateAuthRequest = function (requestUrl, params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var navigationOptions, navigate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest called\");\n            if (!!StringUtils.isEmpty(requestUrl)) return [3 /*break*/, 7];\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\n            if (params.redirectStartPage) {\n              this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\n              this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\n            }\n            // Set interaction status in the library.\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\n            this.browserRequestLogger.infoPii(\"RedirectHandler.initiateAuthRequest: Navigate to: \" + requestUrl);\n            navigationOptions = {\n              apiId: ApiId.acquireTokenRedirect,\n              timeout: params.redirectTimeout,\n              noHistory: false\n            };\n            if (!(typeof params.onRedirectNavigate === \"function\")) return [3 /*break*/, 4];\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\n            navigate = params.onRedirectNavigate(requestUrl);\n            if (!(navigate !== false)) return [3 /*break*/, 2];\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\n            return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n          case 2:\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\n            return [2 /*return*/];\n          case 3:\n            return [3 /*break*/, 6];\n          case 4:\n            // Navigate window to request URL\n            this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\n            return [4 /*yield*/, params.navigationClient.navigateExternal(requestUrl, navigationOptions)];\n          case 5:\n            _a.sent();\n            return [2 /*return*/];\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            // Throw error if request URL is empty.\n            this.browserRequestLogger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\n            throw BrowserAuthError.createEmptyNavigationUriError();\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handle authorization code response in the window.\r\n   * @param hash\r\n   */\n  RedirectHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule, clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.verbose(\"RedirectHandler.handleCodeResponse called\");\n            // Check that location hash isn't empty.\n            if (StringUtils.isEmpty(locationHash)) {\n              throw BrowserAuthError.createEmptyHashError(locationHash);\n            }\n            // Interaction is completed - remove interaction status.\n            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\n            // Assign code to request\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            authCodeResponse.nonce = cachedNonce || undefined;\n            authCodeResponse.state = requestState;\n            // Add CCS parameters if available\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n            // Remove throttle if it exists\n            if (clientId) {\n              ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest.authority, this.authCodeRequest.scopes);\n            }\n            return [4 /*yield*/, this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  return RedirectHandler;\n}(InteractionHandler);\nexport { RedirectHandler };","map":{"version":3,"mappings":"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","names":["__extends","authCodeModule","storageImpl","authCodeRequest","browserRequestLogger","browserCrypto","_super","_this","RedirectHandler","requestUrl","params","verbose","StringUtils","isEmpty","redirectStartPage","browserStorage","setTemporaryCache","TemporaryCacheKeys","ORIGIN_URI","INTERACTION_STATUS_KEY","BrowserConstants","INTERACTION_IN_PROGRESS_VALUE","cacheCodeRequest","infoPii","navigationOptions","apiId","ApiId","acquireTokenRedirect","timeout","redirectTimeout","noHistory","onRedirectNavigate","navigate","navigationClient","navigateExternal","_a","info","BrowserAuthError","createEmptyNavigationUriError","locationHash","state","authority","networkModule","clientId","createEmptyHashError","removeItem","generateCacheKey","stateKey","generateStateKey","requestState","getTemporaryCache","ClientAuthError","createStateNotFoundError","authCodeResponse","authModule","handleFragmentResponse","nonceKey","generateNonceKey","cachedNonce","code","cloud_instance_host_name","updateTokenEndpointAuthority","nonce","undefined","client_info","clientInfo","cachedCcsCred","checkCcsCredentials","ccsCredential","ThrottlingUtils","removeThrottle","scopes","acquireToken","tokenResponse","cleanRequestByState","InteractionHandler"],"sources":["../../src/interaction_handler/RedirectHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthorizationCodeClient, StringUtils, CommonAuthorizationCodeRequest, ICrypto, AuthenticationResult, ThrottlingUtils, Authority, INetworkModule, ClientAuthError, Logger } from \"@azure/msal-common\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { ApiId, BrowserConstants, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { InteractionHandler, InteractionParams } from \"./InteractionHandler\";\r\nimport { INavigationClient } from \"../navigation/INavigationClient\";\r\nimport { NavigationOptions } from \"../navigation/NavigationOptions\";\r\n\r\nexport type RedirectParams = InteractionParams & {\r\n    navigationClient: INavigationClient;\r\n    redirectTimeout: number;\r\n    redirectStartPage: string;\r\n    onRedirectNavigate?: (url: string) => void | boolean;\r\n};\r\n\r\nexport class RedirectHandler extends InteractionHandler {\r\n\r\n    private browserCrypto: ICrypto;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger, browserCrypto: ICrypto) {\r\n        super(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger);\r\n        this.browserCrypto = browserCrypto;\r\n    }\r\n\r\n    /**\r\n     * Redirects window to given URL.\r\n     * @param urlNavigate\r\n     */\r\n    async initiateAuthRequest(requestUrl: string, params: RedirectParams): Promise<void> {\r\n        this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest called\");\r\n        // Navigate if valid URL\r\n        if (!StringUtils.isEmpty(requestUrl)) {\r\n            // Cache start page, returns to this page after redirectUri if navigateToLoginRequestUrl is true\r\n            if (params.redirectStartPage) {\r\n                this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: redirectStartPage set, caching start page\");\r\n                this.browserStorage.setTemporaryCache(TemporaryCacheKeys.ORIGIN_URI, params.redirectStartPage, true);\r\n            }\r\n\r\n            // Set interaction status in the library.\r\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);\r\n            this.browserStorage.cacheCodeRequest(this.authCodeRequest, this.browserCrypto);\r\n            this.browserRequestLogger.infoPii(`RedirectHandler.initiateAuthRequest: Navigate to: ${requestUrl}`);\r\n            const navigationOptions: NavigationOptions = {\r\n                apiId: ApiId.acquireTokenRedirect,\r\n                timeout: params.redirectTimeout,\r\n                noHistory: false\r\n            };\r\n            \r\n            // If onRedirectNavigate is implemented, invoke it and provide requestUrl\r\n            if (typeof params.onRedirectNavigate === \"function\") {\r\n                this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Invoking onRedirectNavigate callback\");\r\n                const navigate = params.onRedirectNavigate(requestUrl);\r\n\r\n                // Returning false from onRedirectNavigate will stop navigation\r\n                if (navigate !== false) {\r\n                    this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate did not return false, navigating\");\r\n                    await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\r\n                    return;\r\n                } else {\r\n                    this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: onRedirectNavigate returned false, stopping navigation\");\r\n                    return;\r\n                }\r\n            } else {\r\n                // Navigate window to request URL\r\n                this.browserRequestLogger.verbose(\"RedirectHandler.initiateAuthRequest: Navigating window to navigate url\");\r\n                await params.navigationClient.navigateExternal(requestUrl, navigationOptions);\r\n                return;\r\n            }\r\n        } else {\r\n            // Throw error if request URL is empty.\r\n            this.browserRequestLogger.info(\"RedirectHandler.initiateAuthRequest: Navigate url is empty\");\r\n            throw BrowserAuthError.createEmptyNavigationUriError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle authorization code response in the window.\r\n     * @param hash\r\n     */\r\n    async handleCodeResponse(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule, clientId?: string): Promise<AuthenticationResult> {\r\n        this.browserRequestLogger.verbose(\"RedirectHandler.handleCodeResponse called\");\r\n\r\n        // Check that location hash isn't empty.\r\n        if (StringUtils.isEmpty(locationHash)) {\r\n            throw BrowserAuthError.createEmptyHashError(locationHash);\r\n        }\r\n\r\n        // Interaction is completed - remove interaction status.\r\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\r\n\r\n        // Handle code response.\r\n        const stateKey = this.browserStorage.generateStateKey(state);\r\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n        if (!requestState) {\r\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n        const authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\r\n\r\n        // Get cached items\r\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\r\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\r\n\r\n        // Assign code to request\r\n        this.authCodeRequest.code = authCodeResponse.code;\r\n\r\n        // Check for new cloud instance\r\n        if (authCodeResponse.cloud_instance_host_name) {\r\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\r\n        }\r\n\r\n        authCodeResponse.nonce = cachedNonce || undefined;\r\n        authCodeResponse.state = requestState;\r\n\r\n        // Add CCS parameters if available\r\n        if (authCodeResponse.client_info) {\r\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\r\n        } else {\r\n            const cachedCcsCred = this.checkCcsCredentials();\r\n            if (cachedCcsCred) {\r\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\r\n            }\r\n        }\r\n\r\n        // Remove throttle if it exists\r\n        if (clientId) {\r\n            ThrottlingUtils.removeThrottle(this.browserStorage, clientId, this.authCodeRequest.authority, this.authCodeRequest.scopes);\r\n        }\r\n\r\n        // Acquire token with retrieved code.\r\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\r\n\r\n        this.browserStorage.cleanRequestByState(state);\r\n        return tokenResponse;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}