{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { GrantType } from '../utils/Constants.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { BaseClient as BaseClient$1 } from './BaseClient.js';\nimport { RequestParameterBuilder as RequestParameterBuilder$1 } from '../request/RequestParameterBuilder.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { ResponseHandler as ResponseHandler$1 } from '../response/ResponseHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\nvar UsernamePasswordClient = /** @class */function (_super) {\n  __extends(UsernamePasswordClient, _super);\n  function UsernamePasswordClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n   * password_grant\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n            reqTimestamp = TimeUtils$1.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler$1(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, headers;\n      return __generator(this, function (_a) {\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: authority.canonicalAuthority,\n          scopes: request.scopes\n        };\n        requestBody = this.createTokenRequestBody(request);\n        headers = this.createTokenRequestHeaders({\n          credential: request.username,\n          type: CcsCredentialType.UPN\n        });\n        return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addUsername(request.username);\n    parameterBuilder.addPassword(request.password);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (!StringUtils$1.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    if (this.config.systemOptions.preventCorsPreflight && request.username) {\n      parameterBuilder.addCcsUpn(request.username);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return UsernamePasswordClient;\n}(BaseClient$1);\nexport { UsernamePasswordClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","UsernamePasswordClient","request","logger","info","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_a","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","tokenResponse","handleServerTokenResponse","thumbprint","canonicalAuthority","scopes","requestBody","createTokenRequestBody","headers","createTokenRequestHeaders","credential","username","type","CcsCredentialType","UPN","executePostToTokenEndpoint","tokenEndpoint","parameterBuilder","RequestParameterBuilder","addClientId","addUsername","addPassword","password","addScopes","addGrantType","GrantType","RESOURCE_OWNER_PASSWORD_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","serverTelemetryManager","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","claims","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsUpn","createQueryString","BaseClient"],"sources":["../../src/client/UsernamePasswordClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { CommonUsernamePasswordRequest } from \"../request/CommonUsernamePasswordRequest\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { GrantType } from \"../utils/Constants\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { CcsCredentialType } from \"../account/CcsCredential\";\r\n\r\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\r\nexport class UsernamePasswordClient extends BaseClient {\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n     * password_grant\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonUsernamePasswordRequest): Promise<AuthenticationResult | null> {\r\n        this.logger.info(\"in acquireToken call\");\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executeTokenRequest(this.authority, request);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response.body);\r\n        const tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    private async executeTokenRequest(authority: Authority, request: CommonUsernamePasswordRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes\r\n        };\r\n        const requestBody = this.createTokenRequestBody(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders({\r\n            credential: request.username,\r\n            type: CcsCredentialType.UPN\r\n        });\r\n\r\n        return this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonUsernamePasswordRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addUsername(request.username);\r\n        parameterBuilder.addPassword(request.password);\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n\r\n        parameterBuilder.addThrottling();\r\n\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\r\n            parameterBuilder.addCcsUpn(request.username);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}