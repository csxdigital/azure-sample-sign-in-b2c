{"ast":null,"code":"var _jsxFileName = \"/home/nicolasgou/dev/azure-sample-sign-in-b2c/b2c-sample-2/src/App.jsx\",\n  _s = $RefreshSig$();\n/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { MsalProvider, useMsal } from \"@azure/msal-react\";\nimport { EventType, InteractionType } from \"@azure/msal-browser\";\nimport { b2cPolicies } from \"./authConfig\";\nimport { PageLayout } from \"./components/PageLayout\";\nimport { Hello } from \"./pages/Hello\";\nimport \"./styles/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pages = () => {\n  _s();\n  /**\n   * useMsal is hook that returns the PublicClientApplication instance, \n   * an array of all accounts currently signed in and an inProgress value \n   * that tells you what msal is currently doing. For more, visit:\n   * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n   */\n  const {\n    instance\n  } = useMsal();\n\n  /**\n   * Using the event API, you can register an event callback that will do something when an event is emitted. \n   * When registering an event callback in a react component you will need to make sure you do 2 things.\n   * 1) The callback is registered only once\n   * 2) The callback is unregistered before the component unmounts.\n   * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\n   */\n  useEffect(() => {\n    const callbackId = instance.addEventCallback(event => {\n      if (event.eventType === EventType.LOGIN_FAILURE) {\n        if (event.error && event.error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\n          if (event.interactionType === InteractionType.Redirect) {\n            instance.loginRedirect(b2cPolicies.authorities.forgotPassword);\n          } else if (event.interactionType === InteractionType.Popup) {\n            instance.loginPopup(b2cPolicies.authorities.forgotPassword).catch(e => {\n              return;\n            });\n          }\n        }\n      }\n      if (event.eventType === EventType.LOGIN_SUCCESS || event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS) {\n        if (event === null || event === void 0 ? void 0 : event.payload) {\n          /**\n           * We need to reject id tokens that were not issued with the default sign-in policy.\n           * \"acr\" claim in the token tells us what policy is used (NOTE: for new policies (v2.0), use \"tfp\" instead of \"acr\").\n           * To learn more about B2C tokens, visit https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\n           */\n          if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.forgotPassword) {\n            window.alert(\"Password has been reset successfully. \\nPlease sign-in with your new password.\");\n            return instance.logout();\n          } else if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.editProfile) {\n            window.alert(\"Profile has been edited successfully. \\nPlease sign-in again.\");\n            return instance.logout();\n          }\n        }\n      }\n    });\n    return () => {\n      if (callbackId) {\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Switch, {\n    children: /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/hello\",\n      children: /*#__PURE__*/_jsxDEV(Hello, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(Pages, \"CyAOT5TCyJmKIwhVlXYy8fh+2P8=\", false, function () {\n  return [useMsal];\n});\n_c = Pages;\nconst App = _ref => {\n  let {\n    instance\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(MsalProvider, {\n      instance: instance,\n      children: /*#__PURE__*/_jsxDEV(PageLayout, {\n        children: /*#__PURE__*/_jsxDEV(Pages, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Pages\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useEffect","BrowserRouter","Router","Switch","Route","MsalProvider","useMsal","EventType","InteractionType","b2cPolicies","PageLayout","Hello","Pages","instance","callbackId","addEventCallback","event","eventType","LOGIN_FAILURE","error","errorMessage","indexOf","interactionType","Redirect","loginRedirect","authorities","forgotPassword","Popup","loginPopup","catch","e","LOGIN_SUCCESS","ACQUIRE_TOKEN_SUCCESS","payload","idTokenClaims","names","window","alert","logout","editProfile","removeEventCallback","App"],"sources":["/home/nicolasgou/dev/azure-sample-sign-in-b2c/b2c-sample-2/src/App.jsx"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { MsalProvider, useMsal } from \"@azure/msal-react\";\nimport { EventType, InteractionType } from \"@azure/msal-browser\";\n\nimport { b2cPolicies } from \"./authConfig\";\nimport { PageLayout } from \"./components/PageLayout\";\nimport { Hello } from \"./pages/Hello\";\n\nimport \"./styles/App.css\";\n\nconst Pages = () => {\n\n  /**\n   * useMsal is hook that returns the PublicClientApplication instance, \n   * an array of all accounts currently signed in and an inProgress value \n   * that tells you what msal is currently doing. For more, visit:\n   * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n   */\n  const { instance } = useMsal();\n\n  /**\n   * Using the event API, you can register an event callback that will do something when an event is emitted. \n   * When registering an event callback in a react component you will need to make sure you do 2 things.\n   * 1) The callback is registered only once\n   * 2) The callback is unregistered before the component unmounts.\n   * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\n   */\n  useEffect(() => {\n    const callbackId = instance.addEventCallback((event) => {\n      if (event.eventType === EventType.LOGIN_FAILURE) {\n        if (event.error && event.error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\n          if (event.interactionType === InteractionType.Redirect) {\n            instance.loginRedirect(b2cPolicies.authorities.forgotPassword);\n          } else if (event.interactionType === InteractionType.Popup) {\n            instance.loginPopup(b2cPolicies.authorities.forgotPassword)\n              .catch(e => {\n                return;\n              });\n          }\n        }\n      }\n\n      if (event.eventType === EventType.LOGIN_SUCCESS || event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS) {\n        if (event?.payload) {\n          /**\n           * We need to reject id tokens that were not issued with the default sign-in policy.\n           * \"acr\" claim in the token tells us what policy is used (NOTE: for new policies (v2.0), use \"tfp\" instead of \"acr\").\n           * To learn more about B2C tokens, visit https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\n           */\n          if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.forgotPassword) {\n            window.alert(\"Password has been reset successfully. \\nPlease sign-in with your new password.\");\n            return instance.logout();\n          } else if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.editProfile) {\n            window.alert(\"Profile has been edited successfully. \\nPlease sign-in again.\");\n            return instance.logout();\n          }\n        }\n      }\n    });\n\n    return () => {\n      if (callbackId) {\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, []);\n\n  return (\n    <Switch>\n      <Route path=\"/hello\">\n        <Hello />\n      </Route>\n    </Switch>\n  )\n}\n\nconst App = ({ instance }) => {\n  return (\n    <Router>\n      <MsalProvider instance={instance}>\n        <PageLayout>\n          <Pages />\n        </PageLayout>\n      </MsalProvider>\n    </Router>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}