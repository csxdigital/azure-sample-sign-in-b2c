{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthenticationScheme, GrantType, Errors } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { ServerError as ServerError$1 } from '../error/ServerError.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { BaseClient as BaseClient$1 } from './BaseClient.js';\nimport { RequestParameterBuilder as RequestParameterBuilder$1 } from '../request/RequestParameterBuilder.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { UrlString as UrlString$1 } from '../url/UrlString.js';\nimport { PopTokenGenerator as PopTokenGenerator$1 } from '../crypto/PopTokenGenerator.js';\nimport { ResponseHandler as ResponseHandler$1 } from '../response/ResponseHandler.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 refresh token client\r\n */\nvar RefreshTokenClient = /** @class */function (_super) {\n  __extends(RefreshTokenClient, _super);\n  function RefreshTokenClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  RefreshTokenClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            reqTimestamp = TimeUtils$1.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler$1(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\n      return __generator(this, function (_a) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n          throw ClientConfigurationError$1.createEmptyTokenRequestError();\n        }\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n          throw ClientAuthError$1.createNoAccountInSilentRequestError();\n        }\n        isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n          try {\n            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];\n          } catch (e) {\n            noFamilyRTInCache = e instanceof ClientAuthError$1 && e.errorCode === ClientAuthErrorMessage.noTokensFoundError.code;\n            clientMismatchErrorWithFamilyRT = e instanceof ServerError$1 && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n            // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n              return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\n              // throw in all other cases\n            } else {\n              throw e;\n            }\n          }\n        }\n        // fall back to application refresh token acquisition\n        return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\n      });\n    });\n  };\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\n    return __awaiter(this, void 0, void 0, function () {\n      var refreshToken, refreshTokenRequest;\n      return __generator(this, function (_a) {\n        refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\n        // no refresh Token\n        if (!refreshToken) {\n          throw ClientAuthError$1.createNoTokensFoundError();\n        }\n        refreshTokenRequest = __assign(__assign({}, request), {\n          refreshToken: refreshToken.secret,\n          authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n          ccsCredential: {\n            credential: request.account.homeAccountId,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          }\n        });\n        return [2 /*return*/, this.acquireToken(refreshTokenRequest)];\n      });\n    });\n  };\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n  RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, queryParameters, headers, thumbprint, endpoint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.createTokenRequestBody(request)];\n          case 1:\n            requestBody = _a.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            headers = this.createTokenRequestHeaders(request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes\n            };\n            endpoint = UrlString$1.appendQueryString(authority.tokenEndpoint, queryParameters);\n            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, correlationId, clientAssertion, popTokenGenerator, _a, _b, clientInfo;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder$1();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            parameterBuilder.addScopes(request.scopes);\n            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n            parameterBuilder.addClientInfo();\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addThrottling();\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            parameterBuilder.addRefreshToken(request.refreshToken);\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator$1(this.cryptoUtils);\n            _b = (_a = parameterBuilder).addPopToken;\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            _b.apply(_a, [_c.sent()]);\n            _c.label = 2;\n          case 2:\n            if (!StringUtils$1.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n              switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n                  break;\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                  break;\n              }\n            }\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  return RefreshTokenClient;\n}(BaseClient$1);\nexport { RefreshTokenClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","RefreshTokenClient","request","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_a","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","logger","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","ClientConfigurationError","createEmptyTokenRequestError","account","ClientAuthError","createNoAccountInSilentRequestError","isFOCI","isAppMetadataFOCI","environment","acquireTokenWithCachedRefreshToken","e","noFamilyRTInCache","errorCode","ClientAuthErrorMessage","noTokensFoundError","code","clientMismatchErrorWithFamilyRT","ServerError","Errors","INVALID_GRANT_ERROR","subError","CLIENT_MISMATCH_ERROR","foci","refreshToken","readRefreshTokenFromCache","createNoTokensFoundError","refreshTokenRequest","secret","authenticationScheme","AuthenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","CcsCredentialType","HOME_ACCOUNT_ID","acquireToken","createTokenRequestBody","requestBody","queryParameters","createTokenQueryParameters","headers","createTokenRequestHeaders","thumbprint","canonicalAuthority","scopes","endpoint","UrlString","appendQueryString","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","addClientId","addScopes","addGrantType","GrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addThrottling","serverTelemetryManager","addServerTelemetry","correlationId","cryptoInterface","createNewGuid","addCorrelationId","addRefreshToken","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","POP","popTokenGenerator","PopTokenGenerator","_b","addPopToken","generateCnf","_c","StringUtils","isEmptyObj","claims","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","clientInfo","buildClientInfoFromHomeAccountId","addCcsOid","verbose","UPN","addCcsUpn","BaseClient"],"sources":["../../src/client/RefreshTokenClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { GrantType, AuthenticationScheme, Errors  } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { ClientAuthError, ClientAuthErrorMessage } from \"../error/ClientAuthError\";\r\nimport { ServerError } from \"../error/ServerError\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { CcsCredentialType } from \"../account/CcsCredential\";\r\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\r\n\r\n/**\r\n * OAuth2.0 refresh token client\r\n */\r\nexport class RefreshTokenClient extends BaseClient {\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    public async acquireToken(request: CommonRefreshTokenRequest): Promise<AuthenticationResult>{\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executeTokenRequest(request, this.authority);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        responseHandler.validateTokenResponse(response.body);\r\n        return responseHandler.handleServerTokenResponse(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request,\r\n            undefined,\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */\r\n    public async acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        // Cannot renew token if no request object is given.\r\n        if (!request) {\r\n            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n        }\r\n\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw ClientAuthError.createNoAccountInSilentRequestError();\r\n        }\r\n\r\n        // try checking if FOCI is enabled for the given application\r\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\r\n\r\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\r\n        if (isFOCI) {\r\n            try {\r\n                return this.acquireTokenWithCachedRefreshToken(request, true);\r\n            } catch (e) {\r\n                const noFamilyRTInCache = e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.noTokensFoundError.code;\r\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\r\n\r\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\r\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\r\n                    return this.acquireTokenWithCachedRefreshToken(request, false);\r\n                // throw in all other cases\r\n                } else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n\r\n        // fall back to application refresh token acquisition\r\n        return this.acquireTokenWithCachedRefreshToken(request, false);\r\n    }\r\n\r\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */\r\n    private async acquireTokenWithCachedRefreshToken(request: CommonSilentFlowRequest, foci: boolean) {\r\n        // fetches family RT or application RT based on FOCI value\r\n        const refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\r\n\r\n        // no refresh Token\r\n        if (!refreshToken) {\r\n            throw ClientAuthError.createNoTokensFoundError();\r\n        }\r\n\r\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\r\n            ...request,\r\n            refreshToken: refreshToken.secret,\r\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\r\n            ccsCredential: {\r\n                credential: request.account.homeAccountId,\r\n                type: CcsCredentialType.HOME_ACCOUNT_ID\r\n            }\r\n        };\r\n\r\n        return this.acquireToken(refreshTokenRequest);\r\n    }\r\n\r\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonRefreshTokenRequest, authority: Authority)\r\n        : Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n\r\n        const requestBody = await this.createTokenRequestBody(request);\r\n        const queryParameters = this.createTokenQueryParameters(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders(request.ccsCredential);\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes\r\n        };\r\n\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\r\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request \r\n     */\r\n    private createTokenQueryParameters(request: CommonRefreshTokenRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */\r\n    private async createTokenRequestBody(request: CommonRefreshTokenRequest): Promise<string> {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\r\n\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n\r\n        parameterBuilder.addThrottling();\r\n        \r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        parameterBuilder.addRefreshToken(request.refreshToken);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n\r\n            parameterBuilder.addPopToken(await popTokenGenerator.generateCnf(request));\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\r\n            switch (request.ccsCredential.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}