{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { AADAuthorityConstants, Constants as Constants$1 } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\nvar UrlString = /** @class */function () {\n  function UrlString(url) {\n    this._urlString = url;\n    if (StringUtils$1.isEmpty(this._urlString)) {\n      // Throws error if url is empty\n      throw ClientConfigurationError$1.createUrlEmptyError();\n    }\n    if (StringUtils$1.isEmpty(this.getHash())) {\n      this._urlString = UrlString.canonicalizeUri(url);\n    }\n  }\n  Object.defineProperty(UrlString.prototype, \"urlString\", {\n    get: function () {\n      return this._urlString;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Ensure urls are lower case and end with a / character.\r\n   * @param url\r\n   */\n  UrlString.canonicalizeUri = function (url) {\n    if (url) {\n      var lowerCaseUrl = url.toLowerCase();\n      if (StringUtils$1.endsWith(lowerCaseUrl, \"?\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -1);\n      } else if (StringUtils$1.endsWith(lowerCaseUrl, \"?/\")) {\n        lowerCaseUrl = lowerCaseUrl.slice(0, -2);\n      }\n      if (!StringUtils$1.endsWith(lowerCaseUrl, \"/\")) {\n        lowerCaseUrl += \"/\";\n      }\n      return lowerCaseUrl;\n    }\n    return url;\n  };\n  /**\r\n   * Throws if urlString passed is not a valid authority URI string.\r\n   */\n  UrlString.prototype.validateAsUri = function () {\n    // Attempts to parse url for uri components\n    var components;\n    try {\n      components = this.getUrlComponents();\n    } catch (e) {\n      throw ClientConfigurationError$1.createUrlParseError(e);\n    }\n    // Throw error if URI or path segments are not parseable.\n    if (!components.HostNameAndPort || !components.PathSegments) {\n      throw ClientConfigurationError$1.createUrlParseError(\"Given url string: \" + this.urlString);\n    }\n    // Throw error if uri is insecure.\n    if (!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\n      throw ClientConfigurationError$1.createInsecureAuthorityUriError(this.urlString);\n    }\n  };\n  /**\r\n   * Function to remove query string params from url. Returns the new url.\r\n   * @param url\r\n   * @param name\r\n   */\n  UrlString.prototype.urlRemoveQueryStringParameter = function (name) {\n    var regex = new RegExp(\"(\\\\&\" + name + \"=)[^\\&]+\");\n    this._urlString = this.urlString.replace(regex, \"\");\n    // name=value&\n    regex = new RegExp(\"(\" + name + \"=)[^\\&]+&\");\n    this._urlString = this.urlString.replace(regex, \"\");\n    // name=value\n    regex = new RegExp(\"(\" + name + \"=)[^\\&]+\");\n    this._urlString = this.urlString.replace(regex, \"\");\n    return this.urlString;\n  };\n  /**\r\n   * Given a url and a query string return the url with provided query string appended\r\n   * @param url\r\n   * @param queryString\r\n   */\n  UrlString.appendQueryString = function (url, queryString) {\n    if (StringUtils$1.isEmpty(queryString)) {\n      return url;\n    }\n    return url.indexOf(\"?\") < 0 ? url + \"?\" + queryString : url + \"&\" + queryString;\n  };\n  /**\r\n   * Returns a url with the hash removed\r\n   * @param url\r\n   */\n  UrlString.removeHashFromUrl = function (url) {\n    return UrlString.canonicalizeUri(url.split(\"#\")[0]);\n  };\n  /**\r\n   * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n   * @param href The url\r\n   * @param tenantId The tenant id to replace\r\n   */\n  UrlString.prototype.replaceTenantPath = function (tenantId) {\n    var urlObject = this.getUrlComponents();\n    var pathArray = urlObject.PathSegments;\n    if (tenantId && pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\n      pathArray[0] = tenantId;\n    }\n    return UrlString.constructAuthorityUriFromObject(urlObject);\n  };\n  /**\r\n   * Returns the anchor part(#) of the URL\r\n   */\n  UrlString.prototype.getHash = function () {\n    return UrlString.parseHash(this.urlString);\n  };\n  /**\r\n   * Parses out the components from a url string.\r\n   * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n   */\n  UrlString.prototype.getUrlComponents = function () {\n    // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\n    var regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\n    // If url string does not match regEx, we throw an error\n    var match = this.urlString.match(regEx);\n    if (!match) {\n      throw ClientConfigurationError$1.createUrlParseError(\"Given url string: \" + this.urlString);\n    }\n    // Url component object\n    var urlComponents = {\n      Protocol: match[1],\n      HostNameAndPort: match[4],\n      AbsolutePath: match[5],\n      QueryString: match[7]\n    };\n    var pathSegments = urlComponents.AbsolutePath.split(\"/\");\n    pathSegments = pathSegments.filter(function (val) {\n      return val && val.length > 0;\n    }); // remove empty elements\n    urlComponents.PathSegments = pathSegments;\n    if (!StringUtils$1.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\n      urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\n    }\n    return urlComponents;\n  };\n  UrlString.getDomainFromUrl = function (url) {\n    var regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\n    var match = url.match(regEx);\n    if (!match) {\n      throw ClientConfigurationError$1.createUrlParseError(\"Given url string: \" + url);\n    }\n    return match[2];\n  };\n  UrlString.getAbsoluteUrl = function (relativeUrl, baseUrl) {\n    if (relativeUrl[0] === Constants$1.FORWARD_SLASH) {\n      var url = new UrlString(baseUrl);\n      var baseComponents = url.getUrlComponents();\n      return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\n    }\n    return relativeUrl;\n  };\n  /**\r\n   * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n   * @param hashString\r\n   */\n  UrlString.parseHash = function (hashString) {\n    var hashIndex1 = hashString.indexOf(\"#\");\n    var hashIndex2 = hashString.indexOf(\"#/\");\n    if (hashIndex2 > -1) {\n      return hashString.substring(hashIndex2 + 2);\n    } else if (hashIndex1 > -1) {\n      return hashString.substring(hashIndex1 + 1);\n    }\n    return \"\";\n  };\n  UrlString.constructAuthorityUriFromObject = function (urlObject) {\n    return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\n  };\n  /**\r\n   * Returns URL hash as server auth code response object.\r\n   */\n  UrlString.getDeserializedHash = function (hash) {\n    // Check if given hash is empty\n    if (StringUtils$1.isEmpty(hash)) {\n      return {};\n    }\n    // Strip the # symbol if present\n    var parsedHash = UrlString.parseHash(hash);\n    // If # symbol was not present, above will return empty string, so give original hash value\n    var deserializedHash = StringUtils$1.queryStringToObject(StringUtils$1.isEmpty(parsedHash) ? hash : parsedHash);\n    // Check if deserialization didn't work\n    if (!deserializedHash) {\n      throw ClientAuthError$1.createHashNotDeserializedError(JSON.stringify(deserializedHash));\n    }\n    return deserializedHash;\n  };\n  /**\r\n   * Check if the hash of the URL string contains known properties\r\n   */\n  UrlString.hashContainsKnownProperties = function (hash) {\n    if (StringUtils$1.isEmpty(hash)) {\n      return false;\n    }\n    var parameters = UrlString.getDeserializedHash(hash);\n    return !!(parameters.code || parameters.error_description || parameters.error || parameters.state);\n  };\n  return UrlString;\n}();\nexport { UrlString };","map":{"version":3,"mappings":"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","names":["url","_urlString","StringUtils","isEmpty","ClientConfigurationError","createUrlEmptyError","getHash","UrlString","canonicalizeUri","Object","lowerCaseUrl","toLowerCase","endsWith","slice","components","getUrlComponents","e","createUrlParseError","HostNameAndPort","PathSegments","urlString","Protocol","createInsecureAuthorityUriError","name","regex","RegExp","replace","queryString","indexOf","split","tenantId","urlObject","pathArray","length","AADAuthorityConstants","COMMON","ORGANIZATIONS","constructAuthorityUriFromObject","parseHash","regEx","match","urlComponents","AbsolutePath","QueryString","pathSegments","filter","val","substring","relativeUrl","baseUrl","Constants","FORWARD_SLASH","baseComponents","hashString","hashIndex1","hashIndex2","join","hash","parsedHash","deserializedHash","queryStringToObject","ClientAuthError","createHashNotDeserializedError","JSON","stringify","parameters","getDeserializedHash","code","error_description","error","state"],"sources":["../../src/url/UrlString.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { IUri } from \"./IUri\";\r\nimport { AADAuthorityConstants, Constants } from \"../utils/Constants\";\r\n\r\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\r\nexport class UrlString {\r\n\r\n    // internal url string field\r\n    private _urlString: string;\r\n    public get urlString(): string {\r\n        return this._urlString;\r\n    }\r\n    \r\n    constructor(url: string) {\r\n        this._urlString = url;\r\n        if (StringUtils.isEmpty(this._urlString)) {\r\n            // Throws error if url is empty\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n\r\n        if (StringUtils.isEmpty(this.getHash())) {\r\n            this._urlString = UrlString.canonicalizeUri(url);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url \r\n     */\r\n    static canonicalizeUri(url: string): string {\r\n        if (url) {\r\n            let lowerCaseUrl = url.toLowerCase();\r\n\r\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n            } else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n            }\r\n\r\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n                lowerCaseUrl += \"/\";\r\n            }\r\n\r\n            return lowerCaseUrl;\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */\r\n    validateAsUri(): void {\r\n        // Attempts to parse url for uri components\r\n        let components;\r\n        try {\r\n            components = this.getUrlComponents();\r\n        } catch (e) {\r\n            throw ClientConfigurationError.createUrlParseError(e);\r\n        }\r\n\r\n        // Throw error if URI or path segments are not parseable.\r\n        if (!components.HostNameAndPort || !components.PathSegments) {\r\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\r\n        }\r\n\r\n        // Throw error if uri is insecure.\r\n        if(!components.Protocol || components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw ClientConfigurationError.createInsecureAuthorityUriError(this.urlString);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to remove query string params from url. Returns the new url.\r\n     * @param url\r\n     * @param name\r\n     */\r\n    urlRemoveQueryStringParameter(name: string): string {\r\n        let regex = new RegExp(\"(\\\\&\" + name + \"=)[^\\&]+\");\r\n        this._urlString = this.urlString.replace(regex, \"\");\r\n        // name=value&\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+&\");\r\n        this._urlString = this.urlString.replace(regex, \"\");\r\n        // name=value\r\n        regex = new RegExp(\"(\" + name + \"=)[^\\&]+\");\r\n        this._urlString = this.urlString.replace(regex, \"\");\r\n        return this.urlString;\r\n    }\r\n\r\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url \r\n     * @param queryString \r\n     */\r\n    static appendQueryString(url: string, queryString: string): string {\r\n        if (StringUtils.isEmpty(queryString)) {\r\n            return url;\r\n        }\r\n\r\n        return url.indexOf(\"?\") < 0 ? `${url}?${queryString}` : `${url}&${queryString}`;\r\n    }\r\n\r\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url \r\n     */\r\n    static removeHashFromUrl(url: string): string {\r\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\r\n    }\r\n\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    replaceTenantPath(tenantId: string): UrlString {\r\n        const urlObject = this.getUrlComponents();\r\n        const pathArray = urlObject.PathSegments;\r\n        if (tenantId && (pathArray.length !== 0 && (pathArray[0] === AADAuthorityConstants.COMMON || pathArray[0] === AADAuthorityConstants.ORGANIZATIONS))) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return UrlString.constructAuthorityUriFromObject(urlObject);\r\n    }\r\n\r\n    /**\r\n     * Returns the anchor part(#) of the URL\r\n     */\r\n    getHash(): string {\r\n        return UrlString.parseHash(this.urlString);\r\n    }\r\n\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    getUrlComponents(): IUri {\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n\r\n        // If url string does not match regEx, we throw an error\r\n        const match = this.urlString.match(regEx);\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${this.urlString}`);\r\n        }\r\n\r\n        // Url component object\r\n        const urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5],\r\n            QueryString: match[7]\r\n        } as IUri;\r\n\r\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n\r\n        if (!StringUtils.isEmpty(urlComponents.QueryString) && urlComponents.QueryString.endsWith(\"/\")) {\r\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length-1);\r\n        }\r\n        return urlComponents;\r\n    }\r\n\r\n    static getDomainFromUrl(url: string): string {\r\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\r\n\r\n        const match = url.match(regEx);\r\n\r\n        if (!match) {\r\n            throw ClientConfigurationError.createUrlParseError(`Given url string: ${url}`);\r\n        }\r\n\r\n        return match[2];\r\n    }\r\n\r\n    static getAbsoluteUrl(relativeUrl: string, baseUrl: string): string {\r\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\r\n            const url = new UrlString(baseUrl);\r\n            const baseComponents = url.getUrlComponents();\r\n\r\n            return baseComponents.Protocol + \"//\" + baseComponents.HostNameAndPort + relativeUrl;\r\n        }\r\n        \r\n        return relativeUrl;\r\n    }\r\n    \r\n    /**\r\n     * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n     * @param hashString \r\n     */\r\n    static parseHash(hashString: string): string {\r\n        const hashIndex1 = hashString.indexOf(\"#\");\r\n        const hashIndex2 = hashString.indexOf(\"#/\");\r\n        if (hashIndex2 > -1) {\r\n            return hashString.substring(hashIndex2 + 2);\r\n        } else if (hashIndex1 > -1) {\r\n            return hashString.substring(hashIndex1 + 1);\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    static constructAuthorityUriFromObject(urlObject: IUri): UrlString {\r\n        return new UrlString(urlObject.Protocol + \"//\" + urlObject.HostNameAndPort + \"/\" + urlObject.PathSegments.join(\"/\"));\r\n    }\r\n\r\n    /**\r\n     * Returns URL hash as server auth code response object.\r\n     */\r\n    static getDeserializedHash(hash: string): ServerAuthorizationCodeResponse {\r\n        // Check if given hash is empty\r\n        if (StringUtils.isEmpty(hash)) {\r\n            return {};\r\n        }\r\n        // Strip the # symbol if present\r\n        const parsedHash = UrlString.parseHash(hash);\r\n        // If # symbol was not present, above will return empty string, so give original hash value\r\n        const deserializedHash: ServerAuthorizationCodeResponse = StringUtils.queryStringToObject<ServerAuthorizationCodeResponse>(StringUtils.isEmpty(parsedHash) ? hash : parsedHash);\r\n        // Check if deserialization didn't work\r\n        if (!deserializedHash) {\r\n            throw ClientAuthError.createHashNotDeserializedError(JSON.stringify(deserializedHash));\r\n        }\r\n        return deserializedHash;\r\n    }\r\n\r\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     */\r\n    static hashContainsKnownProperties(hash: string): boolean {\r\n        if (StringUtils.isEmpty(hash)) {\r\n            return false;\r\n        }\r\n\r\n        const parameters: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hash);\r\n        return !!(\r\n            parameters.code ||\r\n            parameters.error_description ||\r\n            parameters.error ||\r\n            parameters.state\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}