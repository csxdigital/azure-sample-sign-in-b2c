{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { CacheOutcome, AuthenticationScheme } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\nimport { ScopeSet as ScopeSet$1 } from '../request/ScopeSet.js';\nimport { AuthToken as AuthToken$1 } from '../account/AuthToken.js';\nimport { BaseClient as BaseClient$1 } from './BaseClient.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { ResponseHandler as ResponseHandler$1 } from '../response/ResponseHandler.js';\nimport { RefreshTokenClient as RefreshTokenClient$1 } from './RefreshTokenClient.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar SilentFlowClient = /** @class */function (_super) {\n  __extends(SilentFlowClient, _super);\n  function SilentFlowClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n   * the given token and returns the renewed token\r\n   * @param request\r\n   */\n  SilentFlowClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1, refreshTokenClient;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.acquireCachedToken(request)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n          case 2:\n            e_1 = _a.sent();\n            if (e_1 instanceof ClientAuthError$1 && e_1.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\n              refreshTokenClient = new RefreshTokenClient$1(this.config);\n              return [2 /*return*/, refreshTokenClient.acquireTokenByRefreshToken(request)];\n            } else {\n              throw e_1;\n            }\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\r\n   * Retrieves token from cache or throws an error if it must be refreshed.\r\n   * @param request\r\n   */\n  SilentFlowClient.prototype.acquireCachedToken = function (request) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function () {\n      var requestScopes, environment, authScheme, cacheRecord;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            // Cannot renew token if no request object is given.\n            if (!request) {\n              throw ClientConfigurationError$1.createEmptyTokenRequestError();\n            }\n            // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n            if (!request.account) {\n              throw ClientAuthError$1.createNoAccountInSilentRequestError();\n            }\n            requestScopes = new ScopeSet$1(request.scopes || []);\n            environment = request.authority || this.authority.getPreferredCache();\n            authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\n            cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, requestScopes, environment, authScheme);\n            if (request.forceRefresh) {\n              // Must refresh due to present force_refresh flag.\n              (_a = this.serverTelemetryManager) === null || _a === void 0 ? void 0 : _a.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\n              throw ClientAuthError$1.createRefreshRequiredError();\n            } else if (!cacheRecord.accessToken) {\n              // Must refresh due to non-existent access_token.\n              (_b = this.serverTelemetryManager) === null || _b === void 0 ? void 0 : _b.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\n              throw ClientAuthError$1.createRefreshRequiredError();\n            } else if (TimeUtils$1.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) || TimeUtils$1.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\n              // Must refresh due to expired access_token.\n              (_c = this.serverTelemetryManager) === null || _c === void 0 ? void 0 : _c.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\n              throw ClientAuthError$1.createRefreshRequiredError();\n            } else if (cacheRecord.accessToken.refreshOn && TimeUtils$1.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\n              // Must refresh due to the refresh_in value.\n              (_d = this.serverTelemetryManager) === null || _d === void 0 ? void 0 : _d.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\n              throw ClientAuthError$1.createRefreshRequiredError();\n            } else if (!StringUtils$1.isEmptyObj(request.claims)) {\n              // Must refresh due to request parameters.\n              throw ClientAuthError$1.createRefreshRequiredError();\n            }\n            if (this.config.serverTelemetryManager) {\n              this.config.serverTelemetryManager.incrementCacheHits();\n            }\n            return [4 /*yield*/, this.generateResultFromCacheRecord(cacheRecord, request)];\n          case 1:\n            return [2 /*return*/, _e.sent()];\n        }\n      });\n    });\n  };\n  /**\r\n   * Helper function to build response object from the CacheRecord\r\n   * @param cacheRecord\r\n   */\n  SilentFlowClient.prototype.generateResultFromCacheRecord = function (cacheRecord, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var idTokenObj;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (cacheRecord.idToken) {\n              idTokenObj = new AuthToken$1(cacheRecord.idToken.secret, this.config.cryptoInterface);\n            }\n            return [4 /*yield*/, ResponseHandler$1.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenObj)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  return SilentFlowClient;\n}(BaseClient$1);\nexport { SilentFlowClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","_super","SilentFlowClient","request","acquireCachedToken","_a","e_1","ClientAuthError","errorCode","ClientAuthErrorMessage","tokenRefreshRequired","code","refreshTokenClient","RefreshTokenClient","config","acquireTokenByRefreshToken","ClientConfigurationError","createEmptyTokenRequestError","account","createNoAccountInSilentRequestError","requestScopes","ScopeSet","scopes","environment","authority","getPreferredCache","authScheme","authenticationScheme","AuthenticationScheme","BEARER","cacheRecord","cacheManager","readCacheRecord","authOptions","clientId","forceRefresh","serverTelemetryManager","setCacheOutcome","CacheOutcome","FORCE_REFRESH","createRefreshRequiredError","accessToken","NO_CACHED_ACCESS_TOKEN","TimeUtils","wasClockTurnedBack","cachedAt","isTokenExpired","expiresOn","systemOptions","tokenRenewalOffsetSeconds","CACHED_ACCESS_TOKEN_EXPIRED","refreshOn","REFRESH_CACHED_ACCESS_TOKEN","StringUtils","isEmptyObj","claims","incrementCacheHits","generateResultFromCacheRecord","_e","idToken","idTokenObj","AuthToken","secret","cryptoInterface","ResponseHandler","generateAuthenticationResult","cryptoUtils","BaseClient"],"sources":["../../src/client/SilentFlowClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { RefreshTokenClient } from \"./RefreshTokenClient\";\r\nimport { ClientAuthError, ClientAuthErrorMessage } from \"../error/ClientAuthError\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\r\nimport { AuthenticationScheme, CacheOutcome } from \"../utils/Constants\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\n\r\nexport class SilentFlowClient extends BaseClient {\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew\r\n     * the given token and returns the renewed token\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        try {\r\n            return await this.acquireCachedToken(request);\r\n        } catch (e) {\r\n            if (e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.tokenRefreshRequired.code) {\r\n                const refreshTokenClient = new RefreshTokenClient(this.config);\r\n                return refreshTokenClient.acquireTokenByRefreshToken(request);\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */\r\n    async acquireCachedToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        // Cannot renew token if no request object is given.\r\n        if (!request) {\r\n            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n        }\r\n\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw ClientAuthError.createNoAccountInSilentRequestError();\r\n        }\r\n        const requestScopes = new ScopeSet(request.scopes || []);\r\n        const environment = request.authority || this.authority.getPreferredCache();\r\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\r\n        const cacheRecord = this.cacheManager.readCacheRecord(request.account, this.config.authOptions.clientId, requestScopes, environment, authScheme);\r\n       \r\n        if (request.forceRefresh) {\r\n            // Must refresh due to present force_refresh flag.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.FORCE_REFRESH);\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        } else if (!cacheRecord.accessToken) {\r\n            // Must refresh due to non-existent access_token.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN);\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        } else if (\r\n            TimeUtils.wasClockTurnedBack(cacheRecord.accessToken.cachedAt) ||\r\n            TimeUtils.isTokenExpired(cacheRecord.accessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)\r\n        ) {\r\n            // Must refresh due to expired access_token.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED);\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        } else if (cacheRecord.accessToken.refreshOn && TimeUtils.isTokenExpired(cacheRecord.accessToken.refreshOn, 0)) {\r\n            // Must refresh due to the refresh_in value.\r\n            this.serverTelemetryManager?.setCacheOutcome(CacheOutcome.REFRESH_CACHED_ACCESS_TOKEN);\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        } else if (!StringUtils.isEmptyObj(request.claims)) {\r\n            // Must refresh due to request parameters.\r\n            throw ClientAuthError.createRefreshRequiredError();\r\n        }\r\n\r\n        if (this.config.serverTelemetryManager) {\r\n            this.config.serverTelemetryManager.incrementCacheHits();\r\n        }\r\n\r\n        return await this.generateResultFromCacheRecord(cacheRecord, request);\r\n    }\r\n\r\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */\r\n    private async generateResultFromCacheRecord(cacheRecord: CacheRecord, request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        let idTokenObj: AuthToken | undefined;\r\n        if (cacheRecord.idToken) {\r\n            idTokenObj = new AuthToken(cacheRecord.idToken.secret, this.config.cryptoInterface);\r\n        }\r\n        return await ResponseHandler.generateAuthenticationResult(\r\n            this.cryptoUtils,\r\n            this.authority,\r\n            cacheRecord,\r\n            true,\r\n            request,\r\n            idTokenObj\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}