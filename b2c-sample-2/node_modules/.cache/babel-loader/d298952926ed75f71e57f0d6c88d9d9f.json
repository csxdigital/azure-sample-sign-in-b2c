{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { Separators, CacheAccountType, CacheType, Constants as Constants$1 } from '../../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../../utils/StringUtils.js';\nimport { buildClientInfo } from '../../account/ClientInfo.js';\nimport { AuthorityType as AuthorityType$1 } from '../../authority/AuthorityType.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      oboAssertion: access token passed in as part of OBO request\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n * }\r\n */\nvar AccountEntity = /** @class */function () {\n  function AccountEntity() {}\n  /**\r\n   * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n   */\n  AccountEntity.prototype.generateAccountId = function () {\n    var accountId = [this.homeAccountId, this.environment];\n    return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n   */\n  AccountEntity.prototype.generateAccountKey = function () {\n    return AccountEntity.generateAccountCacheKey({\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId\n    });\n  };\n  /**\r\n   * returns the type of the cache (in this case account)\r\n   */\n  AccountEntity.prototype.generateType = function () {\n    switch (this.authorityType) {\n      case CacheAccountType.ADFS_ACCOUNT_TYPE:\n        return CacheType.ADFS;\n      case CacheAccountType.MSAV1_ACCOUNT_TYPE:\n        return CacheType.MSA;\n      case CacheAccountType.MSSTS_ACCOUNT_TYPE:\n        return CacheType.MSSTS;\n      case CacheAccountType.GENERIC_ACCOUNT_TYPE:\n        return CacheType.GENERIC;\n      default:\n        {\n          throw ClientAuthError$1.createUnexpectedAccountTypeError();\n        }\n    }\n  };\n  /**\r\n   * Returns the AccountInfo interface for this account.\r\n   */\n  AccountEntity.prototype.getAccountInfo = function () {\n    return {\n      homeAccountId: this.homeAccountId,\n      environment: this.environment,\n      tenantId: this.realm,\n      username: this.username,\n      localAccountId: this.localAccountId,\n      name: this.name,\n      idTokenClaims: this.idTokenClaims\n    };\n  };\n  /**\r\n   * Generates account key from interface\r\n   * @param accountInterface\r\n   */\n  AccountEntity.generateAccountCacheKey = function (accountInterface) {\n    var accountKey = [accountInterface.homeAccountId, accountInterface.environment || \"\", accountInterface.tenantId || \"\"];\n    return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\n  };\n  /**\r\n   * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n   * @param clientInfo\r\n   * @param authority\r\n   * @param idToken\r\n   * @param policy\r\n   */\n  AccountEntity.createAccount = function (clientInfo, homeAccountId, authority, idToken, oboAssertion, cloudGraphHostName, msGraphHost) {\n    var _a, _b, _c, _d, _e, _f;\n    var account = new AccountEntity();\n    account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\n    account.clientInfo = clientInfo;\n    account.homeAccountId = homeAccountId;\n    var env = authority.getPreferredCache();\n    if (StringUtils$1.isEmpty(env)) {\n      throw ClientAuthError$1.createInvalidCacheEnvironmentError();\n    }\n    account.environment = env;\n    // non AAD scenarios can have empty realm\n    account.realm = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.tid) || \"\";\n    account.oboAssertion = oboAssertion;\n    if (idToken) {\n      account.idTokenClaims = idToken.claims;\n      // How do you account for MSA CID here?\n      account.localAccountId = ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.oid) || ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.sub) || \"\";\n      /*\r\n       * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.\r\n       * This field should not be relied upon if a custom policy is configured to return more than 1 email.\r\n       */\n      account.username = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.preferred_username) || (((_e = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _e === void 0 ? void 0 : _e.emails) ? idToken.claims.emails[0] : \"\");\n      account.name = (_f = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _f === void 0 ? void 0 : _f.name;\n    }\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    return account;\n  };\n  /**\r\n   * Builds non-AAD/ADFS account.\r\n   * @param authority\r\n   * @param idToken\r\n   */\n  AccountEntity.createGenericAccount = function (authority, homeAccountId, idToken, oboAssertion, cloudGraphHostName, msGraphHost) {\n    var _a, _b, _c, _d;\n    var account = new AccountEntity();\n    account.authorityType = authority.authorityType === AuthorityType$1.Adfs ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\n    account.homeAccountId = homeAccountId;\n    // non AAD scenarios can have empty realm\n    account.realm = \"\";\n    account.oboAssertion = oboAssertion;\n    var env = authority.getPreferredCache();\n    if (StringUtils$1.isEmpty(env)) {\n      throw ClientAuthError$1.createInvalidCacheEnvironmentError();\n    }\n    if (idToken) {\n      // How do you account for MSA CID here?\n      account.localAccountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.oid) || ((_b = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _b === void 0 ? void 0 : _b.sub) || \"\";\n      // upn claim for most ADFS scenarios\n      account.username = ((_c = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _c === void 0 ? void 0 : _c.upn) || \"\";\n      account.name = ((_d = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _d === void 0 ? void 0 : _d.name) || \"\";\n      account.idTokenClaims = idToken === null || idToken === void 0 ? void 0 : idToken.claims;\n    }\n    account.environment = env;\n    account.cloudGraphHostName = cloudGraphHostName;\n    account.msGraphHost = msGraphHost;\n    /*\r\n     * add uniqueName to claims\r\n     * account.name = idToken.claims.uniqueName;\r\n     */\n    return account;\n  };\n  /**\r\n   * Generate HomeAccountId from server response\r\n   * @param serverClientInfo\r\n   * @param authType\r\n   */\n  AccountEntity.generateHomeAccountId = function (serverClientInfo, authType, logger, cryptoObj, idToken) {\n    var _a;\n    var accountId = ((_a = idToken === null || idToken === void 0 ? void 0 : idToken.claims) === null || _a === void 0 ? void 0 : _a.sub) ? idToken.claims.sub : Constants$1.EMPTY_STRING;\n    // since ADFS does not have tid and does not set client_info\n    if (authType === AuthorityType$1.Adfs) {\n      return accountId;\n    }\n    // for cases where there is clientInfo\n    if (serverClientInfo) {\n      try {\n        var clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\n        if (!StringUtils$1.isEmpty(clientInfo.uid) && !StringUtils$1.isEmpty(clientInfo.utid)) {\n          return \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid;\n        }\n      } catch (e) {}\n    }\n    // default to \"sub\" claim\n    logger.verbose(\"No client info in response\");\n    return accountId;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n  AccountEntity.isAccountEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"localAccountId\") && entity.hasOwnProperty(\"username\") && entity.hasOwnProperty(\"authorityType\");\n  };\n  /**\r\n   * Helper function to determine whether 2 accountInfo objects represent the same account\r\n   * @param accountA\r\n   * @param accountB\r\n   * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n   */\n  AccountEntity.accountInfoIsEqual = function (accountA, accountB, compareClaims) {\n    if (!accountA || !accountB) {\n      return false;\n    }\n    var claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\n    if (compareClaims) {\n      var accountAClaims = accountA.idTokenClaims || {};\n      var accountBClaims = accountB.idTokenClaims || {};\n      // issued at timestamp and nonce are expected to change each time a new id token is acquired\n      claimsMatch = accountAClaims.iat === accountBClaims.iat && accountAClaims.nonce === accountBClaims.nonce;\n    }\n    return accountA.homeAccountId === accountB.homeAccountId && accountA.localAccountId === accountB.localAccountId && accountA.username === accountB.username && accountA.tenantId === accountB.tenantId && accountA.environment === accountB.environment && claimsMatch;\n  };\n  return AccountEntity;\n}();\nexport { AccountEntity };","map":{"version":3,"mappings":"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","names":["AccountEntity","accountId","homeAccountId","environment","join","Separators","CACHE_KEY_SEPARATOR","toLowerCase","generateAccountCacheKey","tenantId","realm","username","localAccountId","authorityType","CacheAccountType","ADFS_ACCOUNT_TYPE","CacheType","ADFS","MSAV1_ACCOUNT_TYPE","MSA","MSSTS_ACCOUNT_TYPE","MSSTS","GENERIC_ACCOUNT_TYPE","GENERIC","ClientAuthError","createUnexpectedAccountTypeError","name","idTokenClaims","accountInterface","accountKey","clientInfo","authority","idToken","oboAssertion","cloudGraphHostName","msGraphHost","account","env","getPreferredCache","StringUtils","isEmpty","createInvalidCacheEnvironmentError","claims","tid","oid","sub","preferred_username","emails","AuthorityType","Adfs","upn","serverClientInfo","authType","logger","cryptoObj","Constants","EMPTY_STRING","buildClientInfo","uid","utid","CLIENT_INFO_SEPARATOR","e","verbose","entity","hasOwnProperty","accountA","accountB","compareClaims","claimsMatch","accountAClaims","accountBClaims","iat","nonce"],"sources":["../../../src/cache/entities/AccountEntity.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    Separators,\r\n    CacheAccountType,\r\n    CacheType,\r\n    Constants,\r\n} from \"../../utils/Constants\";\r\nimport { Authority } from \"../../authority/Authority\";\r\nimport { AuthToken } from \"../../account/AuthToken\";\r\nimport { ICrypto } from \"../../crypto/ICrypto\";\r\nimport { buildClientInfo } from \"../../account/ClientInfo\";\r\nimport { StringUtils } from \"../../utils/StringUtils\";\r\nimport { AccountInfo } from \"../../account/AccountInfo\";\r\nimport { ClientAuthError } from \"../../error/ClientAuthError\";\r\nimport { AuthorityType } from \"../../authority/AuthorityType\";\r\nimport { Logger } from \"../../logger/Logger\";\r\nimport { TokenClaims } from \"../../account/TokenClaims\";\r\n\r\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      clientInfo: Full base64 encoded client info received from ESTS\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      oboAssertion: access token passed in as part of OBO request\r\n *      idTokenClaims: Object containing claims parsed from ID token\r\n * }\r\n */\r\nexport class AccountEntity {\r\n    homeAccountId: string;\r\n    environment: string;\r\n    realm: string;\r\n    localAccountId: string;\r\n    username: string;\r\n    authorityType: string;\r\n    name?: string;\r\n    clientInfo?: string;\r\n    lastModificationTime?: string;\r\n    lastModificationApp?: string;\r\n    oboAssertion?: string;\r\n    cloudGraphHostName?: string;\r\n    msGraphHost?: string; \r\n    idTokenClaims?: TokenClaims;\r\n\r\n    /**\r\n     * Generate Account Id key component as per the schema: <home_account_id>-<environment>\r\n     */\r\n    generateAccountId(): string {\r\n        const accountId: Array<string> = [this.homeAccountId, this.environment];\r\n        return accountId.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Generate Account Cache Key as per the schema: <home_account_id>-<environment>-<realm*>\r\n     */\r\n    generateAccountKey(): string {\r\n        return AccountEntity.generateAccountCacheKey({\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * returns the type of the cache (in this case account)\r\n     */\r\n    generateType(): number {\r\n        switch (this.authorityType) {\r\n            case CacheAccountType.ADFS_ACCOUNT_TYPE:\r\n                return CacheType.ADFS;\r\n            case CacheAccountType.MSAV1_ACCOUNT_TYPE:\r\n                return CacheType.MSA;\r\n            case CacheAccountType.MSSTS_ACCOUNT_TYPE:\r\n                return CacheType.MSSTS;\r\n            case CacheAccountType.GENERIC_ACCOUNT_TYPE:\r\n                return CacheType.GENERIC;\r\n            default: {\r\n                throw ClientAuthError.createUnexpectedAccountTypeError();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */\r\n    getAccountInfo(): AccountInfo {\r\n        return {\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId,\r\n            name: this.name,\r\n            idTokenClaims: this.idTokenClaims\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Generates account key from interface\r\n     * @param accountInterface\r\n     */\r\n    static generateAccountCacheKey(accountInterface: AccountInfo): string {\r\n        const accountKey = [\r\n            accountInterface.homeAccountId,\r\n            accountInterface.environment || \"\",\r\n            accountInterface.tenantId || \"\",\r\n        ];\r\n\r\n        return accountKey.join(Separators.CACHE_KEY_SEPARATOR).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n     * @param clientInfo\r\n     * @param authority\r\n     * @param idToken\r\n     * @param policy\r\n     */\r\n    static createAccount(\r\n        clientInfo: string,\r\n        homeAccountId: string,\r\n        authority: Authority,\r\n        idToken: AuthToken,\r\n        oboAssertion?: string,\r\n        cloudGraphHostName?: string,\r\n        msGraphHost?: string\r\n    ): AccountEntity {\r\n        const account: AccountEntity = new AccountEntity();\r\n\r\n        account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\r\n        account.clientInfo = clientInfo;\r\n        account.homeAccountId = homeAccountId;\r\n\r\n        const env = authority.getPreferredCache();\r\n        if (StringUtils.isEmpty(env)) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n\r\n        account.environment = env;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = idToken?.claims?.tid || \"\";\r\n        account.oboAssertion = oboAssertion;\r\n        \r\n        if (idToken) {\r\n            account.idTokenClaims = idToken.claims;\r\n\r\n            // How do you account for MSA CID here?\r\n            account.localAccountId = idToken?.claims?.oid || idToken?.claims?.sub || \"\";\r\n\r\n            /*\r\n             * In B2C scenarios the emails claim is used instead of preferred_username and it is an array. In most cases it will contain a single email.\r\n             * This field should not be relied upon if a custom policy is configured to return more than 1 email.\r\n             */\r\n            account.username = idToken?.claims?.preferred_username || (idToken?.claims?.emails? idToken.claims.emails[0]: \"\");\r\n            account.name = idToken?.claims?.name;\r\n        }\r\n\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * Builds non-AAD/ADFS account.\r\n     * @param authority\r\n     * @param idToken\r\n     */\r\n    static createGenericAccount(\r\n        authority: Authority,\r\n        homeAccountId: string,\r\n        idToken: AuthToken,\r\n        oboAssertion?: string,\r\n        cloudGraphHostName?: string,\r\n        msGraphHost?: string\r\n    ): AccountEntity {\r\n        const account: AccountEntity = new AccountEntity();\r\n\r\n        account.authorityType = (authority.authorityType === AuthorityType.Adfs) ? CacheAccountType.ADFS_ACCOUNT_TYPE : CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        account.homeAccountId = homeAccountId;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm = \"\";\r\n        account.oboAssertion = oboAssertion;\r\n\r\n        const env = authority.getPreferredCache();\r\n\r\n        if (StringUtils.isEmpty(env)) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n\r\n        if (idToken) {\r\n            // How do you account for MSA CID here?\r\n            account.localAccountId = idToken?.claims?.oid || idToken?.claims?.sub || \"\";\r\n            // upn claim for most ADFS scenarios\r\n            account.username = idToken?.claims?.upn || \"\";\r\n            account.name = idToken?.claims?.name || \"\";\r\n            account.idTokenClaims = idToken?.claims;\r\n        }\r\n\r\n        account.environment = env;\r\n\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n\r\n        /*\r\n         * add uniqueName to claims\r\n         * account.name = idToken.claims.uniqueName;\r\n         */\r\n\r\n        return account;\r\n    }\r\n\r\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */\r\n    static generateHomeAccountId(serverClientInfo: string, authType: AuthorityType, logger: Logger, cryptoObj: ICrypto, idToken?: AuthToken): string {\r\n\r\n        const accountId = idToken?.claims?.sub ? idToken.claims.sub : Constants.EMPTY_STRING;\r\n\r\n        // since ADFS does not have tid and does not set client_info\r\n        if (authType === AuthorityType.Adfs) {\r\n            return accountId;\r\n        }\r\n\r\n        // for cases where there is clientInfo\r\n        if (serverClientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(serverClientInfo, cryptoObj);\r\n                if (!StringUtils.isEmpty(clientInfo.uid) && !StringUtils.isEmpty(clientInfo.utid)) {\r\n                    return `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`;\r\n                }\r\n            } catch (e) {}\r\n        }\r\n\r\n        // default to \"sub\" claim\r\n        logger.verbose(\"No client info in response\");\r\n        return accountId;\r\n    }\r\n\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    static isAccountEntity(entity: object): boolean {\r\n\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"localAccountId\") &&\r\n            entity.hasOwnProperty(\"username\") &&\r\n            entity.hasOwnProperty(\"authorityType\")\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA \r\n     * @param accountB \r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */\r\n    static accountInfoIsEqual(accountA: AccountInfo | null, accountB: AccountInfo | null, compareClaims?: boolean): boolean {\r\n        if (!accountA || !accountB) {\r\n            return false;\r\n        }\r\n\r\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\r\n        if (compareClaims) {\r\n            const accountAClaims = (accountA.idTokenClaims || {}) as TokenClaims;\r\n            const accountBClaims = (accountB.idTokenClaims || {}) as TokenClaims;\r\n\r\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\r\n            claimsMatch = (accountAClaims.iat === accountBClaims.iat) &&\r\n            (accountAClaims.nonce === accountBClaims.nonce);\r\n        }\r\n\r\n        return (accountA.homeAccountId === accountB.homeAccountId) && \r\n            (accountA.localAccountId === accountB.localAccountId) &&\r\n            (accountA.username === accountB.username) &&\r\n            (accountA.tenantId === accountB.tenantId) &&\r\n            (accountA.environment === accountB.environment) &&\r\n            claimsMatch;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}