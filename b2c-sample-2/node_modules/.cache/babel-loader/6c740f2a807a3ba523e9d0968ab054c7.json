{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { Constants as Constants$1, AuthenticationScheme, THE_FAMILY_ID } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ScopeSet as ScopeSet$1 } from '../request/ScopeSet.js';\nimport { buildClientInfo } from '../account/ClientInfo.js';\nimport { AuthorityType as AuthorityType$1 } from '../authority/AuthorityType.js';\nimport { AccountEntity as AccountEntity$1 } from '../cache/entities/AccountEntity.js';\nimport { AuthToken as AuthToken$1 } from '../account/AuthToken.js';\nimport { ServerError as ServerError$1 } from '../error/ServerError.js';\nimport { IdTokenEntity as IdTokenEntity$1 } from '../cache/entities/IdTokenEntity.js';\nimport { AccessTokenEntity as AccessTokenEntity$1 } from '../cache/entities/AccessTokenEntity.js';\nimport { RefreshTokenEntity as RefreshTokenEntity$1 } from '../cache/entities/RefreshTokenEntity.js';\nimport { InteractionRequiredAuthError as InteractionRequiredAuthError$1 } from '../error/InteractionRequiredAuthError.js';\nimport { CacheRecord as CacheRecord$1 } from '../cache/entities/CacheRecord.js';\nimport { ProtocolUtils as ProtocolUtils$1 } from '../utils/ProtocolUtils.js';\nimport { PopTokenGenerator as PopTokenGenerator$1 } from '../crypto/PopTokenGenerator.js';\nimport { AppMetadataEntity as AppMetadataEntity$1 } from '../cache/entities/AppMetadataEntity.js';\nimport { TokenCacheContext as TokenCacheContext$1 } from '../cache/persistence/TokenCacheContext.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Class that handles response parsing.\r\n */\nvar ResponseHandler = /** @class */function () {\n  function ResponseHandler(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin) {\n    this.clientId = clientId;\n    this.cacheStorage = cacheStorage;\n    this.cryptoObj = cryptoObj;\n    this.logger = logger;\n    this.serializableCache = serializableCache;\n    this.persistencePlugin = persistencePlugin;\n  }\n  /**\r\n   * Function which validates server authorization code response.\r\n   * @param serverResponseHash\r\n   * @param cachedState\r\n   * @param cryptoObj\r\n   */\n  ResponseHandler.prototype.validateServerAuthorizationCodeResponse = function (serverResponseHash, cachedState, cryptoObj) {\n    if (!serverResponseHash.state || !cachedState) {\n      throw !serverResponseHash.state ? ClientAuthError$1.createStateNotFoundError(\"Server State\") : ClientAuthError$1.createStateNotFoundError(\"Cached State\");\n    }\n    if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {\n      throw ClientAuthError$1.createStateMismatchError();\n    }\n    // Check for error\n    if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\n      if (InteractionRequiredAuthError$1.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\n        throw new InteractionRequiredAuthError$1(serverResponseHash.error || Constants$1.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n      }\n      throw new ServerError$1(serverResponseHash.error || Constants$1.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\n    }\n    if (serverResponseHash.client_info) {\n      buildClientInfo(serverResponseHash.client_info, cryptoObj);\n    }\n  };\n  /**\r\n   * Function which validates server authorization token response.\r\n   * @param serverResponse\r\n   */\n  ResponseHandler.prototype.validateTokenResponse = function (serverResponse) {\n    // Check for error\n    if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\n      if (InteractionRequiredAuthError$1.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\n        throw new InteractionRequiredAuthError$1(serverResponse.error, serverResponse.error_description, serverResponse.suberror);\n      }\n      var errString = serverResponse.error_codes + \" - [\" + serverResponse.timestamp + \"]: \" + serverResponse.error_description + \" - Correlation ID: \" + serverResponse.correlation_id + \" - Trace ID: \" + serverResponse.trace_id;\n      throw new ServerError$1(serverResponse.error, errString, serverResponse.suberror);\n    }\n  };\n  /**\r\n   * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n   * @param serverTokenResponse\r\n   * @param authority\r\n   */\n  ResponseHandler.prototype.handleServerTokenResponse = function (serverTokenResponse, authority, reqTimestamp, request, authCodePayload, oboAssertion, handlingRefreshTokenResponse) {\n    return __awaiter(this, void 0, void 0, function () {\n      var idTokenObj, requestStateObj, cacheRecord, cacheContext, key, account;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (serverTokenResponse.id_token) {\n              idTokenObj = new AuthToken$1(serverTokenResponse.id_token || Constants$1.EMPTY_STRING, this.cryptoObj);\n              // token nonce check (TODO: Add a warning if no nonce is given?)\n              if (authCodePayload && !StringUtils$1.isEmpty(authCodePayload.nonce)) {\n                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\n                  throw ClientAuthError$1.createNonceMismatchError();\n                }\n              }\n            }\n            // generate homeAccountId\n            this.homeAccountIdentifier = AccountEntity$1.generateHomeAccountId(serverTokenResponse.client_info || Constants$1.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);\n            if (!!authCodePayload && !!authCodePayload.state) {\n              requestStateObj = ProtocolUtils$1.parseRequestState(this.cryptoObj, authCodePayload.state);\n            }\n            cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, idTokenObj, request.scopes, oboAssertion, authCodePayload);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1,, 4, 7]);\n            if (!(this.persistencePlugin && this.serializableCache)) return [3 /*break*/, 3];\n            this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\n            cacheContext = new TokenCacheContext$1(this.serializableCache, true);\n            return [4 /*yield*/, this.persistencePlugin.beforeCacheAccess(cacheContext)];\n          case 2:\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            /*\r\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.\r\n             */\n            if (handlingRefreshTokenResponse && cacheRecord.account) {\n              key = cacheRecord.account.generateAccountKey();\n              account = this.cacheStorage.getAccount(key);\n              if (!account) {\n                this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\n                return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];\n              }\n            }\n            this.cacheStorage.saveCacheRecord(cacheRecord);\n            return [3 /*break*/, 7];\n          case 4:\n            if (!(this.persistencePlugin && this.serializableCache && cacheContext)) return [3 /*break*/, 6];\n            this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\n            return [4 /*yield*/, this.persistencePlugin.afterCacheAccess(cacheContext)];\n          case 5:\n            _a.sent();\n            _a.label = 6;\n          case 6:\n            return [7 /*endfinally*/];\n          case 7:\n            return [2 /*return*/, ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Generates CacheRecord\r\n   * @param serverTokenResponse\r\n   * @param idTokenObj\r\n   * @param authority\r\n   */\n  ResponseHandler.prototype.generateCacheRecord = function (serverTokenResponse, authority, reqTimestamp, idTokenObj, requestScopes, oboAssertion, authCodePayload) {\n    var env = authority.getPreferredCache();\n    if (StringUtils$1.isEmpty(env)) {\n      throw ClientAuthError$1.createInvalidCacheEnvironmentError();\n    }\n    // IdToken: non AAD scenarios can have empty realm\n    var cachedIdToken;\n    var cachedAccount;\n    if (!StringUtils$1.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\n      cachedIdToken = IdTokenEntity$1.createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token || Constants$1.EMPTY_STRING, this.clientId, idTokenObj.claims.tid || Constants$1.EMPTY_STRING, oboAssertion);\n      cachedAccount = this.generateAccountEntity(serverTokenResponse, idTokenObj, authority, oboAssertion, authCodePayload);\n    }\n    // AccessToken\n    var cachedAccessToken = null;\n    if (!StringUtils$1.isEmpty(serverTokenResponse.access_token)) {\n      // If scopes not returned in server response, use request scopes\n      var responseScopes = serverTokenResponse.scope ? ScopeSet$1.fromString(serverTokenResponse.scope) : new ScopeSet$1(requestScopes || []);\n      /*\r\n       * Use timestamp calculated before request\r\n       * Server may return timestamps as strings, parse to numbers if so.\r\n       */\n      var expiresIn = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\n      var extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\n      var refreshIn = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\n      var tokenExpirationSeconds = reqTimestamp + expiresIn;\n      var extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\n      var refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\n      // non AAD scenarios can have empty realm\n      cachedAccessToken = AccessTokenEntity$1.createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token || Constants$1.EMPTY_STRING, this.clientId, idTokenObj ? idTokenObj.claims.tid || Constants$1.EMPTY_STRING : authority.tenant, responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj, refreshOnSeconds, serverTokenResponse.token_type, oboAssertion);\n    }\n    // refreshToken\n    var cachedRefreshToken = null;\n    if (!StringUtils$1.isEmpty(serverTokenResponse.refresh_token)) {\n      cachedRefreshToken = RefreshTokenEntity$1.createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token || Constants$1.EMPTY_STRING, this.clientId, serverTokenResponse.foci, oboAssertion);\n    }\n    // appMetadata\n    var cachedAppMetadata = null;\n    if (!StringUtils$1.isEmpty(serverTokenResponse.foci)) {\n      cachedAppMetadata = AppMetadataEntity$1.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\n    }\n    return new CacheRecord$1(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\n  };\n  /**\r\n   * Generate Account\r\n   * @param serverTokenResponse\r\n   * @param idToken\r\n   * @param authority\r\n   */\n  ResponseHandler.prototype.generateAccountEntity = function (serverTokenResponse, idToken, authority, oboAssertion, authCodePayload) {\n    var authorityType = authority.authorityType;\n    var cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : \"\";\n    var msGraphhost = authCodePayload ? authCodePayload.msgraph_host : \"\";\n    // ADFS does not require client_info in the response\n    if (authorityType === AuthorityType$1.Adfs) {\n      this.logger.verbose(\"Authority type is ADFS, creating ADFS account\");\n      return AccountEntity$1.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);\n    }\n    // This fallback applies to B2C as well as they fall under an AAD account type.\n    if (StringUtils$1.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === \"AAD\") {\n      throw ClientAuthError$1.createClientInfoEmptyError();\n    }\n    return serverTokenResponse.client_info ? AccountEntity$1.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, authority, idToken, oboAssertion, cloudGraphHostName, msGraphhost) : AccountEntity$1.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);\n  };\n  /**\r\n   * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n   *\r\n   * Optionally takes a state string that is set as-is in the response.\r\n   *\r\n   * @param cacheRecord\r\n   * @param idTokenObj\r\n   * @param fromTokenCache\r\n   * @param stateString\r\n   */\n  ResponseHandler.generateAuthenticationResult = function (cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenObj, requestState) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var accessToken, responseScopes, expiresOn, extExpiresOn, familyId, popTokenGenerator, uid, tid;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            accessToken = \"\";\n            responseScopes = [];\n            expiresOn = null;\n            familyId = Constants$1.EMPTY_STRING;\n            if (!cacheRecord.accessToken) return [3 /*break*/, 4];\n            if (!(cacheRecord.accessToken.tokenType === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator$1(cryptoObj);\n            return [4 /*yield*/, popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request)];\n          case 1:\n            accessToken = _d.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            accessToken = cacheRecord.accessToken.secret;\n            _d.label = 3;\n          case 3:\n            responseScopes = ScopeSet$1.fromString(cacheRecord.accessToken.target).asArray();\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\n            _d.label = 4;\n          case 4:\n            if (cacheRecord.appMetadata) {\n              familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants$1.EMPTY_STRING;\n            }\n            uid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.oid) || (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.sub) || Constants$1.EMPTY_STRING;\n            tid = (idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.claims.tid) || Constants$1.EMPTY_STRING;\n            return [2 /*return*/, {\n              authority: authority.canonicalAuthority,\n              uniqueId: uid,\n              tenantId: tid,\n              scopes: responseScopes,\n              account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\n              idToken: idTokenObj ? idTokenObj.rawToken : Constants$1.EMPTY_STRING,\n              idTokenClaims: idTokenObj ? idTokenObj.claims : {},\n              accessToken: accessToken,\n              fromCache: fromTokenCache,\n              expiresOn: expiresOn,\n              extExpiresOn: extExpiresOn,\n              familyId: familyId,\n              tokenType: ((_a = cacheRecord.accessToken) === null || _a === void 0 ? void 0 : _a.tokenType) || Constants$1.EMPTY_STRING,\n              state: requestState ? requestState.userRequestState : Constants$1.EMPTY_STRING,\n              cloudGraphHostName: ((_b = cacheRecord.account) === null || _b === void 0 ? void 0 : _b.cloudGraphHostName) || Constants$1.EMPTY_STRING,\n              msGraphHost: ((_c = cacheRecord.account) === null || _c === void 0 ? void 0 : _c.msGraphHost) || Constants$1.EMPTY_STRING\n            }];\n        }\n      });\n    });\n  };\n  return ResponseHandler;\n}();\nexport { ResponseHandler };","map":{"version":3,"mappings":"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","names":["clientId","cacheStorage","cryptoObj","logger","serializableCache","persistencePlugin","ResponseHandler","serverResponseHash","cachedState","state","ClientAuthError","createStateNotFoundError","decodeURIComponent","createStateMismatchError","error","error_description","suberror","InteractionRequiredAuthError","isInteractionRequiredError","Constants","EMPTY_STRING","ServerError","client_info","buildClientInfo","serverResponse","errString","error_codes","timestamp","correlation_id","trace_id","serverTokenResponse","authority","reqTimestamp","request","authCodePayload","oboAssertion","handlingRefreshTokenResponse","id_token","idTokenObj","AuthToken","StringUtils","isEmpty","nonce","claims","createNonceMismatchError","homeAccountIdentifier","AccountEntity","generateHomeAccountId","authorityType","requestStateObj","ProtocolUtils","parseRequestState","cacheRecord","generateCacheRecord","scopes","verbose","cacheContext","TokenCacheContext","beforeCacheAccess","_a","account","key","generateAccountKey","getAccount","warning","generateAuthenticationResult","saveCacheRecord","afterCacheAccess","requestScopes","env","getPreferredCache","createInvalidCacheEnvironmentError","cachedIdToken","cachedAccount","IdTokenEntity","createIdTokenEntity","tid","generateAccountEntity","cachedAccessToken","access_token","responseScopes","scope","ScopeSet","fromString","expiresIn","expires_in","parseInt","extExpiresIn","ext_expires_in","refreshIn","refresh_in","undefined","tokenExpirationSeconds","extendedTokenExpirationSeconds","refreshOnSeconds","AccessTokenEntity","createAccessTokenEntity","tenant","printScopes","token_type","cachedRefreshToken","refresh_token","RefreshTokenEntity","createRefreshTokenEntity","foci","cachedAppMetadata","AppMetadataEntity","createAppMetadataEntity","CacheRecord","idToken","cloudGraphHostName","cloud_graph_host_name","msGraphhost","msgraph_host","AuthorityType","Adfs","createGenericAccount","protocolMode","createClientInfoEmptyError","createAccount","fromTokenCache","requestState","accessToken","expiresOn","familyId","tokenType","AuthenticationScheme","POP","popTokenGenerator","PopTokenGenerator","signPopToken","secret","_d","target","asArray","Date","Number","extExpiresOn","extendedExpiresOn","appMetadata","THE_FAMILY_ID","uid","oid","sub","canonicalAuthority","uniqueId","tenantId","getAccountInfo","rawToken","idTokenClaims","fromCache","userRequestState","msGraphHost"],"sources":["../../src/response/ResponseHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ServerAuthorizationTokenResponse } from \"./ServerAuthorizationTokenResponse\";\r\nimport { buildClientInfo} from \"../account/ClientInfo\";\r\nimport { ICrypto } from \"../crypto/ICrypto\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ServerAuthorizationCodeResponse } from \"./ServerAuthorizationCodeResponse\";\r\nimport { Logger } from \"../logger/Logger\";\r\nimport { ServerError } from \"../error/ServerError\";\r\nimport { AuthToken } from \"../account/AuthToken\";\r\nimport { ScopeSet } from \"../request/ScopeSet\";\r\nimport { AuthenticationResult } from \"./AuthenticationResult\";\r\nimport { AccountEntity } from \"../cache/entities/AccountEntity\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { AuthorityType } from \"../authority/AuthorityType\";\r\nimport { IdTokenEntity } from \"../cache/entities/IdTokenEntity\";\r\nimport { AccessTokenEntity } from \"../cache/entities/AccessTokenEntity\";\r\nimport { RefreshTokenEntity } from \"../cache/entities/RefreshTokenEntity\";\r\nimport { InteractionRequiredAuthError } from \"../error/InteractionRequiredAuthError\";\r\nimport { CacheRecord } from \"../cache/entities/CacheRecord\";\r\nimport { CacheManager } from \"../cache/CacheManager\";\r\nimport { ProtocolUtils, RequestStateObject } from \"../utils/ProtocolUtils\";\r\nimport { AuthenticationScheme, Constants, THE_FAMILY_ID } from \"../utils/Constants\";\r\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\r\nimport { AppMetadataEntity } from \"../cache/entities/AppMetadataEntity\";\r\nimport { ICachePlugin } from \"../cache/interface/ICachePlugin\";\r\nimport { TokenCacheContext } from \"../cache/persistence/TokenCacheContext\";\r\nimport { ISerializableTokenCache } from \"../cache/interface/ISerializableTokenCache\";\r\nimport { AuthorizationCodePayload } from \"./AuthorizationCodePayload\";\r\nimport { BaseAuthRequest } from \"../request/BaseAuthRequest\";\r\n\r\n/**\r\n * Class that handles response parsing.\r\n */\r\nexport class ResponseHandler {\r\n    private clientId: string;\r\n    private cacheStorage: CacheManager;\r\n    private cryptoObj: ICrypto;\r\n    private logger: Logger;\r\n    private homeAccountIdentifier: string;\r\n    private serializableCache: ISerializableTokenCache | null;\r\n    private persistencePlugin: ICachePlugin | null;\r\n\r\n    constructor(clientId: string, cacheStorage: CacheManager, cryptoObj: ICrypto, logger: Logger, serializableCache: ISerializableTokenCache | null, persistencePlugin: ICachePlugin | null) {\r\n        this.clientId = clientId;\r\n        this.cacheStorage = cacheStorage;\r\n        this.cryptoObj = cryptoObj;\r\n        this.logger = logger;\r\n        this.serializableCache = serializableCache;\r\n        this.persistencePlugin = persistencePlugin;\r\n    }\r\n\r\n    /**\r\n     * Function which validates server authorization code response.\r\n     * @param serverResponseHash\r\n     * @param cachedState\r\n     * @param cryptoObj\r\n     */\r\n    validateServerAuthorizationCodeResponse(serverResponseHash: ServerAuthorizationCodeResponse, cachedState: string, cryptoObj: ICrypto): void {\r\n\r\n        if (!serverResponseHash.state || !cachedState) {\r\n            throw !serverResponseHash.state ? ClientAuthError.createStateNotFoundError(\"Server State\") : ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n\r\n        if (decodeURIComponent(serverResponseHash.state) !== decodeURIComponent(cachedState)) {\r\n            throw ClientAuthError.createStateMismatchError();\r\n        }\r\n\r\n        // Check for error\r\n        if (serverResponseHash.error || serverResponseHash.error_description || serverResponseHash.suberror) {\r\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponseHash.error, serverResponseHash.error_description, serverResponseHash.suberror)) {\r\n                throw new InteractionRequiredAuthError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\r\n            }\r\n\r\n            throw new ServerError(serverResponseHash.error || Constants.EMPTY_STRING, serverResponseHash.error_description, serverResponseHash.suberror);\r\n        }\r\n\r\n        if (serverResponseHash.client_info) {\r\n            buildClientInfo(serverResponseHash.client_info, cryptoObj);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function which validates server authorization token response.\r\n     * @param serverResponse\r\n     */\r\n    validateTokenResponse(serverResponse: ServerAuthorizationTokenResponse): void {\r\n        // Check for error\r\n        if (serverResponse.error || serverResponse.error_description || serverResponse.suberror) {\r\n            if (InteractionRequiredAuthError.isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\r\n                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror);\r\n            }\r\n\r\n            const errString = `${serverResponse.error_codes} - [${serverResponse.timestamp}]: ${serverResponse.error_description} - Correlation ID: ${serverResponse.correlation_id} - Trace ID: ${serverResponse.trace_id}`;\r\n            throw new ServerError(serverResponse.error, errString, serverResponse.suberror);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n     * @param serverTokenResponse\r\n     * @param authority\r\n     */\r\n    async handleServerTokenResponse(\r\n        serverTokenResponse: ServerAuthorizationTokenResponse,\r\n        authority: Authority,\r\n        reqTimestamp: number,\r\n        request: BaseAuthRequest,\r\n        authCodePayload?: AuthorizationCodePayload,\r\n        oboAssertion?: string,\r\n        handlingRefreshTokenResponse?: boolean): Promise<AuthenticationResult> {\r\n\r\n        // create an idToken object (not entity)\r\n        let idTokenObj: AuthToken | undefined;\r\n        if (serverTokenResponse.id_token) {\r\n            idTokenObj = new AuthToken(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj);\r\n    \r\n            // token nonce check (TODO: Add a warning if no nonce is given?)\r\n            if (authCodePayload && !StringUtils.isEmpty(authCodePayload.nonce)) {\r\n                if (idTokenObj.claims.nonce !== authCodePayload.nonce) {\r\n                    throw ClientAuthError.createNonceMismatchError();\r\n                }\r\n            }\r\n        }\r\n\r\n        // generate homeAccountId\r\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenObj);\r\n\r\n        // save the response tokens\r\n        let requestStateObj: RequestStateObject | undefined;\r\n        if (!!authCodePayload && !!authCodePayload.state) {\r\n            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\r\n        }\r\n\r\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, idTokenObj, request.scopes, oboAssertion, authCodePayload);\r\n        let cacheContext;\r\n        try {\r\n            if (this.persistencePlugin && this.serializableCache) {\r\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\r\n                cacheContext = new TokenCacheContext(this.serializableCache, true);\r\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\r\n            }\r\n            /*\r\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal.\r\n             */\r\n            if (handlingRefreshTokenResponse && cacheRecord.account) {\r\n                const key = cacheRecord.account.generateAccountKey();\r\n                const account = this.cacheStorage.getAccount(key);\r\n                if (!account) {\r\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\r\n                    return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj);\r\n                }\r\n            }\r\n            this.cacheStorage.saveCacheRecord(cacheRecord);\r\n        } finally {\r\n            if (this.persistencePlugin && this.serializableCache && cacheContext) {\r\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\r\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\r\n            }\r\n        }\r\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenObj, requestStateObj);\r\n    }\r\n\r\n    /**\r\n     * Generates CacheRecord\r\n     * @param serverTokenResponse\r\n     * @param idTokenObj\r\n     * @param authority\r\n     */\r\n    private generateCacheRecord(serverTokenResponse: ServerAuthorizationTokenResponse, authority: Authority, reqTimestamp: number, idTokenObj?: AuthToken, requestScopes?: string[], oboAssertion?: string, authCodePayload?: AuthorizationCodePayload): CacheRecord {\r\n        const env = authority.getPreferredCache();\r\n        if (StringUtils.isEmpty(env)) {\r\n            throw ClientAuthError.createInvalidCacheEnvironmentError();\r\n        }\r\n\r\n        // IdToken: non AAD scenarios can have empty realm\r\n        let cachedIdToken: IdTokenEntity | undefined;\r\n        let cachedAccount: AccountEntity | undefined;\r\n        if (!StringUtils.isEmpty(serverTokenResponse.id_token) && !!idTokenObj) {\r\n            cachedIdToken = IdTokenEntity.createIdTokenEntity(\r\n                this.homeAccountIdentifier,\r\n                env,\r\n                serverTokenResponse.id_token || Constants.EMPTY_STRING,\r\n                this.clientId,\r\n                idTokenObj.claims.tid || Constants.EMPTY_STRING,\r\n                oboAssertion\r\n            );\r\n\r\n            cachedAccount = this.generateAccountEntity(\r\n                serverTokenResponse,\r\n                idTokenObj,\r\n                authority,\r\n                oboAssertion,\r\n                authCodePayload\r\n            );\r\n        }\r\n\r\n        // AccessToken\r\n        let cachedAccessToken: AccessTokenEntity | null = null;\r\n        if (!StringUtils.isEmpty(serverTokenResponse.access_token)) {\r\n\r\n            // If scopes not returned in server response, use request scopes\r\n            const responseScopes = serverTokenResponse.scope ? ScopeSet.fromString(serverTokenResponse.scope) : new ScopeSet(requestScopes || []);\r\n\r\n            /*\r\n             * Use timestamp calculated before request\r\n             * Server may return timestamps as strings, parse to numbers if so.\r\n             */\r\n            const expiresIn: number = (typeof serverTokenResponse.expires_in === \"string\" ? parseInt(serverTokenResponse.expires_in, 10) : serverTokenResponse.expires_in) || 0;\r\n            const extExpiresIn: number = (typeof serverTokenResponse.ext_expires_in === \"string\" ? parseInt(serverTokenResponse.ext_expires_in, 10) : serverTokenResponse.ext_expires_in) || 0;\r\n            const refreshIn: number | undefined = (typeof serverTokenResponse.refresh_in === \"string\" ? parseInt(serverTokenResponse.refresh_in, 10) : serverTokenResponse.refresh_in) || undefined;\r\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\r\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\r\n            const refreshOnSeconds = refreshIn && refreshIn > 0 ? reqTimestamp + refreshIn : undefined;\r\n\r\n            // non AAD scenarios can have empty realm\r\n            cachedAccessToken = AccessTokenEntity.createAccessTokenEntity(\r\n                this.homeAccountIdentifier,\r\n                env,\r\n                serverTokenResponse.access_token || Constants.EMPTY_STRING,\r\n                this.clientId,\r\n                idTokenObj ? idTokenObj.claims.tid || Constants.EMPTY_STRING : authority.tenant,\r\n                responseScopes.printScopes(),\r\n                tokenExpirationSeconds,\r\n                extendedTokenExpirationSeconds,\r\n                this.cryptoObj,\r\n                refreshOnSeconds,\r\n                serverTokenResponse.token_type,\r\n                oboAssertion\r\n            );\r\n        }\r\n\r\n        // refreshToken\r\n        let cachedRefreshToken: RefreshTokenEntity | null = null;\r\n        if (!StringUtils.isEmpty(serverTokenResponse.refresh_token)) {\r\n            cachedRefreshToken = RefreshTokenEntity.createRefreshTokenEntity(\r\n                this.homeAccountIdentifier,\r\n                env,\r\n                serverTokenResponse.refresh_token || Constants.EMPTY_STRING,\r\n                this.clientId,\r\n                serverTokenResponse.foci,\r\n                oboAssertion\r\n            );\r\n        }\r\n\r\n        // appMetadata\r\n        let cachedAppMetadata: AppMetadataEntity | null = null;\r\n        if (!StringUtils.isEmpty(serverTokenResponse.foci)) {\r\n            cachedAppMetadata = AppMetadataEntity.createAppMetadataEntity(this.clientId, env, serverTokenResponse.foci);\r\n        }\r\n\r\n        return new CacheRecord(cachedAccount, cachedIdToken, cachedAccessToken, cachedRefreshToken, cachedAppMetadata);\r\n    }\r\n\r\n    /**\r\n     * Generate Account\r\n     * @param serverTokenResponse\r\n     * @param idToken\r\n     * @param authority\r\n     */\r\n    private generateAccountEntity(serverTokenResponse: ServerAuthorizationTokenResponse, idToken: AuthToken, authority: Authority, oboAssertion?: string, authCodePayload?: AuthorizationCodePayload): AccountEntity {\r\n        const authorityType = authority.authorityType;\r\n        const cloudGraphHostName = authCodePayload ? authCodePayload.cloud_graph_host_name : \"\";\r\n        const msGraphhost = authCodePayload ? authCodePayload.msgraph_host : \"\";\r\n\r\n        // ADFS does not require client_info in the response\r\n        if (authorityType === AuthorityType.Adfs) {\r\n            this.logger.verbose(\"Authority type is ADFS, creating ADFS account\");\r\n            return AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);\r\n        }\r\n\r\n        // This fallback applies to B2C as well as they fall under an AAD account type.\r\n        if (StringUtils.isEmpty(serverTokenResponse.client_info) && authority.protocolMode === \"AAD\") {\r\n            throw ClientAuthError.createClientInfoEmptyError();\r\n        }\r\n\r\n        return serverTokenResponse.client_info ?\r\n            AccountEntity.createAccount(serverTokenResponse.client_info, this.homeAccountIdentifier, authority, idToken, oboAssertion, cloudGraphHostName, msGraphhost) :\r\n            AccountEntity.createGenericAccount(authority, this.homeAccountIdentifier, idToken, oboAssertion, cloudGraphHostName, msGraphhost);\r\n    }\r\n\r\n    /**\r\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n     *\r\n     * Optionally takes a state string that is set as-is in the response.\r\n     *\r\n     * @param cacheRecord\r\n     * @param idTokenObj\r\n     * @param fromTokenCache\r\n     * @param stateString\r\n     */\r\n    static async generateAuthenticationResult(\r\n        cryptoObj: ICrypto, \r\n        authority: Authority,\r\n        cacheRecord: CacheRecord, \r\n        fromTokenCache: boolean, \r\n        request: BaseAuthRequest,\r\n        idTokenObj?: AuthToken,\r\n        requestState?: RequestStateObject): Promise<AuthenticationResult> {\r\n        let accessToken: string = \"\";\r\n        let responseScopes: Array<string> = [];\r\n        let expiresOn: Date | null = null;\r\n        let extExpiresOn: Date | undefined;\r\n        let familyId: string = Constants.EMPTY_STRING;\r\n\r\n        if (cacheRecord.accessToken) {\r\n            if (cacheRecord.accessToken.tokenType === AuthenticationScheme.POP) {\r\n                const popTokenGenerator: PopTokenGenerator = new PopTokenGenerator(cryptoObj);\r\n                accessToken = await popTokenGenerator.signPopToken(cacheRecord.accessToken.secret, request);\r\n            } else {\r\n                accessToken = cacheRecord.accessToken.secret;\r\n            }\r\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\r\n            expiresOn = new Date(Number(cacheRecord.accessToken.expiresOn) * 1000);\r\n            extExpiresOn = new Date(Number(cacheRecord.accessToken.extendedExpiresOn) * 1000);\r\n        }\r\n\r\n        if (cacheRecord.appMetadata) {\r\n            familyId = cacheRecord.appMetadata.familyId === THE_FAMILY_ID ? THE_FAMILY_ID : Constants.EMPTY_STRING;\r\n        }\r\n        const uid = idTokenObj?.claims.oid || idTokenObj?.claims.sub || Constants.EMPTY_STRING;\r\n        const tid = idTokenObj?.claims.tid || Constants.EMPTY_STRING;\r\n\r\n        return {\r\n            authority: authority.canonicalAuthority,\r\n            uniqueId: uid,\r\n            tenantId: tid,\r\n            scopes: responseScopes,\r\n            account: cacheRecord.account ? cacheRecord.account.getAccountInfo() : null,\r\n            idToken: idTokenObj ? idTokenObj.rawToken : Constants.EMPTY_STRING,\r\n            idTokenClaims: idTokenObj ? idTokenObj.claims : {},\r\n            accessToken: accessToken,\r\n            fromCache: fromTokenCache,\r\n            expiresOn: expiresOn,\r\n            extExpiresOn: extExpiresOn,\r\n            familyId: familyId,\r\n            tokenType: cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\r\n            state: requestState ? requestState.userRequestState : Constants.EMPTY_STRING,\r\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName || Constants.EMPTY_STRING,\r\n            msGraphHost: cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING\r\n        };\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}