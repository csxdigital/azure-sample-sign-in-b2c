{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\nvar DatabaseStorage = /** @class */function () {\n  function DatabaseStorage(dbName, tableName, version) {\n    this.dbName = dbName;\n    this.tableName = tableName;\n    this.version = version;\n    this.dbOpen = false;\n  }\n  /**\r\n   * Opens IndexedDB instance.\r\n   */\n  DatabaseStorage.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          // TODO: Add timeouts?\n          var openDB = window.indexedDB.open(_this.dbName, _this.version);\n          openDB.addEventListener(\"upgradeneeded\", function (e) {\n            var event = e;\n            event.target.result.createObjectStore(_this.tableName);\n          });\n          openDB.addEventListener(\"success\", function (e) {\n            var event = e;\n            _this.db = event.target.result;\n            _this.dbOpen = true;\n            resolve();\n          });\n          openDB.addEventListener(\"error\", function (error) {\n            return reject(error);\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Retrieves item from IndexedDB instance.\r\n   * @param key\r\n   */\n  DatabaseStorage.prototype.get = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.dbOpen) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.open()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGet = objectStore.get(key);\n              dbGet.addEventListener(\"success\", function (e) {\n                var event = e;\n                resolve(event.target.result);\n              });\n              dbGet.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Adds item to IndexedDB under given key\r\n   * @param key\r\n   * @param payload\r\n   */\n  DatabaseStorage.prototype.put = function (key, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.dbOpen) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.open()];\n          case 1:\n            _a.sent();\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbPut = objectStore.put(payload, key);\n              dbPut.addEventListener(\"success\", function (e) {\n                var event = e;\n                resolve(event.target.result);\n              });\n              dbPut.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  return DatabaseStorage;\n}();\nexport { DatabaseStorage };","map":{"version":3,"mappings":";;;;;;AAAA;;;;AAmBA;;;;EAUI,yBAAYA,MAAc,EAAEC,SAAiB,EAAEC,OAAe;IAC1D,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAG,KAAK;;;;;EAMjBC,8BAAI,GAAV;;;;QACI,sBAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM;;UAE/B,IAAMC,MAAM,GAAGC,MAAM,CAACC,SAAS,CAACC,IAAI,CAACC,KAAI,CAACZ,MAAM,EAAEY,KAAI,CAACV,OAAO,CAAC;UAC/DM,MAAM,CAACK,gBAAgB,CAAC,eAAe,EAAE,UAACC,CAAwB;YAC9D,IAAMC,KAAK,GAAGD,CAAgC;YAC9CC,KAAK,CAACC,MAAM,CAACC,MAAM,CAACC,iBAAiB,CAACN,KAAI,CAACX,SAAS,CAAC;WACxD,CAAC;UACFO,MAAM,CAACK,gBAAgB,CAAC,SAAS,EAAE,UAACC,CAAQ;YACxC,IAAMC,KAAK,GAAGD,CAA0B;YACxCF,KAAI,CAACO,EAAE,GAAGJ,KAAK,CAACC,MAAM,CAACC,MAAM;YAC7BL,KAAI,CAACT,MAAM,GAAG,IAAI;YAClBG,OAAO,EAAE;WACZ,CAAC;UAEFE,MAAM,CAACK,gBAAgB,CAAC,OAAO,EAAE,eAAK;YAAI,aAAM,CAACO,KAAK,CAAC;UAAA,EAAC;SAC3D,CAAC;;;GACL;;;;;EAMKhB,6BAAG,GAAT,UAAUiB,GAAW;;;;;;iBACb,CAAC,IAAI,CAAClB,MAAM,EAAZ;YACA,qBAAM,IAAI,CAACQ,IAAI,EAAE;;YAAjBW,SAAiB;;;YAGrB,sBAAO,IAAIjB,OAAO,CAAI,UAACC,OAAO,EAAEC,MAAM;;cAElC,IAAI,CAACK,KAAI,CAACO,EAAE,EAAE;gBACV,OAAOZ,MAAM,CAACgB,gBAAgB,CAACC,0BAA0B,EAAE,CAAC;;cAGhE,IAAMC,WAAW,GAAGb,KAAI,CAACO,EAAE,CAACM,WAAW,CAAC,CAACb,KAAI,CAACX,SAAS,CAAC,EAAE,UAAU,CAAC;cAErE,IAAMyB,WAAW,GAAGD,WAAW,CAACC,WAAW,CAACd,KAAI,CAACX,SAAS,CAAC;cAC3D,IAAM0B,KAAK,GAAGD,WAAW,CAACE,GAAG,CAACP,GAAG,CAAC;cAClCM,KAAK,CAACd,gBAAgB,CAAC,SAAS,EAAE,UAACC,CAAQ;gBACvC,IAAMC,KAAK,GAAGD,CAAoB;gBAClCR,OAAO,CAACS,KAAK,CAACC,MAAM,CAACC,MAAM,CAAC;eAC/B,CAAC;cACFU,KAAK,CAACd,gBAAgB,CAAC,OAAO,EAAE,WAAC;gBAAI,aAAM,CAACC,CAAC,CAAC;cAAA,EAAC;aAClD,CAAC;QAAC;;;GACN;;;;;;EAOKV,6BAAG,GAAT,UAAUiB,GAAW,EAAEQ,OAAU;;;;;;iBACzB,CAAC,IAAI,CAAC1B,MAAM,EAAZ;YACA,qBAAM,IAAI,CAACQ,IAAI,EAAE;;YAAjBW,SAAiB;;;YAGrB,sBAAO,IAAIjB,OAAO,CAAI,UAACC,OAAiB,EAAEC,MAAgB;;cAEtD,IAAI,CAACK,KAAI,CAACO,EAAE,EAAE;gBACV,OAAOZ,MAAM,CAACgB,gBAAgB,CAACC,0BAA0B,EAAE,CAAC;;cAGhE,IAAMC,WAAW,GAAGb,KAAI,CAACO,EAAE,CAACM,WAAW,CAAC,CAACb,KAAI,CAACX,SAAS,CAAC,EAAE,WAAW,CAAC;cACtE,IAAMyB,WAAW,GAAGD,WAAW,CAACC,WAAW,CAACd,KAAI,CAACX,SAAS,CAAC;cAE3D,IAAM6B,KAAK,GAAGJ,WAAW,CAACK,GAAG,CAACF,OAAO,EAAER,GAAG,CAAC;cAC3CS,KAAK,CAACjB,gBAAgB,CAAC,SAAS,EAAE,UAACC,CAAQ;gBACvC,IAAMC,KAAK,GAAGD,CAAoB;gBAClCR,OAAO,CAACS,KAAK,CAACC,MAAM,CAACC,MAAM,CAAC;eAC/B,CAAC;cACFa,KAAK,CAACjB,gBAAgB,CAAC,OAAO,EAAE,WAAC;gBAAI,aAAM,CAACC,CAAC,CAAC;cAAA,EAAC;aAClD,CAAC;QAAC;;;GACN;EACL,sBAAC;AAAD,CAAC","names":["dbName","tableName","version","dbOpen","DatabaseStorage","Promise","resolve","reject","openDB","window","indexedDB","open","_this","addEventListener","e","event","target","result","createObjectStore","db","error","key","_a","BrowserAuthError","createDatabaseNotOpenError","transaction","objectStore","dbGet","get","payload","dbPut","put"],"sources":["../../src/cache/DatabaseStorage.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\n\r\ninterface IDBOpenDBRequestEvent extends Event {\r\n    target: IDBOpenDBRequest & EventTarget;\r\n}\r\n\r\ninterface IDBOpenOnUpgradeNeededEvent extends IDBVersionChangeEvent {\r\n    target: IDBOpenDBRequest & EventTarget;\r\n}\r\n\r\ninterface IDBRequestEvent extends Event {\r\n    target: IDBRequest & EventTarget;\r\n}\r\n\r\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\r\nexport class DatabaseStorage<T>{\r\n    private db: IDBDatabase|undefined;\r\n    private dbName: string;\r\n    private tableName: string;\r\n    private version: number;\r\n    private dbOpen: boolean;\r\n\r\n    constructor(dbName: string, tableName: string, version: number) {\r\n        this.dbName = dbName;\r\n        this.tableName = tableName;\r\n        this.version = version;\r\n        this.dbOpen = false;\r\n    }\r\n\r\n    /**\r\n     * Opens IndexedDB instance.\r\n     */\r\n    async open(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            // TODO: Add timeouts?\r\n            const openDB = window.indexedDB.open(this.dbName, this.version);\r\n            openDB.addEventListener(\"upgradeneeded\", (e: IDBVersionChangeEvent) => {\r\n                const event = e as IDBOpenOnUpgradeNeededEvent;\r\n                event.target.result.createObjectStore(this.tableName);\r\n            });\r\n            openDB.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBOpenDBRequestEvent;\r\n                this.db = event.target.result;\r\n                this.dbOpen = true;\r\n                resolve();\r\n            });\r\n\r\n            openDB.addEventListener(\"error\", error => reject(error));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Retrieves item from IndexedDB instance.\r\n     * @param key \r\n     */\r\n    async get(key: string): Promise<T> {\r\n        if (!this.dbOpen) {\r\n            await this.open();\r\n        }\r\n\r\n        return new Promise<T>((resolve, reject) => {\r\n            // TODO: Add timeouts?\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n\r\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\r\n\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n            const dbGet = objectStore.get(key);\r\n            dbGet.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBRequestEvent;\r\n                resolve(event.target.result);\r\n            });\r\n            dbGet.addEventListener(\"error\", e => reject(e));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds item to IndexedDB under given key\r\n     * @param key \r\n     * @param payload \r\n     */\r\n    async put(key: string, payload: T): Promise<T> {\r\n        if (!this.dbOpen) {\r\n            await this.open();\r\n        }\r\n\r\n        return new Promise<T>((resolve: Function, reject: Function) => {\r\n            // TODO: Add timeouts?\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n\r\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n\r\n            const dbPut = objectStore.put(payload, key);\r\n            dbPut.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBRequestEvent;\r\n                resolve(event.target.result);\r\n            });\r\n            dbPut.addEventListener(\"error\", e => reject(e));\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}