{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { StringUtils, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, BrowserConstants, InteractionType } from './BrowserConstants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nvar PopupUtils = /** @class */function () {\n  function PopupUtils(storageImpl, logger) {\n    this.browserStorage = storageImpl;\n    this.logger = logger;\n    // Properly sets this reference for the unload event.\n    this.unloadWindow = this.unloadWindow.bind(this);\n  }\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @ignore\r\n   * @hidden\r\n   */\n  PopupUtils.prototype.openPopup = function (urlNavigate, popupName, popup) {\n    try {\n      var popupWindow = void 0;\n      // Popup window passed in, setting url to navigate to\n      if (popup) {\n        popupWindow = popup;\n        this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\n        popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupName);\n      }\n      // Popup will be null if popups are blocked\n      if (!popupWindow) {\n        throw BrowserAuthError.createEmptyWindowCreatedError();\n      }\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n      this.currentWindow = popupWindow;\n      window.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n      throw BrowserAuthError.createPopupWindowError(e.toString());\n    }\n  };\n  PopupUtils.openSizedPopup = function (urlNavigate, popupName) {\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n    var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n    var winTop = window.screenTop ? window.screenTop : window.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n    var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var left = Math.max(0, width / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    var top = Math.max(0, height / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    return window.open(urlNavigate, popupName, \"width=\" + BrowserConstants.POPUP_WIDTH + \", height=\" + BrowserConstants.POPUP_HEIGHT + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\n  };\n  /**\r\n   * Event callback to unload main window.\r\n   */\n  PopupUtils.prototype.unloadWindow = function (e) {\n    this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    }\n    // Guarantees browser unload will happen, so no other errors will be thrown.\n    e.preventDefault();\n  };\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n  PopupUtils.prototype.cleanPopup = function (popupWindow) {\n    if (popupWindow) {\n      // Close window.\n      popupWindow.close();\n    }\n    // Remove window unload function\n    window.removeEventListener(\"beforeunload\", this.unloadWindow);\n    // Interaction is completed - remove interaction status.\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n  };\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   */\n  PopupUtils.prototype.monitorPopupForSameOrigin = function (popupWindow) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var intervalId = setInterval(function () {\n        if (popupWindow.closed) {\n          // Window is closed\n          _this.cleanPopup();\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createUserCancelledError());\n          return;\n        }\n        var href = Constants.EMPTY_STRING;\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {}\n        // Don't process blank pages or cross domain\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n        clearInterval(intervalId);\n        resolve();\n      }, BrowserConstants.POLL_INTERVAL_MS);\n    });\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n  PopupUtils.generatePopupName = function (clientId, request) {\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + request.scopes.join(\"-\") + \".\" + request.authority + \".\" + request.correlationId;\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n  PopupUtils.generateLogoutPopupName = function (clientId, request) {\n    var homeAccountId = request.account && request.account.homeAccountId;\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + homeAccountId + \".\" + request.correlationId;\n  };\n  return PopupUtils;\n}();\nexport { PopupUtils };","map":{"version":3,"mappings":"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","names":["storageImpl","logger","browserStorage","unloadWindow","bind","PopupUtils","urlNavigate","popupName","popup","popupWindow","verbosePii","location","assign","openSizedPopup","BrowserAuthError","createEmptyWindowCreatedError","focus","currentWindow","window","addEventListener","e","error","message","removeItem","generateCacheKey","TemporaryCacheKeys","INTERACTION_STATUS_KEY","createPopupWindowError","toString","winLeft","screenLeft","screenX","winTop","screenTop","screenY","width","innerWidth","document","documentElement","clientWidth","body","height","innerHeight","clientHeight","left","Math","max","BrowserConstants","POPUP_WIDTH","top","POPUP_HEIGHT","open","cleanRequestByInteractionType","InteractionType","Popup","close","preventDefault","removeEventListener","Promise","resolve","reject","intervalId","setInterval","closed","_this","cleanPopup","clearInterval","createUserCancelledError","href","Constants","EMPTY_STRING","StringUtils","isEmpty","POLL_INTERVAL_MS","clientId","request","POPUP_NAME_PREFIX","scopes","join","authority","correlationId","homeAccountId","account"],"sources":["../../src/utils/PopupUtils.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CommonEndSessionRequest, Constants, Logger, StringUtils } from \"@azure/msal-common\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { BrowserConstants, InteractionType, TemporaryCacheKeys } from \"./BrowserConstants\";\r\n\r\nexport class PopupUtils {\r\n    private browserStorage: BrowserCacheManager;\r\n    private logger: Logger;\r\n    private currentWindow: Window|undefined;\r\n\r\n    constructor(storageImpl: BrowserCacheManager, logger: Logger) {\r\n        this.browserStorage = storageImpl;\r\n        this.logger = logger;\r\n\r\n        // Properly sets this reference for the unload event.\r\n        this.unloadWindow = this.unloadWindow.bind(this);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    openPopup(urlNavigate: string, popupName: string, popup?: Window|null): Window {\r\n        try {\r\n            let popupWindow;\r\n            // Popup window passed in, setting url to navigate to\r\n            if (popup) {\r\n                popupWindow = popup;\r\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\r\n                popupWindow.location.assign(urlNavigate);\r\n            } else if (typeof popup === \"undefined\") {\r\n                // Popup will be undefined if it was not passed in\r\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\r\n                popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupName);\r\n            }\r\n\r\n            // Popup will be null if popups are blocked\r\n            if (!popupWindow) {\r\n                throw BrowserAuthError.createEmptyWindowCreatedError();\r\n            }\r\n            if (popupWindow.focus) {\r\n                popupWindow.focus();\r\n            }\r\n            this.currentWindow = popupWindow;\r\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\r\n\r\n            return popupWindow;\r\n        } catch (e) {\r\n            this.logger.error(\"error opening popup \" + e.message);\r\n            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\r\n            throw BrowserAuthError.createPopupWindowError(e.toString());\r\n        }\r\n    }\r\n\r\n    static openSizedPopup(urlNavigate: string, popupName: string): Window|null {\r\n        /**\r\n         * adding winLeft and winTop to account for dual monitor\r\n         * using screenLeft and screenTop for IE8 and earlier\r\n         */\r\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\r\n        /**\r\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n         * using document.documentElement.clientWidth for IE8 and earlier\r\n         */\r\n        const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n        const left = Math.max(0, ((width / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\r\n        const top = Math.max(0, ((height / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\r\n\r\n        return window.open(urlNavigate, popupName, `width=${BrowserConstants.POPUP_WIDTH}, height=${BrowserConstants.POPUP_HEIGHT}, top=${top}, left=${left}, scrollbars=yes`);\r\n    }\r\n\r\n    /**\r\n     * Event callback to unload main window.\r\n     */\r\n    unloadWindow(e: Event): void {\r\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\r\n        if (this.currentWindow) {\r\n            this.currentWindow.close();\r\n        }\r\n        // Guarantees browser unload will happen, so no other errors will be thrown.\r\n        e.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Closes popup, removes any state vars created during popup calls.\r\n     * @param popupWindow\r\n     */\r\n    cleanPopup(popupWindow?: Window): void {\r\n        if (popupWindow) {\r\n            // Close window.\r\n            popupWindow.close();\r\n        }\r\n        // Remove window unload function\r\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\r\n\r\n        // Interaction is completed - remove interaction status.\r\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\r\n    }\r\n\r\n    /**\r\n     * Monitors a window until it loads a url with the same origin.\r\n     * @param popupWindow - window that is being monitored\r\n     */\r\n    monitorPopupForSameOrigin(popupWindow: Window): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const intervalId = setInterval(() => {\r\n                if (popupWindow.closed) {\r\n                    // Window is closed\r\n                    this.cleanPopup();\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createUserCancelledError());\r\n                    return;\r\n                }\r\n\r\n                let href: string = Constants.EMPTY_STRING;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = popupWindow.location.href;\r\n                } catch (e) {}\r\n\r\n                // Don't process blank pages or cross domain\r\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n\r\n                clearInterval(intervalId);\r\n                resolve();\r\n            }, BrowserConstants.POLL_INTERVAL_MS);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates the name for the popup based on the client id and request\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    static generatePopupName(clientId: string, request: AuthorizationUrlRequest): string {\r\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${clientId}.${request.scopes.join(\"-\")}.${request.authority}.${request.correlationId}`;\r\n    }\r\n\r\n    /**\r\n     * Generates the name for the popup based on the client id and request for logouts\r\n     * @param clientId \r\n     * @param request \r\n     */\r\n    static generateLogoutPopupName(clientId: string, request: CommonEndSessionRequest): string {\r\n        const homeAccountId = request.account && request.account.homeAccountId;\r\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${clientId}.${homeAccountId}.${request.correlationId}`;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}